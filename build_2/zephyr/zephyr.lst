
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	70 18 00 20 3d 19 00 00 f9 4a 00 00 11 19 00 00     p.. =....J......
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	11 19 00 00 11 19 00 00 11 19 00 00 11 19 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	c5 15 00 00 11 19 00 00 00 00 00 00 6d 15 00 00     ............m...
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	11 19 00 00                                         ....

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
					str_ptr_arg[s_idx] = arg_idx;
  a0:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
			switch (*fmt) {
  c0:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
  d0:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
  e0:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
  f0:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
 100:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
 110:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
				align = VA_STACK_ALIGN(void *);
 120:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
			switch (*fmt) {
 130:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
 140:	45 16 00 00 45 16 00 00 45 16 00 00 45 16 00 00     E...E...E...E...
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 150:	45 16 00 00                                         E...

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
		if (is_str_arg) {
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f04f 30ff 	movne.w	r0, #4294967295
			int v = va_arg(ap, int);
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				arg_idx--;
     174:	f000 f808 	bl	188 <__udivmoddi4>
				parsing = false;
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
				continue;
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
				if (fmt[-1] == 'l') {
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
					if (fmt[-2] == 'l') {
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				parsing = false;
     18c:	4686      	mov	lr, r0
					if (fmt[-2] == 'l') {
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
						align = VA_STACK_ALIGN(long long);
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
				size = sizeof(void *);
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
					v.ld = va_arg(ap, long double);
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
				buf = (void *) ROUND_UP(buf, align);
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_SRAM_SIZE+0x74>
					v.ld = va_arg(ap, long double);
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
					if (BUF_OFFSET + size > len) {
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
						*(long double *)buf = v.ld;
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
				parsing = false;
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			switch (*fmt) {
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
			if (*++fmt == '\0') {
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
			if (!parsing) {
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
				if (*fmt == '%') {
     1d8:	d928      	bls.n	22c <CONFIG_SRAM_SIZE+0x6c>
     1da:	18eb      	adds	r3, r5, r3
					parsing = true;
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295
					arg_idx++;
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
				align = VA_STACK_ALIGN(size_t);
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
			switch (*fmt) {
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
				parsing = false;
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
					return -EINVAL;
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
			long long v = va_arg(ap, long long);
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_SRAM_SIZE+0x70>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20c:	d204      	bcs.n	218 <CONFIG_SRAM_SIZE+0x58>
     20e:	42a0      	cmp	r0, r4
				}
			}
			buf += sizeof(long long);
     210:	d902      	bls.n	218 <CONFIG_SRAM_SIZE+0x58>
     212:	f1ac 0302 	sub.w	r3, ip, #2
		if (is_str_arg) {
     216:	442c      	add	r4, r5
		} else if (size == sizeof(int)) {
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
			int v = va_arg(ap, int);
     21e:	b11e      	cbz	r6, 228 <CONFIG_SRAM_SIZE+0x68>
			if (buf0 != NULL) {
     220:	40d4      	lsrs	r4, r2
		} else if (size == sizeof(long long)) {
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
			long long v = va_arg(ap, long long);
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
			if (buf0 != NULL) {
     232:	e7f1      	b.n	218 <CONFIG_SRAM_SIZE+0x58>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
			s = va_arg(ap, char *);
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
			if (is_ro && !do_ro) {
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     24a:	fb0c f807 	mul.w	r8, ip, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d204      	bcs.n	268 <CONFIG_SRAM_SIZE+0xa8>
				if (buf0 != NULL) {
     25e:	4598      	cmp	r8, r3
					str_ptr_pos[s_idx] = s_ptr_idx;
     260:	d902      	bls.n	268 <CONFIG_SRAM_SIZE+0xa8>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
					str_ptr_arg[s_idx] = arg_idx;
     268:	eba3 0308 	sub.w	r3, r3, r8
					str_ptr_pos[s_idx] = s_ptr_idx;
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
					str_ptr_arg[s_idx] = arg_idx;
     272:	fb0e 331c 	mls	r3, lr, ip, r3
					if (is_ro) {
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
						s_ro_cnt++;
     284:	f10c 33ff 	add.w	r3, ip, #4294967295
				s_idx++;
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
					if (BUF_OFFSET + size > len) {
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
			switch (*fmt) {
     28e:	f1ac 0302 	sub.w	r3, ip, #2
			buf += sizeof(char *);
     292:	442c      	add	r4, r5
					if (BUF_OFFSET + size > len) {
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	e7c0      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
				} else if (is_ro) {
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
					len += 1;
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
				} else if (rws_pos_en) {
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
					len += strlen(s) + 1 + 1;
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2dc:	4429      	add	r1, r5
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
	if (rws_pos_en) {
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ec:	fb0c f707 	mul.w	r7, ip, r7
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
		for (i = 0; i < s_idx; i++) {
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
     2f8:	18eb      	adds	r3, r5, r3
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295
		for (i = 0; i < s_idx; i++) {
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     300:	429f      	cmp	r7, r3
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     304:	f1ac 0102 	sub.w	r1, ip, #2
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			*buf++ = str_ptr_arg[i];
     310:	e793      	b.n	23a <CONFIG_SRAM_SIZE+0x7a>
     312:	4660      	mov	r0, ip
	for (i = 0; i < s_idx; i++) {
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     31a:	4660      	mov	r0, ip
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     31c:	e7a4      	b.n	268 <CONFIG_SRAM_SIZE+0xa8>
		pkg_hdr->desc.rw_str_cnt = 0;
     31e:	4663      	mov	r3, ip
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
			if (BUF_OFFSET + 1 > len) {
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32e:	e9c6 e000 	strd	lr, r0, [r6]
			if (BUF_OFFSET + 1 > len) {
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
			*buf++ = pos;
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
		for (i = 0; i < s_idx; i++) {
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
		if (rws_pos_en) {
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
			*buf++ = str_ptr_arg[i];
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
			size = 0;
     358:	e9c6 4c00 	strd	r4, ip, [r6]
		if (BUF_OFFSET + 1 + size > len) {
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
		*buf++ = str_ptr_pos[i];
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
		memcpy(buf, s, size);
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
		buf += size;
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
	for (i = 0; i < s_idx; i++) {
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
			size = strlen(s) + 1;
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     396:	459a      	cmp	sl, r3
			size = strlen(s) + 1;
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295
		return -EFAULT;
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
     3ec:	d106      	bne.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <main>:
    NRF_NVMC_S->CONFIG = val;
    while (!NRF_NVMC_S->READY);
}

void main(void)
{
     424:	b508      	push	{r3, lr}
    uint32_t read_val;

    printk("Start approtect sample.\n");
     426:	481f      	ldr	r0, [pc, #124]	; (4a4 <main+0x80>)
     428:	f004 fa04 	bl	4834 <printk>
    NRF_CTRLAP_S->APPROTECT.DISABLE = 0x00000001;
     42c:	2201      	movs	r2, #1
     42e:	4b1e      	ldr	r3, [pc, #120]	; (4a8 <main+0x84>)
     430:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    // Somehow, reading the value back does not work.
    // printk("NRF_CTRLAP_S->ERASEPROTECT.DISABLE: %08x\n",NRF_CTRLAP_S->ERASEPROTECT.DISABLE);

    if(NRF_UICR_S->APPROTECT){
     434:	4b1d      	ldr	r3, [pc, #116]	; (4ac <main+0x88>)
     436:	681b      	ldr	r3, [r3, #0]
     438:	b33b      	cbz	r3, 48a <main+0x66>
    while (!NRF_NVMC_S->READY);
     43a:	4b1d      	ldr	r3, [pc, #116]	; (4b0 <main+0x8c>)
     43c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     440:	2a00      	cmp	r2, #0
     442:	d0fb      	beq.n	43c <main+0x18>
    NRF_NVMC_S->CONFIG = val;
     444:	2201      	movs	r2, #1
     446:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    while (!NRF_NVMC_S->READY);
     44a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     44e:	2a00      	cmp	r2, #0
     450:	d0fb      	beq.n	44a <main+0x26>
        config_nvmc(NVMC_CONFIG_WEN_Wen);
        NRF_UICR_S->APPROTECT=0x00000000;
     452:	2200      	movs	r2, #0
     454:	4b15      	ldr	r3, [pc, #84]	; (4ac <main+0x88>)
     456:	601a      	str	r2, [r3, #0]
    while (!NRF_NVMC_S->READY);
     458:	4b15      	ldr	r3, [pc, #84]	; (4b0 <main+0x8c>)
     45a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     45e:	2a00      	cmp	r2, #0
     460:	d0fb      	beq.n	45a <main+0x36>
    NRF_NVMC_S->CONFIG = val;
     462:	2200      	movs	r2, #0
     464:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    while (!NRF_NVMC_S->READY);
     468:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     46c:	2a00      	cmp	r2, #0
     46e:	d0fb      	beq.n	468 <main+0x44>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     470:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     474:	490f      	ldr	r1, [pc, #60]	; (4b4 <main+0x90>)
     476:	4b10      	ldr	r3, [pc, #64]	; (4b8 <main+0x94>)
     478:	68ca      	ldr	r2, [r1, #12]
     47a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     47e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     480:	60cb      	str	r3, [r1, #12]
     482:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     486:	bf00      	nop
  for(;;)                                                           /* wait until reset */
     488:	e7fd      	b.n	486 <main+0x62>
        config_nvmc(NVMC_CONFIG_WEN_Ren);
        NVIC_SystemReset();
    }

    printk("Entering forever loop.\n");
     48a:	480c      	ldr	r0, [pc, #48]	; (4bc <main+0x98>)
     48c:	f004 f9d2 	bl	4834 <printk>
    printk("Disclaimer: This example does not lock netcore, and can be unlocked by recovering netcore!\n See README for more information.\n");
     490:	480b      	ldr	r0, [pc, #44]	; (4c0 <main+0x9c>)
     492:	f004 f9cf 	bl	4834 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     496:	2100      	movs	r1, #0
     498:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     49c:	f003 fe56 	bl	414c <z_impl_k_sleep>
    while(1){
     4a0:	e7f9      	b.n	496 <main+0x72>
     4a2:	bf00      	nop
     4a4:	000059e4 	.word	0x000059e4
     4a8:	50006000 	.word	0x50006000
     4ac:	00ff8000 	.word	0x00ff8000
     4b0:	50039000 	.word	0x50039000
     4b4:	e000ed00 	.word	0xe000ed00
     4b8:	05fa0004 	.word	0x05fa0004
     4bc:	000059fd 	.word	0x000059fd
     4c0:	00005a15 	.word	0x00005a15

000004c4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     4c4:	4b01      	ldr	r3, [pc, #4]	; (4cc <char_out+0x8>)
     4c6:	681b      	ldr	r3, [r3, #0]
     4c8:	4718      	bx	r3
     4ca:	bf00      	nop
     4cc:	20000000 	.word	0x20000000

000004d0 <__printk_hook_install>:
	_char_out = fn;
     4d0:	4b01      	ldr	r3, [pc, #4]	; (4d8 <__printk_hook_install+0x8>)
     4d2:	6018      	str	r0, [r3, #0]
}
     4d4:	4770      	bx	lr
     4d6:	bf00      	nop
     4d8:	20000000 	.word	0x20000000

000004dc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     4dc:	b507      	push	{r0, r1, r2, lr}
     4de:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     4e0:	2100      	movs	r1, #0
     4e2:	4602      	mov	r2, r0
     4e4:	9100      	str	r1, [sp, #0]
     4e6:	4803      	ldr	r0, [pc, #12]	; (4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>)
     4e8:	f000 f914 	bl	714 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     4ec:	b003      	add	sp, #12
     4ee:	f85d fb04 	ldr.w	pc, [sp], #4
     4f2:	bf00      	nop
     4f4:	000004c5 	.word	0x000004c5

000004f8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4fc:	8b05      	ldrh	r5, [r0, #24]
{
     4fe:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     500:	0728      	lsls	r0, r5, #28
{
     502:	4690      	mov	r8, r2
	if (processing) {
     504:	d411      	bmi.n	52a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     506:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     508:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     50c:	f040 80cd 	bne.w	6aa <process_event+0x1b2>
			evt = process_recheck(mgr);
     510:	4620      	mov	r0, r4
     512:	f004 f9a6 	bl	4862 <process_recheck>
		}

		if (evt == EVT_NOP) {
     516:	b178      	cbz	r0, 538 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     518:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     51a:	8b21      	ldrh	r1, [r4, #24]
     51c:	2804      	cmp	r0, #4
     51e:	d811      	bhi.n	544 <process_event+0x4c>
     520:	e8df f000 	tbb	[pc, r0]
     524:	856d10c3 	.word	0x856d10c3
     528:	95          	.byte	0x95
     529:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     52a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     52c:	bf0c      	ite	eq
     52e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     532:	f045 0520 	orrne.w	r5, r5, #32
     536:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     538:	f388 8811 	msr	BASEPRI, r8
     53c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     544:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     548:	45aa      	cmp	sl, r5
     54a:	f000 80a6 	beq.w	69a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     54e:	2700      	movs	r7, #0
     550:	46b9      	mov	r9, r7
     552:	463e      	mov	r6, r7
     554:	68a3      	ldr	r3, [r4, #8]
     556:	2b00      	cmp	r3, #0
     558:	f000 80bd 	beq.w	6d6 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     55c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     560:	8321      	strh	r1, [r4, #24]
     562:	f388 8811 	msr	BASEPRI, r8
     566:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     56a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     56c:	2900      	cmp	r1, #0
     56e:	f000 80bb 	beq.w	6e8 <process_event+0x1f0>
	return node->next;
     572:	680d      	ldr	r5, [r1, #0]
     574:	2900      	cmp	r1, #0
     576:	f000 80b7 	beq.w	6e8 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
     57a:	4633      	mov	r3, r6
     57c:	4652      	mov	r2, sl
     57e:	4620      	mov	r0, r4
     580:	f8d1 8004 	ldr.w	r8, [r1, #4]
     584:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     586:	2d00      	cmp	r5, #0
     588:	d076      	beq.n	678 <process_event+0x180>
     58a:	682b      	ldr	r3, [r5, #0]
     58c:	4629      	mov	r1, r5
     58e:	461d      	mov	r5, r3
     590:	e7f0      	b.n	574 <process_event+0x7c>
     592:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     596:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     598:	2a01      	cmp	r2, #1
     59a:	d81b      	bhi.n	5d4 <process_event+0xdc>
	list->head = NULL;
     59c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     59e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     5a2:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     5a4:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5a6:	b289      	uxth	r1, r1
	list->tail = NULL;
     5a8:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     5ac:	d109      	bne.n	5c2 <process_event+0xca>
     5ae:	463b      	mov	r3, r7
     5b0:	e003      	b.n	5ba <process_event+0xc2>
				mgr->refs += 1U;
     5b2:	8b62      	ldrh	r2, [r4, #26]
     5b4:	3201      	adds	r2, #1
     5b6:	8362      	strh	r2, [r4, #26]
	return node->next;
     5b8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     5ba:	2b00      	cmp	r3, #0
     5bc:	d1f9      	bne.n	5b2 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5be:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     5c2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     5c4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     5c6:	f004 f94c 	bl	4862 <process_recheck>
     5ca:	2800      	cmp	r0, #0
     5cc:	d07b      	beq.n	6c6 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     5ce:	f041 0120 	orr.w	r1, r1, #32
     5d2:	e077      	b.n	6c4 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     5d4:	2b04      	cmp	r3, #4
     5d6:	d10a      	bne.n	5ee <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5d8:	f021 0107 	bic.w	r1, r1, #7
     5dc:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     5de:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     5e0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     5e2:	f004 f93e 	bl	4862 <process_recheck>
     5e6:	b110      	cbz	r0, 5ee <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     5e8:	f041 0120 	orr.w	r1, r1, #32
     5ec:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5ee:	8b21      	ldrh	r1, [r4, #24]
     5f0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5f4:	45aa      	cmp	sl, r5
     5f6:	d050      	beq.n	69a <process_event+0x1a2>
     5f8:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     5fa:	46b9      	mov	r9, r7
     5fc:	e7aa      	b.n	554 <process_event+0x5c>
			transit = mgr->transitions->start;
     5fe:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     600:	f021 0107 	bic.w	r1, r1, #7
     604:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     608:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     60a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     60e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     610:	d12d      	bne.n	66e <process_event+0x176>
		    || (transit != NULL)) {
     612:	f1b9 0f00 	cmp.w	r9, #0
     616:	d040      	beq.n	69a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     618:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     61c:	8321      	strh	r1, [r4, #24]
     61e:	f388 8811 	msr	BASEPRI, r8
     622:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     626:	4620      	mov	r0, r4
     628:	4939      	ldr	r1, [pc, #228]	; (710 <process_event+0x218>)
     62a:	47c8      	blx	r9
     62c:	e029      	b.n	682 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     62e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     632:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     634:	f041 0104 	orr.w	r1, r1, #4
     638:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     63a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     63c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     640:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     642:	d0e6      	beq.n	612 <process_event+0x11a>
     644:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     646:	f04f 0a04 	mov.w	sl, #4
		res = 0;
     64a:	463e      	mov	r6, r7
     64c:	e782      	b.n	554 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     64e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     652:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     654:	f041 0105 	orr.w	r1, r1, #5
     658:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     65a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     65c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     660:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     662:	d0d6      	beq.n	612 <process_event+0x11a>
     664:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     666:	f04f 0a05 	mov.w	sl, #5
		res = 0;
     66a:	463e      	mov	r6, r7
     66c:	e772      	b.n	554 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     66e:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     670:	f04f 0a06 	mov.w	sl, #6
		res = 0;
     674:	463e      	mov	r6, r7
     676:	e76d      	b.n	554 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     678:	462b      	mov	r3, r5
     67a:	e787      	b.n	58c <process_event+0x94>
			if (transit != NULL) {
     67c:	f1b9 0f00 	cmp.w	r9, #0
     680:	d1d1      	bne.n	626 <process_event+0x12e>
	__asm__ volatile(
     682:	f04f 0320 	mov.w	r3, #32
     686:	f3ef 8811 	mrs	r8, BASEPRI
     68a:	f383 8812 	msr	BASEPRI_MAX, r3
     68e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     692:	8b23      	ldrh	r3, [r4, #24]
     694:	f023 0308 	bic.w	r3, r3, #8
     698:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     69a:	8b25      	ldrh	r5, [r4, #24]
     69c:	06ea      	lsls	r2, r5, #27
     69e:	d52e      	bpl.n	6fe <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     6a0:	f025 0310 	bic.w	r3, r5, #16
     6a4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     6a6:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     6aa:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     6ac:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     6ae:	2e00      	cmp	r6, #0
     6b0:	f6bf af6f 	bge.w	592 <process_event+0x9a>
	list->head = NULL;
     6b4:	2300      	movs	r3, #0
		*clients = mgr->clients;
     6b6:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     6b8:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6bc:	f021 0107 	bic.w	r1, r1, #7
     6c0:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6c4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6c6:	8b21      	ldrh	r1, [r4, #24]
     6c8:	f04f 0900 	mov.w	r9, #0
     6cc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     6d0:	45aa      	cmp	sl, r5
     6d2:	f47f af3f 	bne.w	554 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     6d6:	2f00      	cmp	r7, #0
     6d8:	d09b      	beq.n	612 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     6da:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     6de:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     6e0:	f388 8811 	msr	BASEPRI, r8
     6e4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     6e8:	2f00      	cmp	r7, #0
     6ea:	d0c7      	beq.n	67c <process_event+0x184>
	return node->next;
     6ec:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     6ee:	4639      	mov	r1, r7
     6f0:	4633      	mov	r3, r6
     6f2:	4652      	mov	r2, sl
     6f4:	4620      	mov	r0, r4
     6f6:	f004 f8e0 	bl	48ba <notify_one>
	list->head = node;
     6fa:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     6fc:	e7f4      	b.n	6e8 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     6fe:	06ab      	lsls	r3, r5, #26
     700:	f57f af1a 	bpl.w	538 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     704:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     708:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     70a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     70e:	e6ff      	b.n	510 <process_event+0x18>
     710:	000048e7 	.word	0x000048e7

00000714 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     718:	4681      	mov	r9, r0
     71a:	468b      	mov	fp, r1
     71c:	4617      	mov	r7, r2
     71e:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     720:	2500      	movs	r5, #0
{
     722:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     724:	7838      	ldrb	r0, [r7, #0]
     726:	b908      	cbnz	r0, 72c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     728:	4628      	mov	r0, r5
     72a:	e357      	b.n	ddc <CONFIG_ISR_STACK_SIZE+0x5dc>
			OUTC(*fp++);
     72c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     72e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     730:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     732:	d006      	beq.n	742 <z_cbvprintf_impl+0x2e>
			OUTC('%');
     734:	4659      	mov	r1, fp
     736:	47c8      	blx	r9
     738:	2800      	cmp	r0, #0
     73a:	f2c0 834f 	blt.w	ddc <CONFIG_ISR_STACK_SIZE+0x5dc>
     73e:	3501      	adds	r5, #1
		if (bps == NULL) {
     740:	e1fb      	b.n	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
		} state = {
     742:	2218      	movs	r2, #24
     744:	2100      	movs	r1, #0
     746:	a80e      	add	r0, sp, #56	; 0x38
     748:	f004 fa22 	bl	4b90 <memset>
	if (*sp == '%') {
     74c:	787b      	ldrb	r3, [r7, #1]
     74e:	2b25      	cmp	r3, #37	; 0x25
     750:	d07d      	beq.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
     752:	2300      	movs	r3, #0
     754:	4698      	mov	r8, r3
     756:	469e      	mov	lr, r3
     758:	469c      	mov	ip, r3
     75a:	461e      	mov	r6, r3
     75c:	1c78      	adds	r0, r7, #1
     75e:	4601      	mov	r1, r0
		switch (*sp) {
     760:	f810 2b01 	ldrb.w	r2, [r0], #1
     764:	2a2b      	cmp	r2, #43	; 0x2b
     766:	f000 80a1 	beq.w	8ac <CONFIG_ISR_STACK_SIZE+0xac>
     76a:	f200 8098 	bhi.w	89e <CONFIG_ISR_STACK_SIZE+0x9e>
     76e:	2a20      	cmp	r2, #32
     770:	f000 809f 	beq.w	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
     774:	2a23      	cmp	r2, #35	; 0x23
     776:	f000 809f 	beq.w	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     77a:	b12b      	cbz	r3, 788 <z_cbvprintf_impl+0x74>
     77c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     784:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     788:	f1b8 0f00 	cmp.w	r8, #0
     78c:	d005      	beq.n	79a <z_cbvprintf_impl+0x86>
     78e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     792:	f043 0320 	orr.w	r3, r3, #32
     796:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     79a:	f1be 0f00 	cmp.w	lr, #0
     79e:	d005      	beq.n	7ac <z_cbvprintf_impl+0x98>
     7a0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     7a4:	f043 0310 	orr.w	r3, r3, #16
     7a8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     7ac:	f1bc 0f00 	cmp.w	ip, #0
     7b0:	d005      	beq.n	7be <z_cbvprintf_impl+0xaa>
     7b2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     7b6:	f043 0308 	orr.w	r3, r3, #8
     7ba:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     7be:	b12e      	cbz	r6, 7cc <z_cbvprintf_impl+0xb8>
     7c0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     7c4:	f043 0304 	orr.w	r3, r3, #4
     7c8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     7cc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     7d0:	f003 0044 	and.w	r0, r3, #68	; 0x44
     7d4:	2844      	cmp	r0, #68	; 0x44
     7d6:	d103      	bne.n	7e0 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     7d8:	f36f 1386 	bfc	r3, #6, #1
     7dc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     7e0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     7e4:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     7e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     7ea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     7ee:	d17f      	bne.n	8f0 <CONFIG_ISR_STACK_SIZE+0xf0>
		conv->width_star = true;
     7f0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     7f4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     7f6:	f042 0201 	orr.w	r2, r2, #1
     7fa:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     7fe:	781a      	ldrb	r2, [r3, #0]
     800:	2a2e      	cmp	r2, #46	; 0x2e
     802:	bf0c      	ite	eq
     804:	2101      	moveq	r1, #1
     806:	2100      	movne	r1, #0
     808:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     80c:	f361 0241 	bfi	r2, r1, #1, #1
     810:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     814:	d178      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
	if (*sp == '*') {
     816:	785a      	ldrb	r2, [r3, #1]
     818:	2a2a      	cmp	r2, #42	; 0x2a
     81a:	d06e      	beq.n	8fa <CONFIG_ISR_STACK_SIZE+0xfa>
	size_t val = 0;
     81c:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     81e:	f04f 0c0a 	mov.w	ip, #10
	++sp;
     822:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     824:	4619      	mov	r1, r3
     826:	f811 0b01 	ldrb.w	r0, [r1], #1
     82a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     82e:	2e09      	cmp	r6, #9
     830:	f240 8095 	bls.w	95e <CONFIG_ISR_STACK_SIZE+0x15e>
	conv->unsupported |= ((conv->prec_value < 0)
     834:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     838:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     83a:	f3c1 0040 	ubfx	r0, r1, #1, #1
     83e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     842:	460a      	mov	r2, r1
     844:	f360 0241 	bfi	r2, r0, #1, #1
     848:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     84c:	e05c      	b.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
		conv->specifier = *sp++;
     84e:	1cba      	adds	r2, r7, #2
     850:	9203      	str	r2, [sp, #12]
     852:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     856:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     85a:	07da      	lsls	r2, r3, #31
     85c:	f140 812e 	bpl.w	abc <CONFIG_ISR_STACK_SIZE+0x2bc>
			width = va_arg(ap, int);
     860:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     864:	f1b8 0f00 	cmp.w	r8, #0
     868:	da07      	bge.n	87a <CONFIG_ISR_STACK_SIZE+0x7a>
				conv->flag_dash = true;
     86a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
     86e:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
     872:	f042 0204 	orr.w	r2, r2, #4
     876:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
     87a:	075e      	lsls	r6, r3, #29
     87c:	f140 8127 	bpl.w	ace <CONFIG_ISR_STACK_SIZE+0x2ce>
			int arg = va_arg(ap, int);
     880:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     884:	f1ba 0f00 	cmp.w	sl, #0
     888:	f280 8126 	bge.w	ad8 <CONFIG_ISR_STACK_SIZE+0x2d8>
				conv->prec_present = false;
     88c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     890:	f36f 0341 	bfc	r3, #1, #1
     894:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     898:	f04f 3aff 	mov.w	sl, #4294967295
     89c:	e11c      	b.n	ad8 <CONFIG_ISR_STACK_SIZE+0x2d8>
		switch (*sp) {
     89e:	2a2d      	cmp	r2, #45	; 0x2d
     8a0:	d00d      	beq.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
     8a2:	2a30      	cmp	r2, #48	; 0x30
     8a4:	f47f af69 	bne.w	77a <z_cbvprintf_impl+0x66>
     8a8:	2301      	movs	r3, #1
	} while (loop);
     8aa:	e758      	b.n	75e <z_cbvprintf_impl+0x4a>
		switch (*sp) {
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	e755      	b.n	75e <z_cbvprintf_impl+0x4a>
     8b2:	f04f 0e01 	mov.w	lr, #1
     8b6:	e752      	b.n	75e <z_cbvprintf_impl+0x4a>
     8b8:	f04f 0801 	mov.w	r8, #1
     8bc:	e74f      	b.n	75e <z_cbvprintf_impl+0x4a>
     8be:	2601      	movs	r6, #1
     8c0:	e74d      	b.n	75e <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
     8c2:	4603      	mov	r3, r0
     8c4:	fb0e 6202 	mla	r2, lr, r2, r6
     8c8:	3a30      	subs	r2, #48	; 0x30
     8ca:	4618      	mov	r0, r3
     8cc:	f810 6b01 	ldrb.w	r6, [r0], #1
     8d0:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     8d4:	f1bc 0f09 	cmp.w	ip, #9
     8d8:	d9f3      	bls.n	8c2 <CONFIG_ISR_STACK_SIZE+0xc2>
	if (sp != wp) {
     8da:	4299      	cmp	r1, r3
     8dc:	d08f      	beq.n	7fe <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     8de:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     8e2:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     8e4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     8e6:	f362 0141 	bfi	r1, r2, #1, #1
     8ea:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     8ee:	e786      	b.n	7fe <z_cbvprintf_impl+0xea>
     8f0:	460b      	mov	r3, r1
	size_t val = 0;
     8f2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     8f4:	f04f 0e0a 	mov.w	lr, #10
     8f8:	e7e7      	b.n	8ca <CONFIG_ISR_STACK_SIZE+0xca>
		conv->prec_star = true;
     8fa:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     8fe:	3302      	adds	r3, #2
		conv->prec_star = true;
     900:	f042 0204 	orr.w	r2, r2, #4
     904:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
     908:	781a      	ldrb	r2, [r3, #0]
     90a:	2a6c      	cmp	r2, #108	; 0x6c
     90c:	d047      	beq.n	99e <CONFIG_ISR_STACK_SIZE+0x19e>
     90e:	d82b      	bhi.n	968 <CONFIG_ISR_STACK_SIZE+0x168>
     910:	2a68      	cmp	r2, #104	; 0x68
     912:	d031      	beq.n	978 <CONFIG_ISR_STACK_SIZE+0x178>
     914:	2a6a      	cmp	r2, #106	; 0x6a
     916:	d04b      	beq.n	9b0 <CONFIG_ISR_STACK_SIZE+0x1b0>
     918:	2a4c      	cmp	r2, #76	; 0x4c
     91a:	d051      	beq.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
	conv->specifier = *sp++;
     91c:	461a      	mov	r2, r3
     91e:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
     922:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
     924:	9203      	str	r2, [sp, #12]
     926:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
     92a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
     92e:	f200 80be 	bhi.w	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
     932:	2b6d      	cmp	r3, #109	; 0x6d
     934:	d851      	bhi.n	9da <CONFIG_ISR_STACK_SIZE+0x1da>
     936:	2b69      	cmp	r3, #105	; 0x69
     938:	f200 80b9 	bhi.w	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
     93c:	2b57      	cmp	r3, #87	; 0x57
     93e:	d867      	bhi.n	a10 <CONFIG_ISR_STACK_SIZE+0x210>
     940:	2b41      	cmp	r3, #65	; 0x41
     942:	d003      	beq.n	94c <CONFIG_ISR_STACK_SIZE+0x14c>
     944:	3b45      	subs	r3, #69	; 0x45
     946:	2b02      	cmp	r3, #2
     948:	f200 80b1 	bhi.w	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
		conv->specifier_cat = SPECIFIER_FP;
     94c:	2204      	movs	r2, #4
     94e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     952:	f362 0302 	bfi	r3, r2, #0, #3
     956:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
     95a:	2301      	movs	r3, #1
			break;
     95c:	e073      	b.n	a46 <CONFIG_ISR_STACK_SIZE+0x246>
		val = 10U * val + *sp++ - '0';
     95e:	fb0c 0202 	mla	r2, ip, r2, r0
     962:	460b      	mov	r3, r1
     964:	3a30      	subs	r2, #48	; 0x30
     966:	e75d      	b.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
	switch (*sp) {
     968:	2a74      	cmp	r2, #116	; 0x74
     96a:	d025      	beq.n	9b8 <CONFIG_ISR_STACK_SIZE+0x1b8>
     96c:	2a7a      	cmp	r2, #122	; 0x7a
     96e:	d1d5      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
		conv->length_mod = LENGTH_Z;
     970:	2106      	movs	r1, #6
     972:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     976:	e00c      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
		if (*++sp == 'h') {
     978:	785a      	ldrb	r2, [r3, #1]
     97a:	2a68      	cmp	r2, #104	; 0x68
     97c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     980:	d106      	bne.n	990 <CONFIG_ISR_STACK_SIZE+0x190>
			conv->length_mod = LENGTH_HH;
     982:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     984:	f361 02c6 	bfi	r2, r1, #3, #4
     988:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
     98c:	3302      	adds	r3, #2
     98e:	e7c5      	b.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
			conv->length_mod = LENGTH_H;
     990:	2102      	movs	r1, #2
     992:	f361 02c6 	bfi	r2, r1, #3, #4
     996:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
     99a:	3301      	adds	r3, #1
     99c:	e7be      	b.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
		if (*++sp == 'l') {
     99e:	785a      	ldrb	r2, [r3, #1]
     9a0:	2a6c      	cmp	r2, #108	; 0x6c
     9a2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     9a6:	d101      	bne.n	9ac <CONFIG_ISR_STACK_SIZE+0x1ac>
			conv->length_mod = LENGTH_LL;
     9a8:	2104      	movs	r1, #4
     9aa:	e7eb      	b.n	984 <CONFIG_ISR_STACK_SIZE+0x184>
			conv->length_mod = LENGTH_L;
     9ac:	2103      	movs	r1, #3
     9ae:	e7f0      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
		conv->length_mod = LENGTH_J;
     9b0:	2105      	movs	r1, #5
     9b2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     9b6:	e7ec      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
		conv->length_mod = LENGTH_T;
     9b8:	2107      	movs	r1, #7
     9ba:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     9be:	e7e8      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
		conv->unsupported = true;
     9c0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
     9c4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     9c8:	f022 0202 	bic.w	r2, r2, #2
     9cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     9d0:	f042 0202 	orr.w	r2, r2, #2
     9d4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
     9d8:	e7df      	b.n	99a <CONFIG_ISR_STACK_SIZE+0x19a>
	switch (conv->specifier) {
     9da:	3b6e      	subs	r3, #110	; 0x6e
     9dc:	b2d9      	uxtb	r1, r3
     9de:	2301      	movs	r3, #1
     9e0:	408b      	lsls	r3, r1
     9e2:	f240 4182 	movw	r1, #1154	; 0x482
     9e6:	420b      	tst	r3, r1
     9e8:	d137      	bne.n	a5a <CONFIG_ISR_STACK_SIZE+0x25a>
     9ea:	f013 0f24 	tst.w	r3, #36	; 0x24
     9ee:	d151      	bne.n	a94 <CONFIG_ISR_STACK_SIZE+0x294>
     9f0:	07d8      	lsls	r0, r3, #31
     9f2:	d55c      	bpl.n	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
		conv->specifier_cat = SPECIFIER_PTR;
     9f4:	2103      	movs	r1, #3
     9f6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     9fa:	f361 0302 	bfi	r3, r1, #0, #3
     9fe:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     a02:	f002 0378 	and.w	r3, r2, #120	; 0x78
     a06:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     a0a:	424b      	negs	r3, r1
     a0c:	414b      	adcs	r3, r1
     a0e:	e01a      	b.n	a46 <CONFIG_ISR_STACK_SIZE+0x246>
     a10:	2001      	movs	r0, #1
	switch (conv->specifier) {
     a12:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     a16:	b2c9      	uxtb	r1, r1
     a18:	fa00 f101 	lsl.w	r1, r0, r1
     a1c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     a20:	d194      	bne.n	94c <CONFIG_ISR_STACK_SIZE+0x14c>
     a22:	f640 0601 	movw	r6, #2049	; 0x801
     a26:	4231      	tst	r1, r6
     a28:	d11d      	bne.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
     a2a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     a2e:	d03e      	beq.n	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
		conv->specifier_cat = SPECIFIER_SINT;
     a30:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     a34:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     a38:	f002 0278 	and.w	r2, r2, #120	; 0x78
     a3c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     a3e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     a42:	d034      	beq.n	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
	bool unsupported = false;
     a44:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     a46:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     a4a:	f3c2 0140 	ubfx	r1, r2, #1, #1
     a4e:	430b      	orrs	r3, r1
     a50:	f363 0241 	bfi	r2, r3, #1, #1
     a54:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     a58:	e6fd      	b.n	856 <CONFIG_ISR_STACK_SIZE+0x56>
		conv->specifier_cat = SPECIFIER_UINT;
     a5a:	2102      	movs	r1, #2
     a5c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     a60:	f361 0302 	bfi	r3, r1, #0, #3
     a64:	e7e8      	b.n	a38 <CONFIG_ISR_STACK_SIZE+0x238>
     a66:	2002      	movs	r0, #2
     a68:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     a6c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     a70:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     a74:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     a76:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
     a7a:	bf02      	ittt	eq
     a7c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
     a80:	f041 0101 	orreq.w	r1, r1, #1
     a84:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
     a88:	2b63      	cmp	r3, #99	; 0x63
     a8a:	d1db      	bne.n	a44 <CONFIG_ISR_STACK_SIZE+0x244>
			unsupported = (conv->length_mod != LENGTH_NONE);
     a8c:	1e13      	subs	r3, r2, #0
     a8e:	bf18      	it	ne
     a90:	2301      	movne	r3, #1
     a92:	e7d8      	b.n	a46 <CONFIG_ISR_STACK_SIZE+0x246>
		conv->specifier_cat = SPECIFIER_PTR;
     a94:	2103      	movs	r1, #3
     a96:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     a9a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     a9e:	f361 0302 	bfi	r3, r1, #0, #3
     aa2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     aa6:	bf14      	ite	ne
     aa8:	2301      	movne	r3, #1
     aaa:	2300      	moveq	r3, #0
     aac:	e7cb      	b.n	a46 <CONFIG_ISR_STACK_SIZE+0x246>
		conv->invalid = true;
     aae:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     ab2:	f043 0301 	orr.w	r3, r3, #1
     ab6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
     aba:	e7c3      	b.n	a44 <CONFIG_ISR_STACK_SIZE+0x244>
		} else if (conv->width_present) {
     abc:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
     ac0:	2a00      	cmp	r2, #0
		int width = -1;
     ac2:	bfac      	ite	ge
     ac4:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
     ac8:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
     acc:	e6d5      	b.n	87a <CONFIG_ISR_STACK_SIZE+0x7a>
		} else if (conv->prec_present) {
     ace:	0798      	lsls	r0, r3, #30
     ad0:	f57f aee2 	bpl.w	898 <CONFIG_ISR_STACK_SIZE+0x98>
			precision = conv->prec_value;
     ad4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
     ad8:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     ada:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
     ade:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
     ae2:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
     ae6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     aea:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     aec:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     af0:	d133      	bne.n	b5a <CONFIG_ISR_STACK_SIZE+0x35a>
			switch (length_mod) {
     af2:	1ecb      	subs	r3, r1, #3
     af4:	2b04      	cmp	r3, #4
     af6:	d804      	bhi.n	b02 <CONFIG_ISR_STACK_SIZE+0x302>
     af8:	e8df f003 	tbb	[pc, r3]
     afc:	21464621 	.word	0x21464621
     b00:	21          	.byte	0x21
     b01:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     b02:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     b04:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     b06:	ea4f 72e3 	mov.w	r2, r3, asr #31
     b0a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     b0e:	d11c      	bne.n	b4a <CONFIG_ISR_STACK_SIZE+0x34a>
				value->sint = (signed char)value->sint;
     b10:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
     b14:	17da      	asrs	r2, r3, #31
     b16:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
     b1a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     b1c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     b20:	f013 0603 	ands.w	r6, r3, #3
     b24:	d050      	beq.n	bc8 <CONFIG_ISR_STACK_SIZE+0x3c8>
			OUTS(sp, fp);
     b26:	463a      	mov	r2, r7
     b28:	4659      	mov	r1, fp
     b2a:	4648      	mov	r0, r9
     b2c:	9b03      	ldr	r3, [sp, #12]
     b2e:	f003 ffb7 	bl	4aa0 <outs>
     b32:	2800      	cmp	r0, #0
     b34:	f2c0 8152 	blt.w	ddc <CONFIG_ISR_STACK_SIZE+0x5dc>
     b38:	4405      	add	r5, r0
			continue;
     b3a:	9f03      	ldr	r7, [sp, #12]
     b3c:	e5f2      	b.n	724 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     b3e:	f854 3b04 	ldr.w	r3, [r4], #4
     b42:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     b44:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
     b48:	e7e8      	b.n	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
			} else if (length_mod == LENGTH_H) {
     b4a:	2902      	cmp	r1, #2
     b4c:	d1e5      	bne.n	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
				value->sint = (short)value->sint;
     b4e:	b21a      	sxth	r2, r3
     b50:	f343 33c0 	sbfx	r3, r3, #15, #1
     b54:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     b58:	e7df      	b.n	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
		} else if (specifier_cat == SPECIFIER_UINT) {
     b5a:	2b02      	cmp	r3, #2
     b5c:	d124      	bne.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
			switch (length_mod) {
     b5e:	1ecb      	subs	r3, r1, #3
     b60:	2b04      	cmp	r3, #4
     b62:	d804      	bhi.n	b6e <CONFIG_ISR_STACK_SIZE+0x36e>
     b64:	e8df f003 	tbb	[pc, r3]
     b68:	18101018 	.word	0x18101018
     b6c:	18          	.byte	0x18
     b6d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     b6e:	2901      	cmp	r1, #1
     b70:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
     b74:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     b78:	d014      	beq.n	ba4 <CONFIG_ISR_STACK_SIZE+0x3a4>
			} else if (length_mod == LENGTH_H) {
     b7a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     b7c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
     b80:	d1cc      	bne.n	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
				value->uint = (unsigned short)value->uint;
     b82:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     b84:	930e      	str	r3, [sp, #56]	; 0x38
     b86:	e7c9      	b.n	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
					(uint_value_type)va_arg(ap,
     b88:	3407      	adds	r4, #7
     b8a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     b8e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     b92:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     b96:	e7c1      	b.n	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
					(uint_value_type)va_arg(ap, size_t);
     b98:	f854 3b04 	ldr.w	r3, [r4], #4
     b9c:	930e      	str	r3, [sp, #56]	; 0x38
     b9e:	2300      	movs	r3, #0
     ba0:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
     ba2:	e7bb      	b.n	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
				value->uint = (unsigned char)value->uint;
     ba4:	b2db      	uxtb	r3, r3
     ba6:	e7cd      	b.n	b44 <CONFIG_ISR_STACK_SIZE+0x344>
		} else if (specifier_cat == SPECIFIER_FP) {
     ba8:	2b04      	cmp	r3, #4
     baa:	d108      	bne.n	bbe <CONFIG_ISR_STACK_SIZE+0x3be>
					(sint_value_type)va_arg(ap, long long);
     bac:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     bae:	f024 0407 	bic.w	r4, r4, #7
     bb2:	e9d4 2300 	ldrd	r2, r3, [r4]
     bb6:	3408      	adds	r4, #8
     bb8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     bbc:	e7ae      	b.n	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
		} else if (specifier_cat == SPECIFIER_PTR) {
     bbe:	2b03      	cmp	r3, #3
     bc0:	d1ac      	bne.n	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
			value->ptr = va_arg(ap, void *);
     bc2:	f854 3b04 	ldr.w	r3, [r4], #4
     bc6:	e7dd      	b.n	b84 <CONFIG_ISR_STACK_SIZE+0x384>
		switch (conv->specifier) {
     bc8:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     bcc:	2878      	cmp	r0, #120	; 0x78
     bce:	d8b4      	bhi.n	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
     bd0:	2862      	cmp	r0, #98	; 0x62
     bd2:	d81c      	bhi.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
     bd4:	2825      	cmp	r0, #37	; 0x25
     bd6:	f43f adad 	beq.w	734 <z_cbvprintf_impl+0x20>
     bda:	2858      	cmp	r0, #88	; 0x58
     bdc:	d1ad      	bne.n	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
			bps = encode_uint(value->uint, conv, buf, bpe);
     bde:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     be2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     be6:	9300      	str	r3, [sp, #0]
     be8:	aa10      	add	r2, sp, #64	; 0x40
     bea:	ab08      	add	r3, sp, #32
     bec:	f003 ff12 	bl	4a14 <encode_uint>
			if (precision >= 0) {
     bf0:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
     bf4:	4607      	mov	r7, r0
			if (precision >= 0) {
     bf6:	f280 8099 	bge.w	d2c <CONFIG_ISR_STACK_SIZE+0x52c>
		if (bps == NULL) {
     bfa:	2f00      	cmp	r7, #0
     bfc:	d09d      	beq.n	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
		size_t nj_len = (bpe - bps);
     bfe:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     c02:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
     c04:	2e00      	cmp	r6, #0
     c06:	f000 80c0 	beq.w	d8a <CONFIG_ISR_STACK_SIZE+0x58a>
			nj_len += 1U;
     c0a:	3001      	adds	r0, #1
     c0c:	e0bd      	b.n	d8a <CONFIG_ISR_STACK_SIZE+0x58a>
		switch (conv->specifier) {
     c0e:	3863      	subs	r0, #99	; 0x63
     c10:	2815      	cmp	r0, #21
     c12:	d892      	bhi.n	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
     c14:	a201      	add	r2, pc, #4	; (adr r2, c1c <CONFIG_ISR_STACK_SIZE+0x41c>)
     c16:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     c1a:	bf00      	nop
     c1c:	00000cf1 	.word	0x00000cf1
     c20:	00000d03 	.word	0x00000d03
     c24:	00000b3b 	.word	0x00000b3b
     c28:	00000b3b 	.word	0x00000b3b
     c2c:	00000b3b 	.word	0x00000b3b
     c30:	00000b3b 	.word	0x00000b3b
     c34:	00000d03 	.word	0x00000d03
     c38:	00000b3b 	.word	0x00000b3b
     c3c:	00000b3b 	.word	0x00000b3b
     c40:	00000b3b 	.word	0x00000b3b
     c44:	00000b3b 	.word	0x00000b3b
     c48:	00000d8f 	.word	0x00000d8f
     c4c:	00000d27 	.word	0x00000d27
     c50:	00000d4d 	.word	0x00000d4d
     c54:	00000b3b 	.word	0x00000b3b
     c58:	00000b3b 	.word	0x00000b3b
     c5c:	00000c75 	.word	0x00000c75
     c60:	00000b3b 	.word	0x00000b3b
     c64:	00000d27 	.word	0x00000d27
     c68:	00000b3b 	.word	0x00000b3b
     c6c:	00000b3b 	.word	0x00000b3b
     c70:	00000d27 	.word	0x00000d27
			if (precision >= 0) {
     c74:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
     c78:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
     c7a:	db35      	blt.n	ce8 <CONFIG_ISR_STACK_SIZE+0x4e8>
				len = strnlen(bps, precision);
     c7c:	4651      	mov	r1, sl
     c7e:	4638      	mov	r0, r7
     c80:	f003 ff72 	bl	4b68 <strnlen>
			bpe = bps + len;
     c84:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
     c88:	2f00      	cmp	r7, #0
     c8a:	f43f af56 	beq.w	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
		char sign = 0;
     c8e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
     c90:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     c94:	f013 0210 	ands.w	r2, r3, #16
     c98:	9205      	str	r2, [sp, #20]
     c9a:	f000 8092 	beq.w	dc2 <CONFIG_ISR_STACK_SIZE+0x5c2>
			nj_len += 2U;
     c9e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     ca0:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
     ca2:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
     ca4:	bf48      	it	mi
     ca6:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
     ca8:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
     caa:	bf48      	it	mi
     cac:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
     cae:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
     cb2:	9204      	str	r2, [sp, #16]
		if (width > 0) {
     cb4:	f340 809f 	ble.w	df6 <CONFIG_ISR_STACK_SIZE+0x5f6>
			if (!conv->flag_dash) {
     cb8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
     cbc:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
     cc0:	f3c2 0380 	ubfx	r3, r2, #2, #1
     cc4:	0750      	lsls	r0, r2, #29
     cc6:	9306      	str	r3, [sp, #24]
     cc8:	f100 8095 	bmi.w	df6 <CONFIG_ISR_STACK_SIZE+0x5f6>
				if (conv->flag_zero) {
     ccc:	0651      	lsls	r1, r2, #25
     cce:	f140 8088 	bpl.w	de2 <CONFIG_ISR_STACK_SIZE+0x5e2>
					if (sign != 0) {
     cd2:	b13e      	cbz	r6, ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>
						OUTC(sign);
     cd4:	4659      	mov	r1, fp
     cd6:	4630      	mov	r0, r6
     cd8:	47c8      	blx	r9
     cda:	2800      	cmp	r0, #0
     cdc:	db7e      	blt.n	ddc <CONFIG_ISR_STACK_SIZE+0x5dc>
     cde:	9b06      	ldr	r3, [sp, #24]
     ce0:	3501      	adds	r5, #1
     ce2:	461e      	mov	r6, r3
					pad = '0';
     ce4:	2230      	movs	r2, #48	; 0x30
     ce6:	e07d      	b.n	de4 <CONFIG_ISR_STACK_SIZE+0x5e4>
				len = strlen(bps);
     ce8:	4638      	mov	r0, r7
     cea:	f003 ff36 	bl	4b5a <strlen>
     cee:	e7c9      	b.n	c84 <CONFIG_ISR_STACK_SIZE+0x484>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
     cf2:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
     cf4:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     cf6:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
     cfa:	af08      	add	r7, sp, #32
			bpe = buf + 1;
     cfc:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
     d00:	e7c6      	b.n	c90 <CONFIG_ISR_STACK_SIZE+0x490>
			if (conv->flag_plus) {
     d02:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
     d04:	bf5a      	itte	pl
     d06:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
     d0a:	015e      	lslpl	r6, r3, #5
				sign = '+';
     d0c:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
     d0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
     d12:	2b00      	cmp	r3, #0
     d14:	f6bf af63 	bge.w	bde <CONFIG_ISR_STACK_SIZE+0x3de>
				value->uint = (uint_value_type)-sint;
     d18:	4252      	negs	r2, r2
     d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     d1e:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     d20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     d24:	e75b      	b.n	bde <CONFIG_ISR_STACK_SIZE+0x3de>
		switch (conv->specifier) {
     d26:	2600      	movs	r6, #0
     d28:	e759      	b.n	bde <CONFIG_ISR_STACK_SIZE+0x3de>
		char sign = 0;
     d2a:	2600      	movs	r6, #0
				conv->flag_zero = false;
     d2c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
     d30:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     d34:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
     d36:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     d3a:	459a      	cmp	sl, r3
				conv->flag_zero = false;
     d3c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
     d40:	f67f af5b 	bls.w	bfa <CONFIG_ISR_STACK_SIZE+0x3fa>
					conv->pad0_value = precision - (int)len;
     d44:	ebaa 0303 	sub.w	r3, sl, r3
     d48:	9311      	str	r3, [sp, #68]	; 0x44
     d4a:	e756      	b.n	bfa <CONFIG_ISR_STACK_SIZE+0x3fa>
			if (value->ptr != NULL) {
     d4c:	980e      	ldr	r0, [sp, #56]	; 0x38
     d4e:	b390      	cbz	r0, db6 <CONFIG_ISR_STACK_SIZE+0x5b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d50:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     d54:	9300      	str	r3, [sp, #0]
     d56:	2100      	movs	r1, #0
     d58:	ab08      	add	r3, sp, #32
     d5a:	aa10      	add	r2, sp, #64	; 0x40
     d5c:	f003 fe5a 	bl	4a14 <encode_uint>
				conv->altform_0c = true;
     d60:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     d64:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
     d68:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     d6c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     d70:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d74:	4607      	mov	r7, r0
				conv->altform_0c = true;
     d76:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     d7a:	dad6      	bge.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
		if (bps == NULL) {
     d7c:	2800      	cmp	r0, #0
     d7e:	f43f aedc 	beq.w	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
		char sign = 0;
     d82:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
     d84:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     d88:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
     d8a:	469a      	mov	sl, r3
     d8c:	e780      	b.n	c90 <CONFIG_ISR_STACK_SIZE+0x490>
				store_count(conv, value->ptr, count);
     d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
     d90:	2907      	cmp	r1, #7
     d92:	f63f aed2 	bhi.w	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
     d96:	e8df f001 	tbb	[pc, r1]
     d9a:	040c      	.short	0x040c
     d9c:	08080c06 	.word	0x08080c06
     da0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     da2:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
     da4:	e6c9      	b.n	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
		*(short *)dp = (short)count;
     da6:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
     da8:	e6c7      	b.n	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
		*(intmax_t *)dp = (intmax_t)count;
     daa:	17ea      	asrs	r2, r5, #31
     dac:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
     db0:	e6c3      	b.n	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     db2:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
     db4:	e6c1      	b.n	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
     db6:	4f2f      	ldr	r7, [pc, #188]	; (e74 <CONFIG_ISR_STACK_SIZE+0x674>)
		char sign = 0;
     db8:	4606      	mov	r6, r0
			bpe = bps + 5;
     dba:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
     dbe:	2005      	movs	r0, #5
     dc0:	e766      	b.n	c90 <CONFIG_ISR_STACK_SIZE+0x490>
		} else if (conv->altform_0) {
     dc2:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     dc4:	bf48      	it	mi
     dc6:	3001      	addmi	r0, #1
     dc8:	e76a      	b.n	ca0 <CONFIG_ISR_STACK_SIZE+0x4a0>
					OUTC(pad);
     dca:	4610      	mov	r0, r2
     dcc:	9307      	str	r3, [sp, #28]
     dce:	9206      	str	r2, [sp, #24]
     dd0:	4659      	mov	r1, fp
     dd2:	47c8      	blx	r9
     dd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     dd8:	2800      	cmp	r0, #0
     dda:	da04      	bge.n	de6 <CONFIG_ISR_STACK_SIZE+0x5e6>
#undef OUTS
#undef OUTC
}
     ddc:	b015      	add	sp, #84	; 0x54
     dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     de2:	2220      	movs	r2, #32
					pad = '0';
     de4:	4643      	mov	r3, r8
				while (width-- > 0) {
     de6:	4619      	mov	r1, r3
     de8:	2900      	cmp	r1, #0
     dea:	f103 33ff 	add.w	r3, r3, #4294967295
     dee:	dcec      	bgt.n	dca <CONFIG_ISR_STACK_SIZE+0x5ca>
     df0:	4445      	add	r5, r8
     df2:	4698      	mov	r8, r3
     df4:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
     df6:	b12e      	cbz	r6, e04 <CONFIG_ISR_STACK_SIZE+0x604>
			OUTC(sign);
     df8:	4659      	mov	r1, fp
     dfa:	4630      	mov	r0, r6
     dfc:	47c8      	blx	r9
     dfe:	2800      	cmp	r0, #0
     e00:	dbec      	blt.n	ddc <CONFIG_ISR_STACK_SIZE+0x5dc>
     e02:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     e04:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     e08:	06da      	lsls	r2, r3, #27
     e0a:	d401      	bmi.n	e10 <CONFIG_ISR_STACK_SIZE+0x610>
     e0c:	071b      	lsls	r3, r3, #28
     e0e:	d505      	bpl.n	e1c <CONFIG_ISR_STACK_SIZE+0x61c>
				OUTC('0');
     e10:	4659      	mov	r1, fp
     e12:	2030      	movs	r0, #48	; 0x30
     e14:	47c8      	blx	r9
     e16:	2800      	cmp	r0, #0
     e18:	dbe0      	blt.n	ddc <CONFIG_ISR_STACK_SIZE+0x5dc>
     e1a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     e1c:	9b05      	ldr	r3, [sp, #20]
     e1e:	b133      	cbz	r3, e2e <CONFIG_ISR_STACK_SIZE+0x62e>
				OUTC(conv->specifier);
     e20:	4659      	mov	r1, fp
     e22:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     e26:	47c8      	blx	r9
     e28:	2800      	cmp	r0, #0
     e2a:	dbd7      	blt.n	ddc <CONFIG_ISR_STACK_SIZE+0x5dc>
     e2c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     e2e:	9e04      	ldr	r6, [sp, #16]
     e30:	442e      	add	r6, r5
     e32:	e005      	b.n	e40 <CONFIG_ISR_STACK_SIZE+0x640>
				OUTC('0');
     e34:	4659      	mov	r1, fp
     e36:	2030      	movs	r0, #48	; 0x30
     e38:	47c8      	blx	r9
     e3a:	2800      	cmp	r0, #0
     e3c:	dbce      	blt.n	ddc <CONFIG_ISR_STACK_SIZE+0x5dc>
     e3e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     e40:	1b73      	subs	r3, r6, r5
     e42:	2b00      	cmp	r3, #0
     e44:	dcf6      	bgt.n	e34 <CONFIG_ISR_STACK_SIZE+0x634>
			OUTS(bps, bpe);
     e46:	4653      	mov	r3, sl
     e48:	463a      	mov	r2, r7
     e4a:	4659      	mov	r1, fp
     e4c:	4648      	mov	r0, r9
     e4e:	f003 fe27 	bl	4aa0 <outs>
     e52:	2800      	cmp	r0, #0
     e54:	dbc2      	blt.n	ddc <CONFIG_ISR_STACK_SIZE+0x5dc>
     e56:	4405      	add	r5, r0
		while (width > 0) {
     e58:	44a8      	add	r8, r5
     e5a:	eba8 0305 	sub.w	r3, r8, r5
     e5e:	2b00      	cmp	r3, #0
     e60:	f77f ae6b 	ble.w	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
			OUTC(' ');
     e64:	4659      	mov	r1, fp
     e66:	2020      	movs	r0, #32
     e68:	47c8      	blx	r9
     e6a:	2800      	cmp	r0, #0
     e6c:	dbb6      	blt.n	ddc <CONFIG_ISR_STACK_SIZE+0x5dc>
     e6e:	3501      	adds	r5, #1
			--width;
     e70:	e7f3      	b.n	e5a <CONFIG_ISR_STACK_SIZE+0x65a>
     e72:	bf00      	nop
     e74:	00005aa4 	.word	0x00005aa4

00000e78 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     e78:	4604      	mov	r4, r0
     e7a:	b508      	push	{r3, lr}
	__asm__ volatile(
     e7c:	f04f 0220 	mov.w	r2, #32
     e80:	f3ef 8311 	mrs	r3, BASEPRI
     e84:	f382 8812 	msr	BASEPRI_MAX, r2
     e88:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
     e8c:	f001 feae 	bl	2bec <sys_clock_disable>
	}

	sys_arch_reboot(type);
     e90:	4620      	mov	r0, r4
     e92:	f000 fd83 	bl	199c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     e96:	4803      	ldr	r0, [pc, #12]	; (ea4 <sys_reboot+0x2c>)
     e98:	f003 fccc 	bl	4834 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     e9c:	f000 fac0 	bl	1420 <arch_cpu_idle>
     ea0:	e7fc      	b.n	e9c <sys_reboot+0x24>
     ea2:	bf00      	nop
     ea4:	00005aaa 	.word	0x00005aaa

00000ea8 <nrf_gpio_pin_control_select.constprop.0>:

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     ea8:	4b05      	ldr	r3, [pc, #20]	; (ec0 <nrf_gpio_pin_control_select.constprop.0+0x18>)
     eaa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     eae:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
     eb2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     eb6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     eba:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
     ebe:	4770      	bx	lr
     ec0:	50842500 	.word	0x50842500

00000ec4 <nordicsemi_nrf53_init>:
	return ok_to_sleep;
}
#endif /* CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND */

static int nordicsemi_nrf53_init(void)
{
     ec4:	b510      	push	{r4, lr}
     ec6:	f04f 0320 	mov.w	r3, #32
     eca:	f3ef 8411 	mrs	r4, BASEPRI
     ece:	f383 8812 	msr	BASEPRI_MAX, r3
     ed2:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     ed6:	2201      	movs	r2, #1
     ed8:	4b0c      	ldr	r3, [pc, #48]	; (f0c <nordicsemi_nrf53_init+0x48>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     eda:	490d      	ldr	r1, [pc, #52]	; (f10 <nordicsemi_nrf53_init+0x4c>)
     edc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     ee0:	2302      	movs	r3, #2
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
     ee2:	2000      	movs	r0, #0
     ee4:	f8c1 36d0 	str.w	r3, [r1, #1744]	; 0x6d0
     ee8:	f7ff ffde 	bl	ea8 <nrf_gpio_pin_control_select.constprop.0>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
     eec:	4610      	mov	r0, r2
     eee:	f7ff ffdb 	bl	ea8 <nrf_gpio_pin_control_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
     ef2:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
     ef6:	f8c1 2904 	str.w	r2, [r1, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
     efa:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
	__asm__ volatile(
     efe:	f384 8811 	msr	BASEPRI, r4
     f02:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     f06:	2000      	movs	r0, #0
     f08:	bd10      	pop	{r4, pc}
     f0a:	bf00      	nop
     f0c:	50001000 	.word	0x50001000
     f10:	50004000 	.word	0x50004000

00000f14 <z_arm_on_enter_cpu_idle>:
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
     f14:	2305      	movs	r3, #5
{
     f16:	b570      	push	{r4, r5, r6, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
     f18:	4d14      	ldr	r5, [pc, #80]	; (f6c <z_arm_on_enter_cpu_idle+0x58>)
     f1a:	4e15      	ldr	r6, [pc, #84]	; (f70 <z_arm_on_enter_cpu_idle+0x5c>)
     f1c:	782c      	ldrb	r4, [r5, #0]
     f1e:	3401      	adds	r4, #1
     f20:	fbb4 f3f3 	udiv	r3, r4, r3
     f24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     f28:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
     f2a:	f003 ffb3 	bl	4e94 <sys_clock_cycle_get_32>
	if (timestamps_filled &&
     f2e:	4a11      	ldr	r2, [pc, #68]	; (f74 <z_arm_on_enter_cpu_idle+0x60>)
     f30:	7813      	ldrb	r3, [r2, #0]
     f32:	b123      	cbz	r3, f3e <z_arm_on_enter_cpu_idle+0x2a>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
     f34:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
     f38:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
     f3a:	2807      	cmp	r0, #7
     f3c:	d914      	bls.n	f68 <z_arm_on_enter_cpu_idle+0x54>
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
     f3e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     f42:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
     f46:	b141      	cbz	r1, f5a <z_arm_on_enter_cpu_idle+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     f48:	2100      	movs	r1, #0
     f4a:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
     f4e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
     f52:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
     f54:	b90c      	cbnz	r4, f5a <z_arm_on_enter_cpu_idle+0x46>
			timestamps_filled = true;
     f56:	2301      	movs	r3, #1
     f58:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
     f5a:	782c      	ldrb	r4, [r5, #0]
     f5c:	f003 ff9a 	bl	4e94 <sys_clock_cycle_get_32>
     f60:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	return true;
     f64:	2001      	movs	r0, #1
}
     f66:	bd70      	pop	{r4, r5, r6, pc}
		return false;
     f68:	2000      	movs	r0, #0
     f6a:	e7fc      	b.n	f66 <z_arm_on_enter_cpu_idle+0x52>
     f6c:	20000b29 	.word	0x20000b29
     f70:	200002d0 	.word	0x200002d0
     f74:	20000b28 	.word	0x20000b28

00000f78 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     f78:	b148      	cbz	r0, f8e <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     f7a:	4b05      	ldr	r3, [pc, #20]	; (f90 <arch_busy_wait+0x18>)
     f7c:	4a05      	ldr	r2, [pc, #20]	; (f94 <arch_busy_wait+0x1c>)
     f7e:	681b      	ldr	r3, [r3, #0]
     f80:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
     f84:	4358      	muls	r0, r3
     f86:	4b04      	ldr	r3, [pc, #16]	; (f98 <arch_busy_wait+0x20>)
     f88:	f043 0301 	orr.w	r3, r3, #1
     f8c:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     f8e:	4770      	bx	lr
     f90:	20000048 	.word	0x20000048
     f94:	000f4240 	.word	0x000f4240
     f98:	00005800 	.word	0x00005800

00000f9c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
     f9c:	2806      	cmp	r0, #6
     f9e:	d107      	bne.n	fb0 <pm_state_set+0x14>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
     fa0:	2201      	movs	r2, #1
     fa2:	4b04      	ldr	r3, [pc, #16]	; (fb4 <pm_state_set+0x18>)
     fa4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     fa8:	f3bf 8f4f 	dsb	sy
        __WFE();
     fac:	bf20      	wfe
    while (true)
     fae:	e7fd      	b.n	fac <pm_state_set+0x10>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
     fb0:	4770      	bx	lr
     fb2:	bf00      	nop
     fb4:	50004000 	.word	0x50004000

00000fb8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     fb8:	f001 be42 	b.w	2c40 <SystemInit>

00000fbc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     fc0:	4605      	mov	r5, r0
	__asm__ volatile(
     fc2:	f04f 0320 	mov.w	r3, #32
     fc6:	f3ef 8611 	mrs	r6, BASEPRI
     fca:	f383 8812 	msr	BASEPRI_MAX, r3
     fce:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
     fd2:	f04f 090c 	mov.w	r9, #12
	return list->head;
     fd6:	4b0d      	ldr	r3, [pc, #52]	; (100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>)
     fd8:	4f0d      	ldr	r7, [pc, #52]	; (1010 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x10>)
     fda:	681c      	ldr	r4, [r3, #0]
     fdc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     fe0:	b92c      	cbnz	r4, fee <pm_state_notify+0x32>
	__asm__ volatile(
     fe2:	f386 8811 	msr	BASEPRI, r6
     fe6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
     fee:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
     ff2:	2d00      	cmp	r5, #0
     ff4:	bf18      	it	ne
     ff6:	4613      	movne	r3, r2
		if (callback) {
     ff8:	b12b      	cbz	r3, 1006 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x6>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     ffa:	f898 2010 	ldrb.w	r2, [r8, #16]
     ffe:	fb09 f202 	mul.w	r2, r9, r2
    1002:	5cb8      	ldrb	r0, [r7, r2]
    1004:	4798      	blx	r3
	return node->next;
    1006:	6824      	ldr	r4, [r4, #0]
    1008:	e7ea      	b.n	fe0 <pm_state_notify+0x24>
    100a:	bf00      	nop
    100c:	200002fc 	.word	0x200002fc
    1010:	200002f0 	.word	0x200002f0
    1014:	2000091c 	.word	0x2000091c

00001018 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1018:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    101a:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    101c:	4b16      	ldr	r3, [pc, #88]	; (1078 <pm_system_resume+0x60>)
    101e:	7c1c      	ldrb	r4, [r3, #16]
    1020:	f004 031f 	and.w	r3, r4, #31
    1024:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1026:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1028:	4b14      	ldr	r3, [pc, #80]	; (107c <pm_system_resume+0x64>)
    102a:	0961      	lsrs	r1, r4, #5
    102c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1030:	e8d3 1fef 	ldaex	r1, [r3]
    1034:	ea01 0500 	and.w	r5, r1, r0
    1038:	e8c3 5fe6 	stlex	r6, r5, [r3]
    103c:	2e00      	cmp	r6, #0
    103e:	d1f7      	bne.n	1030 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1040:	420a      	tst	r2, r1
    1042:	d013      	beq.n	106c <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    1044:	4b0e      	ldr	r3, [pc, #56]	; (1080 <pm_system_resume+0x68>)
    1046:	4d0f      	ldr	r5, [pc, #60]	; (1084 <pm_system_resume+0x6c>)
    1048:	b18b      	cbz	r3, 106e <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    104a:	230c      	movs	r3, #12
    104c:	4363      	muls	r3, r4
    104e:	18ea      	adds	r2, r5, r3
    1050:	7851      	ldrb	r1, [r2, #1]
    1052:	5ce8      	ldrb	r0, [r5, r3]
    1054:	f003 fd3c 	bl	4ad0 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1058:	2000      	movs	r0, #0
    105a:	f7ff ffaf 	bl	fbc <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    105e:	230c      	movs	r3, #12
    1060:	435c      	muls	r4, r3
    1062:	2300      	movs	r3, #0
    1064:	192a      	adds	r2, r5, r4
    1066:	512b      	str	r3, [r5, r4]
    1068:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    106c:	bd70      	pop	{r4, r5, r6, pc}
    106e:	f383 8811 	msr	BASEPRI, r3
    1072:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1076:	e7ef      	b.n	1058 <pm_system_resume+0x40>
    1078:	2000091c 	.word	0x2000091c
    107c:	20000304 	.word	0x20000304
    1080:	00004ad1 	.word	0x00004ad1
    1084:	200002f0 	.word	0x200002f0

00001088 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    1088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    108c:	4b32      	ldr	r3, [pc, #200]	; (1158 <pm_system_suspend+0xd0>)
{
    108e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    1090:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    1092:	f04f 0320 	mov.w	r3, #32
    1096:	f3ef 8811 	mrs	r8, BASEPRI
    109a:	f383 8812 	msr	BASEPRI_MAX, r3
    109e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    10a2:	240c      	movs	r4, #12
    10a4:	436c      	muls	r4, r5
    10a6:	4b2d      	ldr	r3, [pc, #180]	; (115c <pm_system_suspend+0xd4>)
    10a8:	4e2d      	ldr	r6, [pc, #180]	; (1160 <pm_system_suspend+0xd8>)
    10aa:	5d19      	ldrb	r1, [r3, r4]
    10ac:	191a      	adds	r2, r3, r4
    10ae:	2900      	cmp	r1, #0
    10b0:	d047      	beq.n	1142 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    10b2:	ca07      	ldmia	r2, {r0, r1, r2}
    10b4:	eb06 0c04 	add.w	ip, r6, r4
    10b8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    10bc:	2200      	movs	r2, #0
    10be:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    10c0:	f388 8811 	msr	BASEPRI, r8
    10c4:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    10c8:	230c      	movs	r3, #12
    10ca:	436b      	muls	r3, r5
    10cc:	5cf0      	ldrb	r0, [r6, r3]
    10ce:	18f2      	adds	r2, r6, r3
    10d0:	b3a8      	cbz	r0, 113e <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    10d2:	1c7b      	adds	r3, r7, #1
    10d4:	d010      	beq.n	10f8 <pm_system_suspend+0x70>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    10d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    10da:	2100      	movs	r1, #0
    10dc:	f8d2 c008 	ldr.w	ip, [r2, #8]
    10e0:	4c20      	ldr	r4, [pc, #128]	; (1164 <pm_system_suspend+0xdc>)
    10e2:	2300      	movs	r3, #0
    10e4:	fbec 4100 	umlal	r4, r1, ip, r0
    10e8:	4a1f      	ldr	r2, [pc, #124]	; (1168 <pm_system_suspend+0xe0>)
    10ea:	4620      	mov	r0, r4
    10ec:	f7ff f832 	bl	154 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    10f0:	2101      	movs	r1, #1
    10f2:	1a38      	subs	r0, r7, r0
    10f4:	f001 fd3e 	bl	2b74 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    10f8:	f002 ff6e 	bl	3fd8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    10fc:	2001      	movs	r0, #1
    10fe:	f7ff ff5d 	bl	fbc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1102:	4b1a      	ldr	r3, [pc, #104]	; (116c <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1104:	096a      	lsrs	r2, r5, #5
    1106:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    110a:	2201      	movs	r2, #1
    110c:	f005 011f 	and.w	r1, r5, #31
    1110:	408a      	lsls	r2, r1
    1112:	e8d3 0fef 	ldaex	r0, [r3]
    1116:	4310      	orrs	r0, r2
    1118:	e8c3 0fe1 	stlex	r1, r0, [r3]
    111c:	2900      	cmp	r1, #0
    111e:	d1f8      	bne.n	1112 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    1120:	4b13      	ldr	r3, [pc, #76]	; (1170 <pm_system_suspend+0xe8>)
    1122:	b13b      	cbz	r3, 1134 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    1124:	230c      	movs	r3, #12
    1126:	fb03 f005 	mul.w	r0, r3, r5
    112a:	1833      	adds	r3, r6, r0
    112c:	7859      	ldrb	r1, [r3, #1]
    112e:	5c30      	ldrb	r0, [r6, r0]
    1130:	f7ff ff34 	bl	f9c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1134:	f7ff ff70 	bl	1018 <pm_system_resume>
	k_sched_unlock();
    1138:	f002 ff62 	bl	4000 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    113c:	2001      	movs	r0, #1
}
    113e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    1142:	4601      	mov	r1, r0
    1144:	4628      	mov	r0, r5
    1146:	f000 f815 	bl	1174 <pm_policy_next_state>
		if (info != NULL) {
    114a:	2800      	cmp	r0, #0
    114c:	d0b8      	beq.n	10c0 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    114e:	c807      	ldmia	r0, {r0, r1, r2}
    1150:	4434      	add	r4, r6
    1152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    1156:	e7b3      	b.n	10c0 <pm_system_suspend+0x38>
    1158:	2000091c 	.word	0x2000091c
    115c:	200002e4 	.word	0x200002e4
    1160:	200002f0 	.word	0x200002f0
    1164:	000f423f 	.word	0x000f423f
    1168:	000f4240 	.word	0x000f4240
    116c:	20000304 	.word	0x20000304
    1170:	00000f9d 	.word	0x00000f9d

00001174 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    1174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1178:	b085      	sub	sp, #20
    117a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    117c:	a903      	add	r1, sp, #12
    117e:	f000 f843 	bl	1208 <pm_state_cpu_get_all>
    1182:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    1186:	4604      	mov	r4, r0
    1188:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    118c:	4b1b      	ldr	r3, [pc, #108]	; (11fc <pm_policy_next_state+0x88>)
    118e:	9d03      	ldr	r5, [sp, #12]
    1190:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1194:	1e43      	subs	r3, r0, #1
    1196:	b21b      	sxth	r3, r3
    1198:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    119c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1200 <pm_policy_next_state+0x8c>
    11a0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    11a4:	b924      	cbnz	r4, 11b0 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    11a6:	46a1      	mov	r9, r4
}
    11a8:	4648      	mov	r0, r9
    11aa:	b005      	add	sp, #20
    11ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11b0:	46c4      	mov	ip, r8
    11b2:	4659      	mov	r1, fp
    11b4:	6868      	ldr	r0, [r5, #4]
    11b6:	2300      	movs	r3, #0
    11b8:	fbe0 c107 	umlal	ip, r1, r0, r7
    11bc:	4a11      	ldr	r2, [pc, #68]	; (1204 <pm_policy_next_state+0x90>)
    11be:	4660      	mov	r0, ip
    11c0:	f7fe ffc8 	bl	154 <__aeabi_uldivmod>
    11c4:	46c4      	mov	ip, r8
    11c6:	4659      	mov	r1, fp
    11c8:	9001      	str	r0, [sp, #4]
    11ca:	68a8      	ldr	r0, [r5, #8]
    11cc:	2300      	movs	r3, #0
    11ce:	fbe0 c107 	umlal	ip, r1, r0, r7
    11d2:	4a0c      	ldr	r2, [pc, #48]	; (1204 <pm_policy_next_state+0x90>)
    11d4:	4660      	mov	r0, ip
    11d6:	f7fe ffbd 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    11da:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    11de:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    11e0:	d001      	beq.n	11e6 <pm_policy_next_state+0x72>
    11e2:	4582      	cmp	sl, r0
    11e4:	d905      	bls.n	11f2 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    11e6:	1c73      	adds	r3, r6, #1
    11e8:	d0de      	beq.n	11a8 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    11ea:	9b01      	ldr	r3, [sp, #4]
    11ec:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    11ee:	42b0      	cmp	r0, r6
    11f0:	d9da      	bls.n	11a8 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    11f2:	3c01      	subs	r4, #1
    11f4:	b2a4      	uxth	r4, r4
    11f6:	3d0c      	subs	r5, #12
    11f8:	e7d4      	b.n	11a4 <pm_policy_next_state+0x30>
    11fa:	bf00      	nop
    11fc:	20000004 	.word	0x20000004
    1200:	000f423f 	.word	0x000f423f
    1204:	000f4240 	.word	0x000f4240

00001208 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1208:	b908      	cbnz	r0, 120e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    120a:	4b02      	ldr	r3, [pc, #8]	; (1214 <pm_state_cpu_get_all+0xc>)
    120c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    120e:	2000      	movs	r0, #0
    1210:	4770      	bx	lr
    1212:	bf00      	nop
    1214:	00005808 	.word	0x00005808

00001218 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1218:	4801      	ldr	r0, [pc, #4]	; (1220 <nrf_cc3xx_platform_abort_init+0x8>)
    121a:	f003 b9c7 	b.w	45ac <nrf_cc3xx_platform_set_abort>
    121e:	bf00      	nop
    1220:	00005808 	.word	0x00005808

00001224 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1224:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    1226:	4604      	mov	r4, r0
    1228:	b918      	cbnz	r0, 1232 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    122a:	4b0f      	ldr	r3, [pc, #60]	; (1268 <mutex_free_platform+0x44>)
    122c:	480f      	ldr	r0, [pc, #60]	; (126c <mutex_free_platform+0x48>)
    122e:	685b      	ldr	r3, [r3, #4]
    1230:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1232:	6861      	ldr	r1, [r4, #4]
    1234:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    1238:	d00f      	beq.n	125a <mutex_free_platform+0x36>
    123a:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    123e:	d00c      	beq.n	125a <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1240:	4d0b      	ldr	r5, [pc, #44]	; (1270 <mutex_free_platform+0x4c>)
    1242:	42a9      	cmp	r1, r5
    1244:	d009      	beq.n	125a <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1246:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    124a:	d007      	beq.n	125c <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    124c:	4621      	mov	r1, r4
    124e:	4809      	ldr	r0, [pc, #36]	; (1274 <mutex_free_platform+0x50>)
    1250:	f004 f813 	bl	527a <k_mem_slab_free>
        mutex->mutex = NULL;
    1254:	2300      	movs	r3, #0
    1256:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1258:	6065      	str	r5, [r4, #4]
}
    125a:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    125c:	2214      	movs	r2, #20
    125e:	6820      	ldr	r0, [r4, #0]
    1260:	f003 fc96 	bl	4b90 <memset>
    1264:	e7f8      	b.n	1258 <mutex_free_platform+0x34>
    1266:	bf00      	nop
    1268:	200000d4 	.word	0x200000d4
    126c:	00005ada 	.word	0x00005ada
    1270:	a95c5f2c 	.word	0xa95c5f2c
    1274:	20000808 	.word	0x20000808

00001278 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1278:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    127a:	b360      	cbz	r0, 12d6 <mutex_lock_platform+0x5e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    127c:	6843      	ldr	r3, [r0, #4]
    127e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1282:	d00e      	beq.n	12a2 <mutex_lock_platform+0x2a>
    1284:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1288:	d018      	beq.n	12bc <mutex_lock_platform+0x44>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    128a:	4a14      	ldr	r2, [pc, #80]	; (12dc <mutex_lock_platform+0x64>)
    128c:	4293      	cmp	r3, r2
    128e:	d020      	beq.n	12d2 <mutex_lock_platform+0x5a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1290:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1292:	f04f 32ff 	mov.w	r2, #4294967295
    1296:	f04f 33ff 	mov.w	r3, #4294967295
    129a:	f002 fb97 	bl	39cc <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    129e:	b158      	cbz	r0, 12b8 <mutex_lock_platform+0x40>
    12a0:	e015      	b.n	12ce <mutex_lock_platform+0x56>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    12a2:	2201      	movs	r2, #1
    12a4:	6803      	ldr	r3, [r0, #0]
    12a6:	e8d3 1fef 	ldaex	r1, [r3]
    12aa:	2900      	cmp	r1, #0
    12ac:	d103      	bne.n	12b6 <mutex_lock_platform+0x3e>
    12ae:	e8c3 2fe0 	stlex	r0, r2, [r3]
    12b2:	2800      	cmp	r0, #0
    12b4:	d1f7      	bne.n	12a6 <mutex_lock_platform+0x2e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    12b6:	d10a      	bne.n	12ce <mutex_lock_platform+0x56>
            return NRF_CC3XX_PLATFORM_SUCCESS;
    12b8:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    12ba:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    12bc:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    12be:	4a08      	ldr	r2, [pc, #32]	; (12e0 <mutex_lock_platform+0x68>)
    12c0:	781b      	ldrb	r3, [r3, #0]
    12c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
    12c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    12ca:	2b00      	cmp	r3, #0
    12cc:	d0f4      	beq.n	12b8 <mutex_lock_platform+0x40>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    12ce:	4805      	ldr	r0, [pc, #20]	; (12e4 <mutex_lock_platform+0x6c>)
    12d0:	e7f3      	b.n	12ba <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    12d2:	4805      	ldr	r0, [pc, #20]	; (12e8 <mutex_lock_platform+0x70>)
    12d4:	e7f1      	b.n	12ba <mutex_lock_platform+0x42>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    12d6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    12da:	e7ee      	b.n	12ba <mutex_lock_platform+0x42>
    12dc:	a95c5f2c 	.word	0xa95c5f2c
    12e0:	50030000 	.word	0x50030000
    12e4:	ffff8fe9 	.word	0xffff8fe9
    12e8:	ffff8fea 	.word	0xffff8fea

000012ec <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12ec:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    12ee:	b320      	cbz	r0, 133a <mutex_unlock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    12f0:	6843      	ldr	r3, [r0, #4]
    12f2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    12f6:	d009      	beq.n	130c <mutex_unlock_platform+0x20>
    12f8:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    12fc:	d013      	beq.n	1326 <mutex_unlock_platform+0x3a>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    12fe:	4a11      	ldr	r2, [pc, #68]	; (1344 <mutex_unlock_platform+0x58>)
    1300:	4293      	cmp	r3, r2
    1302:	d01d      	beq.n	1340 <mutex_unlock_platform+0x54>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1304:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1306:	f002 fbdb 	bl	3ac0 <z_impl_k_mutex_unlock>
    130a:	e014      	b.n	1336 <mutex_unlock_platform+0x4a>
    130c:	2200      	movs	r2, #0
    130e:	6803      	ldr	r3, [r0, #0]
    1310:	e8d3 1fef 	ldaex	r1, [r3]
    1314:	2901      	cmp	r1, #1
    1316:	d103      	bne.n	1320 <mutex_unlock_platform+0x34>
    1318:	e8c3 2fe0 	stlex	r0, r2, [r3]
    131c:	2800      	cmp	r0, #0
    131e:	d1f7      	bne.n	1310 <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1320:	d009      	beq.n	1336 <mutex_unlock_platform+0x4a>
    1322:	4809      	ldr	r0, [pc, #36]	; (1348 <mutex_unlock_platform+0x5c>)

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1324:	bd08      	pop	{r3, pc}
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    1326:	2100      	movs	r1, #0
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    1328:	6803      	ldr	r3, [r0, #0]
    132a:	4a08      	ldr	r2, [pc, #32]	; (134c <mutex_unlock_platform+0x60>)
    132c:	781b      	ldrb	r3, [r3, #0]
    132e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1336:	2000      	movs	r0, #0
    1338:	e7f4      	b.n	1324 <mutex_unlock_platform+0x38>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    133a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    133e:	e7f1      	b.n	1324 <mutex_unlock_platform+0x38>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1340:	4803      	ldr	r0, [pc, #12]	; (1350 <mutex_unlock_platform+0x64>)
    1342:	e7ef      	b.n	1324 <mutex_unlock_platform+0x38>
    1344:	a95c5f2c 	.word	0xa95c5f2c
    1348:	ffff8fe9 	.word	0xffff8fe9
    134c:	50030000 	.word	0x50030000
    1350:	ffff8fea 	.word	0xffff8fea

00001354 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1354:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1356:	4604      	mov	r4, r0
    1358:	b918      	cbnz	r0, 1362 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    135a:	4b1d      	ldr	r3, [pc, #116]	; (13d0 <mutex_init_platform+0x7c>)
    135c:	481d      	ldr	r0, [pc, #116]	; (13d4 <mutex_init_platform+0x80>)
    135e:	685b      	ldr	r3, [r3, #4]
    1360:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1362:	6863      	ldr	r3, [r4, #4]
    1364:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1368:	d02f      	beq.n	13ca <mutex_init_platform+0x76>
    136a:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    136e:	d02c      	beq.n	13ca <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1370:	4a19      	ldr	r2, [pc, #100]	; (13d8 <mutex_init_platform+0x84>)
    1372:	4293      	cmp	r3, r2
    1374:	d119      	bne.n	13aa <mutex_init_platform+0x56>
    1376:	6823      	ldr	r3, [r4, #0]
    1378:	bb03      	cbnz	r3, 13bc <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    137a:	f04f 32ff 	mov.w	r2, #4294967295
    137e:	f04f 33ff 	mov.w	r3, #4294967295
    1382:	4621      	mov	r1, r4
    1384:	4815      	ldr	r0, [pc, #84]	; (13dc <mutex_init_platform+0x88>)
    1386:	f002 fa4b 	bl	3820 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    138a:	b908      	cbnz	r0, 1390 <mutex_init_platform+0x3c>
    138c:	6823      	ldr	r3, [r4, #0]
    138e:	b91b      	cbnz	r3, 1398 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    1390:	4b0f      	ldr	r3, [pc, #60]	; (13d0 <mutex_init_platform+0x7c>)
    1392:	4813      	ldr	r0, [pc, #76]	; (13e0 <mutex_init_platform+0x8c>)
    1394:	685b      	ldr	r3, [r3, #4]
    1396:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1398:	2214      	movs	r2, #20
    139a:	2100      	movs	r1, #0
    139c:	6820      	ldr	r0, [r4, #0]
    139e:	f003 fbf7 	bl	4b90 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    13a2:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    13a6:	6063      	str	r3, [r4, #4]
    13a8:	e008      	b.n	13bc <mutex_init_platform+0x68>
    switch(flags){
    13aa:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    13ae:	d80d      	bhi.n	13cc <mutex_init_platform+0x78>
    13b0:	2b3a      	cmp	r3, #58	; 0x3a
    13b2:	d003      	beq.n	13bc <mutex_init_platform+0x68>
    13b4:	f640 62ba 	movw	r2, #3770	; 0xeba
    13b8:	4293      	cmp	r3, r2
    13ba:	d1de      	bne.n	137a <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    13bc:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    13be:	f003 ff9a 	bl	52f6 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    13c2:	6863      	ldr	r3, [r4, #4]
    13c4:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    13c8:	6063      	str	r3, [r4, #4]
}
    13ca:	bd10      	pop	{r4, pc}
    switch(flags){
    13cc:	4a05      	ldr	r2, [pc, #20]	; (13e4 <mutex_init_platform+0x90>)
    13ce:	e7f3      	b.n	13b8 <mutex_init_platform+0x64>
    13d0:	200000d4 	.word	0x200000d4
    13d4:	00005ada 	.word	0x00005ada
    13d8:	a95c5f2c 	.word	0xa95c5f2c
    13dc:	20000808 	.word	0x20000808
    13e0:	00005b00 	.word	0x00005b00
    13e4:	3a00003a 	.word	0x3a00003a

000013e8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    13e8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    13ea:	4906      	ldr	r1, [pc, #24]	; (1404 <nrf_cc3xx_platform_mutex_init+0x1c>)
    13ec:	2340      	movs	r3, #64	; 0x40
    13ee:	2214      	movs	r2, #20
    13f0:	4805      	ldr	r0, [pc, #20]	; (1408 <nrf_cc3xx_platform_mutex_init+0x20>)
    13f2:	f003 ff34 	bl	525e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    13f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    13fa:	4904      	ldr	r1, [pc, #16]	; (140c <nrf_cc3xx_platform_mutex_init+0x24>)
    13fc:	4804      	ldr	r0, [pc, #16]	; (1410 <nrf_cc3xx_platform_mutex_init+0x28>)
    13fe:	f003 b947 	b.w	4690 <nrf_cc3xx_platform_set_mutexes>
    1402:	bf00      	nop
    1404:	20000308 	.word	0x20000308
    1408:	20000808 	.word	0x20000808
    140c:	00005810 	.word	0x00005810
    1410:	00005824 	.word	0x00005824

00001414 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1414:	4901      	ldr	r1, [pc, #4]	; (141c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1416:	2210      	movs	r2, #16
	str	r2, [r1]
    1418:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    141a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    141c:	e000ed10 	.word	0xe000ed10

00001420 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1420:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1422:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1424:	f380 8811 	msr	BASEPRI, r0
	isb
    1428:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    142c:	b501      	push	{r0, lr}
    142e:	f7ff fd71 	bl	f14 <z_arm_on_enter_cpu_idle>
    1432:	2800      	cmp	r0, #0
    1434:	d002      	beq.n	143c <_skip_0>
    1436:	f3bf 8f4f 	dsb	sy
    143a:	bf30      	wfi

0000143c <_skip_0>:
    143c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1440:	b662      	cpsie	i
	isb
    1442:	f3bf 8f6f 	isb	sy

	bx	lr
    1446:	4770      	bx	lr

00001448 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1448:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    144a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    144c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    1450:	b501      	push	{r0, lr}
    1452:	f7ff fd5f 	bl	f14 <z_arm_on_enter_cpu_idle>
    1456:	2800      	cmp	r0, #0
    1458:	d002      	beq.n	1460 <_skip_1>
    145a:	f3bf 8f4f 	dsb	sy
    145e:	bf20      	wfe

00001460 <_skip_1>:
    1460:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    1464:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1468:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    146a:	4770      	bx	lr

0000146c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    146c:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
    146e:	2800      	cmp	r0, #0
    1470:	db07      	blt.n	1482 <arch_irq_enable+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1472:	2301      	movs	r3, #1
    1474:	0941      	lsrs	r1, r0, #5
    1476:	4a03      	ldr	r2, [pc, #12]	; (1484 <arch_irq_enable+0x18>)
    1478:	f000 001f 	and.w	r0, r0, #31
    147c:	4083      	lsls	r3, r0
    147e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1482:	4770      	bx	lr
    1484:	e000e100 	.word	0xe000e100

00001488 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1488:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
    148a:	2800      	cmp	r0, #0
    148c:	db0c      	blt.n	14a8 <arch_irq_disable+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    148e:	2201      	movs	r2, #1
    1490:	4906      	ldr	r1, [pc, #24]	; (14ac <arch_irq_disable+0x24>)
    1492:	0943      	lsrs	r3, r0, #5
    1494:	f000 001f 	and.w	r0, r0, #31
    1498:	4082      	lsls	r2, r0
    149a:	3320      	adds	r3, #32
    149c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    14a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14a4:	f3bf 8f6f 	isb	sy
}
    14a8:	4770      	bx	lr
    14aa:	bf00      	nop
    14ac:	e000e100 	.word	0xe000e100

000014b0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    14b0:	4b05      	ldr	r3, [pc, #20]	; (14c8 <arch_irq_is_enabled+0x18>)
    14b2:	0942      	lsrs	r2, r0, #5
    14b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    14b8:	2301      	movs	r3, #1
    14ba:	f000 001f 	and.w	r0, r0, #31
    14be:	fa03 f000 	lsl.w	r0, r3, r0
}
    14c2:	4010      	ands	r0, r2
    14c4:	4770      	bx	lr
    14c6:	bf00      	nop
    14c8:	e000e100 	.word	0xe000e100

000014cc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    14cc:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
    14ce:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    14d0:	f101 0101 	add.w	r1, r1, #1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14d4:	bfac      	ite	ge
    14d6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14da:	4b06      	ldrlt	r3, [pc, #24]	; (14f4 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14dc:	ea4f 1141 	mov.w	r1, r1, lsl #5
    14e0:	b2c9      	uxtb	r1, r1
    14e2:	bfab      	itete	ge
    14e4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14e8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14ec:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f0:	5419      	strblt	r1, [r3, r0]
}
    14f2:	4770      	bx	lr
    14f4:	e000ed14 	.word	0xe000ed14

000014f8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    14f8:	bf30      	wfi
    b z_SysNmiOnReset
    14fa:	f7ff bffd 	b.w	14f8 <z_SysNmiOnReset>
    14fe:	bf00      	nop

00001500 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1500:	4a0b      	ldr	r2, [pc, #44]	; (1530 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1502:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1504:	4b0b      	ldr	r3, [pc, #44]	; (1534 <z_arm_prep_c+0x34>)
    1506:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    150a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    150c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1510:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1514:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1518:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    151c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1520:	f002 f8be 	bl	36a0 <z_bss_zero>
	z_data_copy();
    1524:	f002 fe92 	bl	424c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1528:	f000 f9fc 	bl	1924 <z_arm_interrupt_init>
	z_cstart();
    152c:	f002 f8f8 	bl	3720 <z_cstart>
    1530:	00000000 	.word	0x00000000
    1534:	e000ed00 	.word	0xe000ed00

00001538 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1538:	4a09      	ldr	r2, [pc, #36]	; (1560 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    153a:	490a      	ldr	r1, [pc, #40]	; (1564 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    153c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    153e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1540:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    1542:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1544:	4908      	ldr	r1, [pc, #32]	; (1568 <arch_swap+0x30>)
    1546:	684b      	ldr	r3, [r1, #4]
    1548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    154c:	604b      	str	r3, [r1, #4]
    154e:	2300      	movs	r3, #0
    1550:	f383 8811 	msr	BASEPRI, r3
    1554:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1558:	6893      	ldr	r3, [r2, #8]
}
    155a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    155c:	4770      	bx	lr
    155e:	bf00      	nop
    1560:	2000091c 	.word	0x2000091c
    1564:	0000593c 	.word	0x0000593c
    1568:	e000ed00 	.word	0xe000ed00

0000156c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    156c:	4913      	ldr	r1, [pc, #76]	; (15bc <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    156e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1570:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1574:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1576:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    157a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    157e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1580:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1584:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1588:	4f0d      	ldr	r7, [pc, #52]	; (15c0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    158a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    158e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    1590:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1592:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1594:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1596:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1598:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    159a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    159e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    15a2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    15a6:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    15aa:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    15ae:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    15b0:	f003 faa9 	bl	4b06 <configure_builtin_stack_guard>
    pop {r2, lr}
    15b4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    15b8:	4770      	bx	lr
    15ba:	0000      	.short	0x0000
    ldr r1, =_kernel
    15bc:	2000091c 	.word	0x2000091c
    ldr v4, =_SCS_ICSR
    15c0:	e000ed04 	.word	0xe000ed04

000015c4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    15c4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    15c8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    15ca:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    15ce:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    15d2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    15d4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    15d8:	2902      	cmp	r1, #2
    beq _oops
    15da:	d0ff      	beq.n	15dc <_oops>

000015dc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    15dc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    15de:	f003 fa83 	bl	4ae8 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    15e2:	bd01      	pop	{r0, pc}

000015e4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    15e4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    15e8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    15ea:	490b      	ldr	r1, [pc, #44]	; (1618 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    15ec:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    15f0:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    15f2:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    15f6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    15fa:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    15fc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    1600:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1608:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    160c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    160e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1610:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1612:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1614:	4770      	bx	lr
    1616:	bf00      	nop
    1618:	0000484f 	.word	0x0000484f

0000161c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    161c:	4b08      	ldr	r3, [pc, #32]	; (1640 <arch_switch_to_main_thread+0x24>)
    161e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1620:	6e43      	ldr	r3, [r0, #100]	; 0x64
    1622:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1626:	4610      	mov	r0, r2
    1628:	f381 8809 	msr	PSP, r1
    162c:	2100      	movs	r1, #0
    162e:	b663      	cpsie	if
    1630:	f381 8811 	msr	BASEPRI, r1
    1634:	f3bf 8f6f 	isb	sy
    1638:	2200      	movs	r2, #0
    163a:	2300      	movs	r3, #0
    163c:	f003 f907 	bl	484e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1640:	2000091c 	.word	0x2000091c

00001644 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1644:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1646:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1648:	4a0b      	ldr	r2, [pc, #44]	; (1678 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    164a:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    164c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    164e:	bf1e      	ittt	ne
	movne	r1, #0
    1650:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1652:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    1654:	f003 fe40 	blne	52d8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1658:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    165a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    165e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1662:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1666:	4905      	ldr	r1, [pc, #20]	; (167c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1668:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    166a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    166c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    166e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1672:	4903      	ldr	r1, [pc, #12]	; (1680 <_isr_wrapper+0x3c>)
	bx r1
    1674:	4708      	bx	r1
    1676:	0000      	.short	0x0000
	ldr r2, =_kernel
    1678:	2000091c 	.word	0x2000091c
	ldr r1, =_sw_isr_table
    167c:	00005560 	.word	0x00005560
	ldr r1, =z_arm_int_exit
    1680:	00001685 	.word	0x00001685

00001684 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1684:	4b04      	ldr	r3, [pc, #16]	; (1698 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1686:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1688:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    168a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    168c:	d003      	beq.n	1696 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    168e:	4903      	ldr	r1, [pc, #12]	; (169c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1694:	600a      	str	r2, [r1, #0]

00001696 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1696:	4770      	bx	lr
	ldr r3, =_kernel
    1698:	2000091c 	.word	0x2000091c
	ldr r1, =_SCS_ICSR
    169c:	e000ed04 	.word	0xe000ed04

000016a0 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    16a0:	4b15      	ldr	r3, [pc, #84]	; (16f8 <usage_fault.constprop.0+0x58>)
    16a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    16a4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    16a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    16aa:	bf14      	ite	ne
    16ac:	201e      	movne	r0, #30
    16ae:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    16b0:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    16b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    16b6:	bf18      	it	ne
    16b8:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    16ba:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    16be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    16c0:	bf18      	it	ne
    16c2:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    16c4:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    16c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    16ca:	bf18      	it	ne
    16cc:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    16ce:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    16d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    16d4:	bf18      	it	ne
    16d6:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    16d8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    16dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    16de:	bf18      	it	ne
    16e0:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    16e2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    16e8:	bf18      	it	ne
    16ea:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16ec:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    16f0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    16f4:	629a      	str	r2, [r3, #40]	; 0x28
}
    16f6:	4770      	bx	lr
    16f8:	e000ed00 	.word	0xe000ed00

000016fc <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    16fc:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16fe:	4b19      	ldr	r3, [pc, #100]	; (1764 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1700:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1702:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1704:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    1706:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    170a:	bf14      	ite	ne
    170c:	2017      	movne	r0, #23
    170e:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    1710:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1714:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    1716:	bf18      	it	ne
    1718:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    171a:	05a4      	lsls	r4, r4, #22
    171c:	d509      	bpl.n	1732 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    171e:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1720:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1722:	0400      	lsls	r0, r0, #16
    1724:	d504      	bpl.n	1730 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    1726:	b11a      	cbz	r2, 1730 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    172a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    172e:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    1730:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1732:	4b0c      	ldr	r3, [pc, #48]	; (1764 <bus_fault.constprop.0+0x68>)
    1734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1736:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    173a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    173c:	bf18      	it	ne
    173e:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1740:	05d2      	lsls	r2, r2, #23
    1742:	d40c      	bmi.n	175e <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    1746:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    174a:	bf18      	it	ne
    174c:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    174e:	4a05      	ldr	r2, [pc, #20]	; (1764 <bus_fault.constprop.0+0x68>)
    1750:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1752:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1756:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1758:	2300      	movs	r3, #0
    175a:	700b      	strb	r3, [r1, #0]
}
    175c:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    175e:	201b      	movs	r0, #27
    1760:	e7f5      	b.n	174e <bus_fault.constprop.0+0x52>
    1762:	bf00      	nop
    1764:	e000ed00 	.word	0xe000ed00

00001768 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1768:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    176a:	4b1c      	ldr	r3, [pc, #112]	; (17dc <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    176c:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    176e:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1770:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    1772:	f010 0f10 	tst.w	r0, #16
    1776:	bf14      	ite	ne
    1778:	2011      	movne	r0, #17
    177a:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    177c:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1780:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    1782:	bf18      	it	ne
    1784:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1786:	07a4      	lsls	r4, r4, #30
    1788:	d509      	bpl.n	179e <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    178a:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    178c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    178e:	0600      	lsls	r0, r0, #24
    1790:	d504      	bpl.n	179c <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    1792:	b11a      	cbz	r2, 179c <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    179a:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    179c:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    179e:	4b0f      	ldr	r3, [pc, #60]	; (17dc <mem_manage_fault.constprop.0+0x74>)
    17a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    17a2:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    17a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    17a8:	bf18      	it	ne
    17aa:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    17ac:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    17b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    17b2:	bf18      	it	ne
    17b4:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    17b6:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    17b8:	bf58      	it	pl
    17ba:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    17bc:	4b07      	ldr	r3, [pc, #28]	; (17dc <mem_manage_fault.constprop.0+0x74>)
    17be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17c0:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    17c2:	bf42      	ittt	mi
    17c4:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    17c6:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    17ca:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    17cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17ce:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    17d2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    17d4:	2300      	movs	r3, #0
    17d6:	700b      	strb	r3, [r1, #0]
}
    17d8:	bd10      	pop	{r4, pc}
    17da:	bf00      	nop
    17dc:	e000ed00 	.word	0xe000ed00

000017e0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    17e0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    17e2:	4b44      	ldr	r3, [pc, #272]	; (18f4 <z_arm_fault+0x114>)
{
    17e4:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    17e6:	685b      	ldr	r3, [r3, #4]
    17e8:	2500      	movs	r5, #0
{
    17ea:	b08a      	sub	sp, #40	; 0x28
    17ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
    17f0:	f385 8811 	msr	BASEPRI, r5
    17f4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    17f8:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    17fc:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    1800:	d111      	bne.n	1826 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1802:	f002 000c 	and.w	r0, r2, #12
    1806:	2808      	cmp	r0, #8
    1808:	d00d      	beq.n	1826 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    180a:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    180c:	bf4c      	ite	mi
    180e:	460e      	movmi	r6, r1
			*nested_exc = true;
    1810:	2501      	movpl	r5, #1
	*recoverable = false;
    1812:	2200      	movs	r2, #0
	switch (fault) {
    1814:	3b03      	subs	r3, #3
	*recoverable = false;
    1816:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    181a:	2b03      	cmp	r3, #3
    181c:	d805      	bhi.n	182a <z_arm_fault+0x4a>
    181e:	e8df f003 	tbb	[pc, r3]
    1822:	5c1e      	.short	0x5c1e
    1824:	5960      	.short	0x5960
		return NULL;
    1826:	462e      	mov	r6, r5
    1828:	e7f3      	b.n	1812 <z_arm_fault+0x32>
    182a:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    182c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1830:	b99b      	cbnz	r3, 185a <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1832:	2220      	movs	r2, #32
    1834:	4631      	mov	r1, r6
    1836:	a802      	add	r0, sp, #8
    1838:	f003 f99f 	bl	4b7a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    183c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    183e:	2d00      	cmp	r5, #0
    1840:	d053      	beq.n	18ea <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1842:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1846:	b922      	cbnz	r2, 1852 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1848:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    184c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1850:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    1852:	4620      	mov	r0, r4
    1854:	a902      	add	r1, sp, #8
    1856:	f003 f945 	bl	4ae4 <z_arm_fatal_error>
}
    185a:	b00a      	add	sp, #40	; 0x28
    185c:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    185e:	4b25      	ldr	r3, [pc, #148]	; (18f4 <z_arm_fault+0x114>)
    1860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1862:	0791      	lsls	r1, r2, #30
    1864:	d4e1      	bmi.n	182a <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1868:	2a00      	cmp	r2, #0
    186a:	dbde      	blt.n	182a <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    186c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    186e:	0052      	lsls	r2, r2, #1
    1870:	d5db      	bpl.n	182a <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1872:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1874:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    187a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    187c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1880:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1884:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    1886:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    188a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    188e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1890:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1894:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1898:	f64d 7202 	movw	r2, #57090	; 0xdf02
    189c:	4291      	cmp	r1, r2
    189e:	d009      	beq.n	18b4 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    18a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18a2:	b2d2      	uxtb	r2, r2
    18a4:	b142      	cbz	r2, 18b8 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
    18a6:	2001      	movs	r0, #1
    18a8:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    18ac:	f7ff ff5c 	bl	1768 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    18b0:	4604      	mov	r4, r0
		break;
    18b2:	e7bb      	b.n	182c <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    18b4:	6834      	ldr	r4, [r6, #0]
    18b6:	e7b9      	b.n	182c <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    18b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18ba:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    18be:	d005      	beq.n	18cc <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
    18c0:	2001      	movs	r0, #1
    18c2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    18c6:	f7ff ff19 	bl	16fc <bus_fault.constprop.0>
    18ca:	e7f1      	b.n	18b0 <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    18cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    18d2:	d3aa      	bcc.n	182a <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    18d4:	f7ff fee4 	bl	16a0 <usage_fault.constprop.0>
    18d8:	e7ea      	b.n	18b0 <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
    18da:	2000      	movs	r0, #0
    18dc:	f10d 0107 	add.w	r1, sp, #7
    18e0:	e7e4      	b.n	18ac <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    18e2:	2000      	movs	r0, #0
    18e4:	f10d 0107 	add.w	r1, sp, #7
    18e8:	e7ed      	b.n	18c6 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    18ea:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    18ee:	f023 0301 	bic.w	r3, r3, #1
    18f2:	e7ad      	b.n	1850 <z_arm_fault+0x70>
    18f4:	e000ed00 	.word	0xe000ed00

000018f8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    18f8:	4b04      	ldr	r3, [pc, #16]	; (190c <z_arm_fault_init+0x14>)
    18fa:	695a      	ldr	r2, [r3, #20]
    18fc:	f042 0210 	orr.w	r2, r2, #16
    1900:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    1902:	695a      	ldr	r2, [r3, #20]
    1904:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1908:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    190a:	4770      	bx	lr
    190c:	e000ed00 	.word	0xe000ed00

00001910 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1910:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1914:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1918:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    191a:	4672      	mov	r2, lr
	bl z_arm_fault
    191c:	f7ff ff60 	bl	17e0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1920:	bd01      	pop	{r0, pc}
    1922:	bf00      	nop

00001924 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1924:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1926:	2120      	movs	r1, #32
    1928:	4803      	ldr	r0, [pc, #12]	; (1938 <z_arm_interrupt_init+0x14>)
    192a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    192c:	3301      	adds	r3, #1
    192e:	2b45      	cmp	r3, #69	; 0x45
    1930:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1934:	d1f9      	bne.n	192a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1936:	4770      	bx	lr
    1938:	e000e100 	.word	0xe000e100

0000193c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    193c:	2000      	movs	r0, #0
    msr CONTROL, r0
    193e:	f380 8814 	msr	CONTROL, r0
    isb
    1942:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1946:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1948:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    194c:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1950:	f7ff fb32 	bl	fb8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1954:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1956:	490e      	ldr	r1, [pc, #56]	; (1990 <__start+0x54>)
    str r0, [r1]
    1958:	6008      	str	r0, [r1, #0]
    dsb
    195a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    195e:	480d      	ldr	r0, [pc, #52]	; (1994 <__start+0x58>)
    msr msp, r0
    1960:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1964:	f000 f83e 	bl	19e4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1968:	2020      	movs	r0, #32
    msr BASEPRI, r0
    196a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    196e:	480a      	ldr	r0, [pc, #40]	; (1998 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1970:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1974:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1976:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    197a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    197e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1980:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1982:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1986:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    198a:	f7ff fdb9 	bl	1500 <z_arm_prep_c>
    198e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    1990:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1994:	20001870 	.word	0x20001870
    ldr r0, =z_interrupt_stacks
    1998:	20000b30 	.word	0x20000b30

0000199c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    199c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    19a0:	4905      	ldr	r1, [pc, #20]	; (19b8 <sys_arch_reboot+0x1c>)
    19a2:	4b06      	ldr	r3, [pc, #24]	; (19bc <sys_arch_reboot+0x20>)
    19a4:	68ca      	ldr	r2, [r1, #12]
    19a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    19aa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    19ac:	60cb      	str	r3, [r1, #12]
    19ae:	f3bf 8f4f 	dsb	sy
    __NOP();
    19b2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    19b4:	e7fd      	b.n	19b2 <sys_arch_reboot+0x16>
    19b6:	bf00      	nop
    19b8:	e000ed00 	.word	0xe000ed00
    19bc:	05fa0004 	.word	0x05fa0004

000019c0 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    19c0:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    19c2:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    19c4:	4906      	ldr	r1, [pc, #24]	; (19e0 <z_arm_clear_arm_mpu_config+0x20>)
    19c6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    19ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    19ce:	4293      	cmp	r3, r2
    19d0:	db00      	blt.n	19d4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    19d2:	4770      	bx	lr
  mpu->RNR = rnr;
    19d4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    19d8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    19dc:	3301      	adds	r3, #1
    19de:	e7f6      	b.n	19ce <z_arm_clear_arm_mpu_config+0xe>
    19e0:	e000ed00 	.word	0xe000ed00

000019e4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    19e4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    19e6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    19e8:	2400      	movs	r4, #0
    19ea:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    19ee:	f7ff ffe7 	bl	19c0 <z_arm_clear_arm_mpu_config>
    19f2:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    19f4:	f04f 30ff 	mov.w	r0, #4294967295
    19f8:	4a0c      	ldr	r2, [pc, #48]	; (1a2c <z_arm_init_arch_hw_at_boot+0x48>)
    19fa:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    19fe:	3301      	adds	r3, #1
    1a00:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1a02:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1a06:	d1f8      	bne.n	19fa <z_arm_init_arch_hw_at_boot+0x16>
    1a08:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1a0a:	f04f 30ff 	mov.w	r0, #4294967295
    1a0e:	4a07      	ldr	r2, [pc, #28]	; (1a2c <z_arm_init_arch_hw_at_boot+0x48>)
    1a10:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1a14:	3301      	adds	r3, #1
    1a16:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1a18:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1a1c:	d1f8      	bne.n	1a10 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1a1e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1a20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a24:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1a28:	bd10      	pop	{r4, pc}
    1a2a:	bf00      	nop
    1a2c:	e000e100 	.word	0xe000e100

00001a30 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1a30:	4b08      	ldr	r3, [pc, #32]	; (1a54 <z_impl_k_thread_abort+0x24>)
    1a32:	689b      	ldr	r3, [r3, #8]
    1a34:	4283      	cmp	r3, r0
    1a36:	d10b      	bne.n	1a50 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1a38:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1a3c:	b143      	cbz	r3, 1a50 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a3e:	4b06      	ldr	r3, [pc, #24]	; (1a58 <z_impl_k_thread_abort+0x28>)
    1a40:	685a      	ldr	r2, [r3, #4]
    1a42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a46:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1a4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1a4e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1a50:	f002 bb9c 	b.w	418c <z_thread_abort>
    1a54:	2000091c 	.word	0x2000091c
    1a58:	e000ed00 	.word	0xe000ed00

00001a5c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1a5e:	4c09      	ldr	r4, [pc, #36]	; (1a84 <z_arm_configure_static_mpu_regions+0x28>)
    1a60:	4a09      	ldr	r2, [pc, #36]	; (1a88 <z_arm_configure_static_mpu_regions+0x2c>)
    1a62:	4623      	mov	r3, r4
    1a64:	2101      	movs	r1, #1
    1a66:	4809      	ldr	r0, [pc, #36]	; (1a8c <z_arm_configure_static_mpu_regions+0x30>)
    1a68:	f000 f8ea 	bl	1c40 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1a6c:	2300      	movs	r3, #0
    1a6e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1a70:	4b07      	ldr	r3, [pc, #28]	; (1a90 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1a72:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1a74:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1a76:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1a78:	9301      	str	r3, [sp, #4]
    1a7a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1a7c:	f000 f8ea 	bl	1c54 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1a80:	b004      	add	sp, #16
    1a82:	bd10      	pop	{r4, pc}
    1a84:	20070000 	.word	0x20070000
    1a88:	20000000 	.word	0x20000000
    1a8c:	00005834 	.word	0x00005834
    1a90:	20000190 	.word	0x20000190

00001a94 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    1a94:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    1a96:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1a98:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    1a9a:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1a9e:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    1aa2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1aa4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1aa6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1aa8:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    1aac:	4905      	ldr	r1, [pc, #20]	; (1ac4 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1aae:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    1ab2:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    1ab6:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    1aba:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    1abe:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1ac2:	bd10      	pop	{r4, pc}
    1ac4:	e000ed00 	.word	0xe000ed00

00001ac8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1acc:	460f      	mov	r7, r1
    1ace:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1ad0:	4606      	mov	r6, r0
    1ad2:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    1ad6:	4d4e      	ldr	r5, [pc, #312]	; (1c10 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1ad8:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    1ada:	45b8      	cmp	r8, r7
    1adc:	f280 8094 	bge.w	1c08 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    1ae0:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1ae4:	f1b9 0f00 	cmp.w	r9, #0
    1ae8:	d036      	beq.n	1b58 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    1aea:	f1b9 0f1f 	cmp.w	r9, #31
    1aee:	f240 8089 	bls.w	1c04 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    1af2:	f019 0f1f 	tst.w	r9, #31
    1af6:	f040 8085 	bne.w	1c04 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    1afa:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    1afe:	f01a 0f1f 	tst.w	sl, #31
    1b02:	d17f      	bne.n	1c04 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1b04:	4650      	mov	r0, sl
    1b06:	f003 f802 	bl	4b0e <arm_cmse_mpu_region_get>
    1b0a:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1b0c:	eb09 000a 	add.w	r0, r9, sl
    1b10:	3801      	subs	r0, #1
    1b12:	f002 fffc 	bl	4b0e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1b16:	4583      	cmp	fp, r0
    1b18:	d174      	bne.n	1c04 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    1b1a:	f11b 0f16 	cmn.w	fp, #22
    1b1e:	d071      	beq.n	1c04 <mpu_configure_regions_and_partition.constprop.0+0x13c>
    1b20:	455c      	cmp	r4, fp
    1b22:	dd6f      	ble.n	1c04 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    1b24:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1b28:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    1b2c:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    1b30:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1b34:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1b38:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1b3c:	e9d6 3200 	ldrd	r3, r2, [r6]
    1b40:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    1b42:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1b44:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    1b48:	d11e      	bne.n	1b88 <mpu_configure_regions_and_partition.constprop.0+0xc0>
    1b4a:	45ca      	cmp	sl, r9
    1b4c:	d108      	bne.n	1b60 <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    1b4e:	4631      	mov	r1, r6
    1b50:	fa5f f08b 	uxtb.w	r0, fp
    1b54:	f002 ffe4 	bl	4b20 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    1b58:	f108 0801 	add.w	r8, r8, #1
    1b5c:	360c      	adds	r6, #12
    1b5e:	e7bc      	b.n	1ada <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1b60:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    1b62:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1b66:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    1b6a:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    1b6e:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    1b72:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    1b74:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    1b78:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1b7a:	f002 ffd1 	bl	4b20 <mpu_configure_region>

			if (reg_index == -EINVAL) {
    1b7e:	f110 0f16 	cmn.w	r0, #22
    1b82:	d03f      	beq.n	1c04 <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    1b84:	1c44      	adds	r4, r0, #1
    1b86:	e7e7      	b.n	1b58 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    1b88:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    1b8c:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    1b90:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1b92:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1b96:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1b9a:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    1b9c:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    1b9e:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    1ba0:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    1ba2:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    1ba6:	d0e8      	beq.n	1b7a <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    1ba8:	f002 ffba 	bl	4b20 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1bac:	f110 0f16 	cmn.w	r0, #22
    1bb0:	d028      	beq.n	1c04 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    1bb2:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1bb6:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1bba:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    1bbe:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = mpu_get_rbar() &
    1bc2:	f362 0304 	bfi	r3, r2, #0, #5
    1bc6:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    1bca:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1bce:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1bd2:	085b      	lsrs	r3, r3, #1
    1bd4:	f363 1247 	bfi	r2, r3, #5, #3
    1bd8:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    1bdc:	e9d6 3200 	ldrd	r3, r2, [r6]
    1be0:	4413      	add	r3, r2
    1be2:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    1be4:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    1be8:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    1bea:	4453      	add	r3, sl
    1bec:	eba3 0309 	sub.w	r3, r3, r9
    1bf0:	b2c8      	uxtb	r0, r1
    1bf2:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    1bf6:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    1bf8:	9303      	str	r3, [sp, #12]
    1bfa:	d803      	bhi.n	1c04 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1bfc:	4669      	mov	r1, sp
    1bfe:	f7ff ff49 	bl	1a94 <region_init>
    1c02:	e7bf      	b.n	1b84 <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    1c04:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    1c08:	4620      	mov	r0, r4
    1c0a:	b005      	add	sp, #20
    1c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c10:	e000ed00 	.word	0xe000ed00

00001c14 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1c14:	2205      	movs	r2, #5
    1c16:	4b04      	ldr	r3, [pc, #16]	; (1c28 <arm_core_mpu_enable+0x14>)
    1c18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1c1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c20:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1c24:	4770      	bx	lr
    1c26:	bf00      	nop
    1c28:	e000ed00 	.word	0xe000ed00

00001c2c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1c2c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1c30:	2200      	movs	r2, #0
    1c32:	4b02      	ldr	r3, [pc, #8]	; (1c3c <arm_core_mpu_disable+0x10>)
    1c34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1c38:	4770      	bx	lr
    1c3a:	bf00      	nop
    1c3c:	e000ed00 	.word	0xe000ed00

00001c40 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1c40:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1c42:	4c03      	ldr	r4, [pc, #12]	; (1c50 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1c44:	7822      	ldrb	r2, [r4, #0]
    1c46:	f7ff ff3f 	bl	1ac8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1c4a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1c4c:	bd10      	pop	{r4, pc}
    1c4e:	bf00      	nop
    1c50:	20000b2a 	.word	0x20000b2a

00001c54 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    1c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c58:	4d29      	ldr	r5, [pc, #164]	; (1d00 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    1c5a:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    1c5c:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1c5e:	f04f 0800 	mov.w	r8, #0
    1c62:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    1c64:	4f27      	ldr	r7, [pc, #156]	; (1d04 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1c66:	45d0      	cmp	r8, sl
    1c68:	da1b      	bge.n	1ca2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1c6a:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1c6e:	f1b9 0f00 	cmp.w	r9, #0
    1c72:	d03f      	beq.n	1cf4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1c74:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1c76:	4608      	mov	r0, r1
    1c78:	9101      	str	r1, [sp, #4]
    1c7a:	f002 ff48 	bl	4b0e <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1c7e:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1c80:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1c82:	eb09 0001 	add.w	r0, r9, r1
    1c86:	3801      	subs	r0, #1
    1c88:	f002 ff41 	bl	4b0e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1c8c:	4284      	cmp	r4, r0
    1c8e:	f04f 0214 	mov.w	r2, #20
    1c92:	4b1d      	ldr	r3, [pc, #116]	; (1d08 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    1c94:	d008      	beq.n	1ca8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    1c96:	fb02 f308 	mul.w	r3, r2, r8
    1c9a:	f06f 0215 	mvn.w	r2, #21
    1c9e:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    1ca2:	b003      	add	sp, #12
    1ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1ca8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    1cac:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    1cae:	d0f8      	beq.n	1ca2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1cb0:	7819      	ldrb	r1, [r3, #0]
    1cb2:	42a1      	cmp	r1, r4
    1cb4:	ddf5      	ble.n	1ca2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    1cb6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    1cba:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    1cbe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    1cc2:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1cc6:	f100 0108 	add.w	r1, r0, #8
    1cca:	7b00      	ldrb	r0, [r0, #12]
    1ccc:	f364 0004 	bfi	r0, r4, #0, #5
    1cd0:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    1cd2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1cd6:	790c      	ldrb	r4, [r1, #4]
    1cd8:	0840      	lsrs	r0, r0, #1
    1cda:	f360 1447 	bfi	r4, r0, #5, #3
    1cde:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    1ce0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1ce4:	f021 011f 	bic.w	r1, r1, #31
    1ce8:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    1cea:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    1cee:	f021 011f 	bic.w	r1, r1, #31
    1cf2:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1cf4:	f108 0801 	add.w	r8, r8, #1
    1cf8:	3514      	adds	r5, #20
    1cfa:	360c      	adds	r6, #12
    1cfc:	e7b3      	b.n	1c66 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    1cfe:	bf00      	nop
    1d00:	20000824 	.word	0x20000824
    1d04:	e000ed00 	.word	0xe000ed00
    1d08:	20000b2a 	.word	0x20000b2a

00001d0c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1d0c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1d0e:	4d0e      	ldr	r5, [pc, #56]	; (1d48 <z_arm_mpu_init+0x3c>)
    1d10:	682c      	ldr	r4, [r5, #0]
    1d12:	2c08      	cmp	r4, #8
    1d14:	d815      	bhi.n	1d42 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d16:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    1d18:	f7ff ff88 	bl	1c2c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    1d1c:	4b0b      	ldr	r3, [pc, #44]	; (1d4c <z_arm_mpu_init+0x40>)
    1d1e:	4a0c      	ldr	r2, [pc, #48]	; (1d50 <z_arm_mpu_init+0x44>)
    1d20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d24:	4284      	cmp	r4, r0
    1d26:	d105      	bne.n	1d34 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1d28:	4b0a      	ldr	r3, [pc, #40]	; (1d54 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1d2a:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    1d2c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    1d2e:	f7ff ff71 	bl	1c14 <arm_core_mpu_enable>
}
    1d32:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1d34:	6869      	ldr	r1, [r5, #4]
    1d36:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    1d3a:	f7ff feab 	bl	1a94 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d3e:	3001      	adds	r0, #1
    1d40:	e7f0      	b.n	1d24 <z_arm_mpu_init+0x18>
		return -1;
    1d42:	f04f 30ff 	mov.w	r0, #4294967295
    1d46:	e7f4      	b.n	1d32 <z_arm_mpu_init+0x26>
    1d48:	00005840 	.word	0x00005840
    1d4c:	e000ed00 	.word	0xe000ed00
    1d50:	0044ffaa 	.word	0x0044ffaa
    1d54:	20000b2a 	.word	0x20000b2a

00001d58 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1d58:	4b01      	ldr	r3, [pc, #4]	; (1d60 <__stdout_hook_install+0x8>)
    1d5a:	6018      	str	r0, [r3, #0]
}
    1d5c:	4770      	bx	lr
    1d5e:	bf00      	nop
    1d60:	20000028 	.word	0x20000028

00001d64 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1d64:	4b08      	ldr	r3, [pc, #32]	; (1d88 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1d66:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1d68:	1ac3      	subs	r3, r0, r3
{
    1d6a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1d6c:	4907      	ldr	r1, [pc, #28]	; (1d8c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1d6e:	109b      	asrs	r3, r3, #2
{
    1d70:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1d72:	4359      	muls	r1, r3
    1d74:	2240      	movs	r2, #64	; 0x40
    1d76:	4806      	ldr	r0, [pc, #24]	; (1d90 <onoff_stop+0x2c>)
    1d78:	f002 ff32 	bl	4be0 <stop>
	notify(mgr, res);
    1d7c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1d7e:	4601      	mov	r1, r0
	notify(mgr, res);
    1d80:	4620      	mov	r0, r4
}
    1d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1d86:	4718      	bx	r3
    1d88:	2000084c 	.word	0x2000084c
    1d8c:	b6db6db7 	.word	0xb6db6db7
    1d90:	00005500 	.word	0x00005500

00001d94 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d94:	2340      	movs	r3, #64	; 0x40
{
    1d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1d98:	4c0b      	ldr	r4, [pc, #44]	; (1dc8 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d9a:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    1d9c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d9e:	460b      	mov	r3, r1
{
    1da0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1da2:	490a      	ldr	r1, [pc, #40]	; (1dcc <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    1da4:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1da6:	4361      	muls	r1, r4
{
    1da8:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1daa:	4a09      	ldr	r2, [pc, #36]	; (1dd0 <onoff_start+0x3c>)
    1dac:	4809      	ldr	r0, [pc, #36]	; (1dd4 <onoff_start+0x40>)
    1dae:	f002 ff44 	bl	4c3a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1db2:	1e01      	subs	r1, r0, #0
    1db4:	da05      	bge.n	1dc2 <onoff_start+0x2e>
		notify(mgr, err);
    1db6:	4630      	mov	r0, r6
    1db8:	462b      	mov	r3, r5
	}
}
    1dba:	b002      	add	sp, #8
    1dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1dc0:	4718      	bx	r3
}
    1dc2:	b002      	add	sp, #8
    1dc4:	bd70      	pop	{r4, r5, r6, pc}
    1dc6:	bf00      	nop
    1dc8:	2000084c 	.word	0x2000084c
    1dcc:	b6db6db7 	.word	0xb6db6db7
    1dd0:	00004ca7 	.word	0x00004ca7
    1dd4:	00005500 	.word	0x00005500

00001dd8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1ddc:	2200      	movs	r2, #0
    1dde:	2101      	movs	r1, #1
{
    1de0:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1de2:	2005      	movs	r0, #5
    1de4:	f7ff fb72 	bl	14cc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1de8:	4811      	ldr	r0, [pc, #68]	; (1e30 <clk_init+0x58>)
    1dea:	f001 f843 	bl	2e74 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1dee:	4b11      	ldr	r3, [pc, #68]	; (1e34 <clk_init+0x5c>)
    1df0:	4298      	cmp	r0, r3
    1df2:	d119      	bne.n	1e28 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1df4:	f003 f927 	bl	5046 <nrfx_clock_enable>
    1df8:	2400      	movs	r4, #0
	return &data->mgr[type];
    1dfa:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1dfe:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1e00:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1e38 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    1e04:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1e06:	4641      	mov	r1, r8
    1e08:	fb09 5004 	mla	r0, r9, r4, r5
    1e0c:	f002 fd79 	bl	4902 <onoff_manager_init>
		if (err < 0) {
    1e10:	2800      	cmp	r0, #0
    1e12:	db07      	blt.n	1e24 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e14:	2301      	movs	r3, #1
    1e16:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1e1a:	441c      	add	r4, r3
    1e1c:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e1e:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1e20:	d1f0      	bne.n	1e04 <clk_init+0x2c>
	}

	return 0;
    1e22:	2000      	movs	r0, #0
}
    1e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    1e28:	f06f 0004 	mvn.w	r0, #4
    1e2c:	e7fa      	b.n	1e24 <clk_init+0x4c>
    1e2e:	bf00      	nop
    1e30:	00001e71 	.word	0x00001e71
    1e34:	0bad0000 	.word	0x0bad0000
    1e38:	00005868 	.word	0x00005868

00001e3c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1e3c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1e3e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    1e40:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    1e42:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1e44:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1e46:	4808      	ldr	r0, [pc, #32]	; (1e68 <clkstarted_handle.constprop.0+0x2c>)
    1e48:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    1e4a:	3378      	adds	r3, #120	; 0x78
    1e4c:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    1e4e:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
    1e52:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    1e54:	f002 feb1 	bl	4bba <set_on_state>
	if (callback) {
    1e58:	b12d      	cbz	r5, 1e66 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1e5a:	4632      	mov	r2, r6
    1e5c:	462b      	mov	r3, r5
}
    1e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1e62:	4802      	ldr	r0, [pc, #8]	; (1e6c <clkstarted_handle.constprop.0+0x30>)
    1e64:	4718      	bx	r3
}
    1e66:	bd70      	pop	{r4, r5, r6, pc}
    1e68:	2000084c 	.word	0x2000084c
    1e6c:	00005500 	.word	0x00005500

00001e70 <clock_event_handler>:
	switch (event) {
    1e70:	2805      	cmp	r0, #5
    1e72:	d811      	bhi.n	1e98 <clock_event_handler+0x28>
    1e74:	e8df f000 	tbb	[pc, r0]
    1e78:	10100e03 	.word	0x10100e03
    1e7c:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1e7e:	4b07      	ldr	r3, [pc, #28]	; (1e9c <clock_event_handler+0x2c>)
    1e80:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1e82:	f010 0007 	ands.w	r0, r0, #7
    1e86:	d107      	bne.n	1e98 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1e88:	f7ff bfd8 	b.w	1e3c <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1e8c:	2002      	movs	r0, #2
    1e8e:	e7fb      	b.n	1e88 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1e90:	2003      	movs	r0, #3
    1e92:	e7f9      	b.n	1e88 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1e94:	2001      	movs	r0, #1
    1e96:	e7f7      	b.n	1e88 <clock_event_handler+0x18>
}
    1e98:	4770      	bx	lr
    1e9a:	bf00      	nop
    1e9c:	2000084c 	.word	0x2000084c

00001ea0 <generic_hfclk_start>:
{
    1ea0:	b508      	push	{r3, lr}
	__asm__ volatile(
    1ea2:	f04f 0320 	mov.w	r3, #32
    1ea6:	f3ef 8111 	mrs	r1, BASEPRI
    1eaa:	f383 8812 	msr	BASEPRI_MAX, r3
    1eae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1eb2:	4a12      	ldr	r2, [pc, #72]	; (1efc <generic_hfclk_start+0x5c>)
    1eb4:	6813      	ldr	r3, [r2, #0]
    1eb6:	f043 0002 	orr.w	r0, r3, #2
    1eba:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1ebc:	07da      	lsls	r2, r3, #31
    1ebe:	d408      	bmi.n	1ed2 <generic_hfclk_start+0x32>
	__asm__ volatile(
    1ec0:	f381 8811 	msr	BASEPRI, r1
    1ec4:	f3bf 8f6f 	isb	sy
}
    1ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1ecc:	2001      	movs	r0, #1
    1ece:	f003 b8cc 	b.w	506a <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1ed2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1ed6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1eda:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1ede:	07d3      	lsls	r3, r2, #31
    1ee0:	d5ee      	bpl.n	1ec0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    1ee2:	4807      	ldr	r0, [pc, #28]	; (1f00 <generic_hfclk_start+0x60>)
    1ee4:	f002 fe69 	bl	4bba <set_on_state>
    1ee8:	f381 8811 	msr	BASEPRI, r1
    1eec:	f3bf 8f6f 	isb	sy
}
    1ef0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1ef4:	2000      	movs	r0, #0
    1ef6:	f7ff bfa1 	b.w	1e3c <clkstarted_handle.constprop.0>
    1efa:	bf00      	nop
    1efc:	200008ec 	.word	0x200008ec
    1f00:	200008c4 	.word	0x200008c4

00001f04 <api_blocking_start>:
{
    1f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1f06:	2200      	movs	r2, #0
    1f08:	2301      	movs	r3, #1
    1f0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1f0e:	466b      	mov	r3, sp
    1f10:	4a08      	ldr	r2, [pc, #32]	; (1f34 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1f12:	f8cd d000 	str.w	sp, [sp]
    1f16:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1f1a:	f002 febd 	bl	4c98 <api_start>
	if (err < 0) {
    1f1e:	2800      	cmp	r0, #0
    1f20:	db05      	blt.n	1f2e <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1f22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1f26:	2300      	movs	r3, #0
    1f28:	4668      	mov	r0, sp
    1f2a:	f001 fe25 	bl	3b78 <z_impl_k_sem_take>
}
    1f2e:	b005      	add	sp, #20
    1f30:	f85d fb04 	ldr.w	pc, [sp], #4
    1f34:	00004cdd 	.word	0x00004cdd

00001f38 <generic_hfclk_stop>:
{
    1f38:	b510      	push	{r4, lr}
	__asm__ volatile(
    1f3a:	f04f 0320 	mov.w	r3, #32
    1f3e:	f3ef 8411 	mrs	r4, BASEPRI
    1f42:	f383 8812 	msr	BASEPRI_MAX, r3
    1f46:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    1f4a:	4a07      	ldr	r2, [pc, #28]	; (1f68 <generic_hfclk_stop+0x30>)
    1f4c:	6813      	ldr	r3, [r2, #0]
    1f4e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    1f52:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    1f54:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    1f56:	d402      	bmi.n	1f5e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1f58:	2001      	movs	r0, #1
    1f5a:	f003 f8e5 	bl	5128 <nrfx_clock_stop>
	__asm__ volatile(
    1f5e:	f384 8811 	msr	BASEPRI, r4
    1f62:	f3bf 8f6f 	isb	sy
}
    1f66:	bd10      	pop	{r4, pc}
    1f68:	200008ec 	.word	0x200008ec

00001f6c <z_nrf_clock_control_lf_on>:
{
    1f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1f70:	2201      	movs	r2, #1
    1f72:	4607      	mov	r7, r0
    1f74:	4937      	ldr	r1, [pc, #220]	; (2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>)
    1f76:	e8d1 3fef 	ldaex	r3, [r1]
    1f7a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    1f7e:	2800      	cmp	r0, #0
    1f80:	d1f9      	bne.n	1f76 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    1f82:	b933      	cbnz	r3, 1f92 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1f84:	4934      	ldr	r1, [pc, #208]	; (2058 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58>)
		err = onoff_request(mgr, &cli);
    1f86:	4835      	ldr	r0, [pc, #212]	; (205c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5c>)
    1f88:	604b      	str	r3, [r1, #4]
    1f8a:	60cb      	str	r3, [r1, #12]
    1f8c:	608a      	str	r2, [r1, #8]
    1f8e:	f002 fccb 	bl	4928 <onoff_request>
	switch (start_mode) {
    1f92:	1e7b      	subs	r3, r7, #1
    1f94:	2b01      	cmp	r3, #1
    1f96:	d82b      	bhi.n	1ff0 <z_nrf_clock_control_lf_on+0x84>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1f98:	2f01      	cmp	r7, #1
    1f9a:	d107      	bne.n	1fac <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1f9c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1fa0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1fa4:	f003 0303 	and.w	r3, r3, #3
    1fa8:	2b02      	cmp	r3, #2
    1faa:	d021      	beq.n	1ff0 <z_nrf_clock_control_lf_on+0x84>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1fac:	f003 f98e 	bl	52cc <k_is_in_isr>
    1fb0:	4605      	mov	r5, r0
    1fb2:	b9f8      	cbnz	r0, 1ff4 <z_nrf_clock_control_lf_on+0x88>
	return !z_sys_post_kernel;
    1fb4:	4b2a      	ldr	r3, [pc, #168]	; (2060 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x60>)
    1fb6:	781b      	ldrb	r3, [r3, #0]
    1fb8:	b1e3      	cbz	r3, 1ff4 <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
    1fba:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1fbe:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    1fc0:	4606      	mov	r6, r0
    1fc2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1fc6:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1fca:	f8df 8098 	ldr.w	r8, [pc, #152]	; 2064 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x64>
    1fce:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1fd2:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    1fd6:	03d2      	lsls	r2, r2, #15
    1fd8:	d516      	bpl.n	2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1fda:	f003 0303 	and.w	r3, r3, #3
    1fde:	2b02      	cmp	r3, #2
    1fe0:	d001      	beq.n	1fe6 <z_nrf_clock_control_lf_on+0x7a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1fe2:	2f01      	cmp	r7, #1
    1fe4:	d110      	bne.n	2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>
	if (isr_mode) {
    1fe6:	b375      	cbz	r5, 2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
    1fe8:	f386 8811 	msr	BASEPRI, r6
    1fec:	f3bf 8f6f 	isb	sy
}
    1ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    1ff4:	f04f 0320 	mov.w	r3, #32
    1ff8:	f3ef 8611 	mrs	r6, BASEPRI
    1ffc:	f383 8812 	msr	BASEPRI_MAX, r3
    2000:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2004:	2501      	movs	r5, #1
    2006:	e7de      	b.n	1fc6 <z_nrf_clock_control_lf_on+0x5a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2008:	b1c5      	cbz	r5, 203c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    200a:	4630      	mov	r0, r6
    200c:	f7ff fa1c 	bl	1448 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2010:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2014:	b2db      	uxtb	r3, r3
    2016:	2b01      	cmp	r3, #1
    2018:	d1d9      	bne.n	1fce <z_nrf_clock_control_lf_on+0x62>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    201a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    201e:	2a00      	cmp	r2, #0
    2020:	d0d5      	beq.n	1fce <z_nrf_clock_control_lf_on+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2022:	2200      	movs	r2, #0
    2024:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    2028:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    202c:	2202      	movs	r2, #2
    202e:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    2032:	2220      	movs	r2, #32
    2034:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2038:	60a3      	str	r3, [r4, #8]
}
    203a:	e7c8      	b.n	1fce <z_nrf_clock_control_lf_on+0x62>
	return z_impl_k_sleep(timeout);
    203c:	2100      	movs	r1, #0
    203e:	2021      	movs	r0, #33	; 0x21
    2040:	f002 f884 	bl	414c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2044:	e7e4      	b.n	2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>
    p_reg->INTENSET = mask;
    2046:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    204a:	2202      	movs	r2, #2
    204c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2050:	e7ce      	b.n	1ff0 <z_nrf_clock_control_lf_on+0x84>
    2052:	bf00      	nop
    2054:	20000848 	.word	0x20000848
    2058:	20000838 	.word	0x20000838
    205c:	20000868 	.word	0x20000868
    2060:	20000b2d 	.word	0x20000b2d
    2064:	e000e100 	.word	0xe000e100

00002068 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    2068:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    206a:	4807      	ldr	r0, [pc, #28]	; (2088 <uart_console_init+0x20>)
    206c:	f003 f8b7 	bl	51de <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2070:	b138      	cbz	r0, 2082 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    2072:	4806      	ldr	r0, [pc, #24]	; (208c <uart_console_init+0x24>)
    2074:	f7ff fe70 	bl	1d58 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2078:	4804      	ldr	r0, [pc, #16]	; (208c <uart_console_init+0x24>)
    207a:	f7fe fa29 	bl	4d0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    207e:	2000      	movs	r0, #0
}
    2080:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2082:	f06f 0012 	mvn.w	r0, #18
    2086:	e7fb      	b.n	2080 <uart_console_init+0x18>
    2088:	00005548 	.word	0x00005548
    208c:	00002091 	.word	0x00002091

00002090 <console_out>:
	if ('\n' == c) {
    2090:	280a      	cmp	r0, #10
{
    2092:	b538      	push	{r3, r4, r5, lr}
    2094:	4604      	mov	r4, r0
    2096:	4d07      	ldr	r5, [pc, #28]	; (20b4 <console_out+0x24>)
	if ('\n' == c) {
    2098:	d104      	bne.n	20a4 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    209a:	68ab      	ldr	r3, [r5, #8]
    209c:	210d      	movs	r1, #13
    209e:	4628      	mov	r0, r5
    20a0:	685b      	ldr	r3, [r3, #4]
    20a2:	4798      	blx	r3
    20a4:	68ab      	ldr	r3, [r5, #8]
    20a6:	4803      	ldr	r0, [pc, #12]	; (20b4 <console_out+0x24>)
    20a8:	685b      	ldr	r3, [r3, #4]
    20aa:	b2e1      	uxtb	r1, r4
    20ac:	4798      	blx	r3
}
    20ae:	4620      	mov	r0, r4
    20b0:	bd38      	pop	{r3, r4, r5, pc}
    20b2:	bf00      	nop
    20b4:	00005548 	.word	0x00005548

000020b8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    20b8:	b530      	push	{r4, r5, lr}
	return port->config;
    20ba:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    20bc:	f001 041f 	and.w	r4, r1, #31
    20c0:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    20c2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    20c6:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    20c8:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    20cc:	d105      	bne.n	20da <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    20ce:	4620      	mov	r0, r4
    20d0:	f001 f980 	bl	33d4 <nrfx_gpiote_trigger_disable>

		return 0;
    20d4:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    20d6:	b005      	add	sp, #20
    20d8:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    20da:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    20dc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    20e0:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    20e4:	d114      	bne.n	2110 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    20e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    20ea:	bf0c      	ite	eq
    20ec:	2304      	moveq	r3, #4
    20ee:	2305      	movne	r3, #5
    20f0:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    20f4:	2300      	movs	r3, #0
    20f6:	4620      	mov	r0, r4
    20f8:	4619      	mov	r1, r3
    20fa:	aa02      	add	r2, sp, #8
    20fc:	f000 ffa8 	bl	3050 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2100:	4b1f      	ldr	r3, [pc, #124]	; (2180 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    2102:	4298      	cmp	r0, r3
    2104:	d138      	bne.n	2178 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2106:	2101      	movs	r1, #1
    2108:	4620      	mov	r0, r4
    210a:	f001 f91d 	bl	3348 <nrfx_gpiote_trigger_enable>
	return 0;
    210e:	e7e1      	b.n	20d4 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2110:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2114:	d025      	beq.n	2162 <gpio_nrfx_pin_interrupt_configure+0xaa>
    2116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    211a:	bf14      	ite	ne
    211c:	2301      	movne	r3, #1
    211e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2120:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2124:	6883      	ldr	r3, [r0, #8]
    2126:	40cb      	lsrs	r3, r1
    2128:	07d9      	lsls	r1, r3, #31
    212a:	d4e3      	bmi.n	20f4 <gpio_nrfx_pin_interrupt_configure+0x3c>
    212c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2130:	d1e0      	bne.n	20f4 <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    2132:	4a14      	ldr	r2, [pc, #80]	; (2184 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    2134:	4814      	ldr	r0, [pc, #80]	; (2188 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    2136:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
    2138:	2901      	cmp	r1, #1
    213a:	bf08      	it	eq
    213c:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    213e:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2142:	3380      	adds	r3, #128	; 0x80
    2144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2148:	07db      	lsls	r3, r3, #31
    214a:	d4d3      	bmi.n	20f4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    214c:	f10d 0507 	add.w	r5, sp, #7
    2150:	4629      	mov	r1, r5
    2152:	4620      	mov	r0, r4
    2154:	f001 f8a4 	bl	32a0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2158:	4b0c      	ldr	r3, [pc, #48]	; (218c <gpio_nrfx_pin_interrupt_configure+0xd4>)
    215a:	4298      	cmp	r0, r3
    215c:	d003      	beq.n	2166 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    215e:	9503      	str	r5, [sp, #12]
    2160:	e7c8      	b.n	20f4 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2162:	2303      	movs	r3, #3
    2164:	e7dc      	b.n	2120 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    2166:	4628      	mov	r0, r5
    2168:	f001 f8e8 	bl	333c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    216c:	4b04      	ldr	r3, [pc, #16]	; (2180 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    216e:	4298      	cmp	r0, r3
    2170:	d0f5      	beq.n	215e <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
    2172:	f06f 000b 	mvn.w	r0, #11
    2176:	e7ae      	b.n	20d6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    2178:	f06f 0015 	mvn.w	r0, #21
    217c:	e7ab      	b.n	20d6 <gpio_nrfx_pin_interrupt_configure+0x1e>
    217e:	bf00      	nop
    2180:	0bad0000 	.word	0x0bad0000
    2184:	50842500 	.word	0x50842500
    2188:	50842800 	.word	0x50842800
    218c:	0bad0004 	.word	0x0bad0004

00002190 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2190:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2192:	f001 f8c3 	bl	331c <nrfx_gpiote_is_init>
    2196:	4604      	mov	r4, r0
    2198:	b968      	cbnz	r0, 21b6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    219a:	f001 f897 	bl	32cc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    219e:	4b08      	ldr	r3, [pc, #32]	; (21c0 <gpio_nrfx_init+0x30>)
    21a0:	4298      	cmp	r0, r3
    21a2:	d10a      	bne.n	21ba <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    21a4:	4621      	mov	r1, r4
    21a6:	4807      	ldr	r0, [pc, #28]	; (21c4 <gpio_nrfx_init+0x34>)
    21a8:	f001 f874 	bl	3294 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    21ac:	4622      	mov	r2, r4
    21ae:	2105      	movs	r1, #5
    21b0:	200d      	movs	r0, #13
    21b2:	f7ff f98b 	bl	14cc <z_arm_irq_priority_set>
		return 0;
    21b6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    21b8:	bd10      	pop	{r4, pc}
		return -EIO;
    21ba:	f06f 0004 	mvn.w	r0, #4
    21be:	e7fb      	b.n	21b8 <gpio_nrfx_init+0x28>
    21c0:	0bad0000 	.word	0x0bad0000
    21c4:	000021c9 	.word	0x000021c9

000021c8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    21c8:	0942      	lsrs	r2, r0, #5
{
    21ca:	4603      	mov	r3, r0
    21cc:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    21ce:	d002      	beq.n	21d6 <nrfx_gpio_handler+0xe>
    21d0:	2a01      	cmp	r2, #1
    21d2:	d017      	beq.n	2204 <nrfx_gpio_handler+0x3c>
}
    21d4:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    21d6:	4e0d      	ldr	r6, [pc, #52]	; (220c <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    21d8:	6932      	ldr	r2, [r6, #16]
    21da:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    21dc:	2900      	cmp	r1, #0
    21de:	d0f9      	beq.n	21d4 <nrfx_gpio_handler+0xc>
    21e0:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    21e2:	f003 031f 	and.w	r3, r3, #31
    21e6:	680c      	ldr	r4, [r1, #0]
    21e8:	409d      	lsls	r5, r3
    21ea:	2900      	cmp	r1, #0
    21ec:	d0f2      	beq.n	21d4 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    21ee:	688a      	ldr	r2, [r1, #8]
    21f0:	402a      	ands	r2, r5
    21f2:	d002      	beq.n	21fa <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    21f4:	4630      	mov	r0, r6
    21f6:	684b      	ldr	r3, [r1, #4]
    21f8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    21fa:	b12c      	cbz	r4, 2208 <nrfx_gpio_handler+0x40>
    21fc:	6823      	ldr	r3, [r4, #0]
    21fe:	4621      	mov	r1, r4
    2200:	461c      	mov	r4, r3
    2202:	e7f2      	b.n	21ea <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2204:	4e02      	ldr	r6, [pc, #8]	; (2210 <nrfx_gpio_handler+0x48>)
    2206:	e7e7      	b.n	21d8 <nrfx_gpio_handler+0x10>
    2208:	4623      	mov	r3, r4
    220a:	e7f8      	b.n	21fe <nrfx_gpio_handler+0x36>
    220c:	00005530 	.word	0x00005530
    2210:	00005518 	.word	0x00005518

00002214 <gpio_nrfx_pin_configure>:
{
    2214:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    2218:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    221a:	f001 051f 	and.w	r5, r1, #31
    221e:	7b3b      	ldrb	r3, [r7, #12]
{
    2220:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2222:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    2226:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2228:	4628      	mov	r0, r5
    222a:	f10d 0103 	add.w	r1, sp, #3
    222e:	f001 f837 	bl	32a0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2232:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2236:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2238:	d10b      	bne.n	2252 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    223a:	4628      	mov	r0, r5
    223c:	f001 f8f2 	bl	3424 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    2240:	4b3c      	ldr	r3, [pc, #240]	; (2334 <gpio_nrfx_pin_configure+0x120>)
    2242:	4598      	cmp	r8, r3
    2244:	d103      	bne.n	224e <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    2246:	f89d 0003 	ldrb.w	r0, [sp, #3]
    224a:	f001 f871 	bl	3330 <nrfx_gpiote_channel_free>
		return 0;
    224e:	2000      	movs	r0, #0
    2250:	e00c      	b.n	226c <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2252:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2254:	4628      	mov	r0, r5
    2256:	4619      	mov	r1, r3
    2258:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    225a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    225e:	f000 fef7 	bl	3050 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2262:	4b34      	ldr	r3, [pc, #208]	; (2334 <gpio_nrfx_pin_configure+0x120>)
    2264:	4298      	cmp	r0, r3
    2266:	d004      	beq.n	2272 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    2268:	f06f 0015 	mvn.w	r0, #21
}
    226c:	b004      	add	sp, #16
    226e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    2272:	4580      	cmp	r8, r0
    2274:	d103      	bne.n	227e <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    2276:	f89d 0003 	ldrb.w	r0, [sp, #3]
    227a:	f001 f859 	bl	3330 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    227e:	03a3      	lsls	r3, r4, #14
    2280:	d549      	bpl.n	2316 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2282:	f240 3306 	movw	r3, #774	; 0x306
    2286:	4023      	ands	r3, r4
    2288:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    228c:	d019      	beq.n	22c2 <gpio_nrfx_pin_configure+0xae>
    228e:	d80c      	bhi.n	22aa <gpio_nrfx_pin_configure+0x96>
    2290:	2b06      	cmp	r3, #6
    2292:	d017      	beq.n	22c4 <gpio_nrfx_pin_configure+0xb0>
    2294:	d804      	bhi.n	22a0 <gpio_nrfx_pin_configure+0x8c>
    2296:	b1ab      	cbz	r3, 22c4 <gpio_nrfx_pin_configure+0xb0>
    2298:	2b02      	cmp	r3, #2
    229a:	d1e5      	bne.n	2268 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    229c:	2304      	movs	r3, #4
    229e:	e011      	b.n	22c4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    22a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    22a4:	d1e0      	bne.n	2268 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    22a6:	2301      	movs	r3, #1
    22a8:	e00c      	b.n	22c4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    22aa:	f240 2202 	movw	r2, #514	; 0x202
    22ae:	4293      	cmp	r3, r2
    22b0:	d026      	beq.n	2300 <gpio_nrfx_pin_configure+0xec>
    22b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    22b6:	d025      	beq.n	2304 <gpio_nrfx_pin_configure+0xf0>
    22b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    22bc:	d1d4      	bne.n	2268 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    22be:	2302      	movs	r3, #2
    22c0:	e000      	b.n	22c4 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    22c2:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    22c4:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    22c8:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    22cc:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    22d0:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    22d2:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    22d6:	bf4c      	ite	mi
    22d8:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    22da:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    22de:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    22e0:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    22e4:	d510      	bpl.n	2308 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    22e6:	2301      	movs	r3, #1
    22e8:	687a      	ldr	r2, [r7, #4]
    22ea:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    22ec:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    22ee:	2200      	movs	r2, #0
    22f0:	4628      	mov	r0, r5
    22f2:	a901      	add	r1, sp, #4
    22f4:	f000 ff5a 	bl	31ac <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    22f8:	4b0e      	ldr	r3, [pc, #56]	; (2334 <gpio_nrfx_pin_configure+0x120>)
    22fa:	4298      	cmp	r0, r3
    22fc:	d0a7      	beq.n	224e <gpio_nrfx_pin_configure+0x3a>
    22fe:	e7b3      	b.n	2268 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    2300:	2305      	movs	r3, #5
    2302:	e7df      	b.n	22c4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2304:	2303      	movs	r3, #3
    2306:	e7dd      	b.n	22c4 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2308:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    230a:	bf41      	itttt	mi
    230c:	2301      	movmi	r3, #1
    230e:	687a      	ldrmi	r2, [r7, #4]
    2310:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    2312:	60d3      	strmi	r3, [r2, #12]
}
    2314:	e7eb      	b.n	22ee <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    2316:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2318:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    231c:	bf4c      	ite	mi
    231e:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    2320:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2324:	461a      	mov	r2, r3
    2326:	4628      	mov	r0, r5
    2328:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    232a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    232e:	f000 fe8f 	bl	3050 <nrfx_gpiote_input_configure>
    2332:	e7e1      	b.n	22f8 <gpio_nrfx_pin_configure+0xe4>
    2334:	0bad0000 	.word	0x0bad0000

00002338 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2338:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    233c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
    2340:	4e5b      	ldr	r6, [pc, #364]	; (24b0 <pinctrl_configure_pins+0x178>)
    2342:	4f5c      	ldr	r7, [pc, #368]	; (24b4 <pinctrl_configure_pins+0x17c>)
    2344:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2348:	4281      	cmp	r1, r0
    234a:	d102      	bne.n	2352 <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    234c:	2000      	movs	r0, #0
}
    234e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2352:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    2354:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2358:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    235c:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    235e:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    2362:	bf08      	it	eq
    2364:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    2368:	2c22      	cmp	r4, #34	; 0x22
    236a:	f200 809d 	bhi.w	24a8 <pinctrl_configure_pins+0x170>
    236e:	e8df f004 	tbb	[pc, r4]
    2372:	2312      	.short	0x2312
    2374:	3e2b4228 	.word	0x3e2b4228
    2378:	9b9b9b42 	.word	0x9b9b9b42
    237c:	9b72459b 	.word	0x9b72459b
    2380:	9b9b9b9b 	.word	0x9b9b9b9b
    2384:	9b9b9b9b 	.word	0x9b9b9b9b
    2388:	83807d75 	.word	0x83807d75
    238c:	869b9b9b 	.word	0x869b9b9b
    2390:	95928f8c 	.word	0x95928f8c
    2394:	98          	.byte	0x98
    2395:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    2396:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    239a:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
    239e:	f1b8 0f01 	cmp.w	r8, #1
    23a2:	bf14      	ite	ne
    23a4:	46b6      	movne	lr, r6
    23a6:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
    23a8:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    23ac:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
    23b0:	f8ce 4008 	str.w	r4, [lr, #8]
    23b4:	2401      	movs	r4, #1
    23b6:	e002      	b.n	23be <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
    23b8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    23bc:	2400      	movs	r4, #0
    23be:	46a6      	mov	lr, r4
    23c0:	e023      	b.n	240a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    23c2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    23c6:	e7e8      	b.n	239a <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    23c8:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    23ca:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
    23ce:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
    23d2:	f1b9 0f01 	cmp.w	r9, #1
    23d6:	bf14      	ite	ne
    23d8:	46b0      	movne	r8, r6
    23da:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
    23dc:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    23e0:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
    23e4:	f8c8 e00c 	str.w	lr, [r8, #12]
    23e8:	f04f 0e01 	mov.w	lr, #1
    23ec:	e00d      	b.n	240a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    23ee:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    23f2:	2401      	movs	r4, #1
    23f4:	e7eb      	b.n	23ce <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    23f6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    23fa:	e7df      	b.n	23bc <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    23fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2400:	2d00      	cmp	r5, #0
    2402:	d1db      	bne.n	23bc <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2404:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
    2406:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2408:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    240a:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
    240e:	f003 091f 	and.w	r9, r3, #31
    2412:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2416:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
    241a:	ea4f 1353 	mov.w	r3, r3, lsr #5
    241e:	bf1c      	itt	ne
    2420:	2401      	movne	r4, #1
    2422:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
    2426:	2b01      	cmp	r3, #1
    2428:	bf0c      	ite	eq
    242a:	46b8      	moveq	r8, r7
    242c:	46b0      	movne	r8, r6
    242e:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2432:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    2436:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
    243a:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    243e:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2440:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
    2444:	ea43 030e 	orr.w	r3, r3, lr
    2448:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    244c:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
    2450:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2454:	e778      	b.n	2348 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    2456:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    245a:	e7d1      	b.n	2400 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    245c:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    2460:	6804      	ldr	r4, [r0, #0]
    2462:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    2466:	2c00      	cmp	r4, #0
    2468:	d0c3      	beq.n	23f2 <pinctrl_configure_pins+0xba>
    246a:	e796      	b.n	239a <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    246c:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2470:	e7f6      	b.n	2460 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    2472:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    2476:	e7f3      	b.n	2460 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2478:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    247c:	e7f0      	b.n	2460 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    247e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2482:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2484:	f04f 0e00 	mov.w	lr, #0
    2488:	e7bf      	b.n	240a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    248a:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    248e:	e784      	b.n	239a <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    2490:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    2494:	e7f5      	b.n	2482 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    2496:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    249a:	e7f2      	b.n	2482 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    249c:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    24a0:	e7ef      	b.n	2482 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    24a2:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    24a6:	e7ec      	b.n	2482 <pinctrl_configure_pins+0x14a>
		switch (NRF_GET_FUN(pins[i])) {
    24a8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    24ac:	e74f      	b.n	234e <pinctrl_configure_pins+0x16>
    24ae:	bf00      	nop
    24b0:	50842500 	.word	0x50842500
    24b4:	50842800 	.word	0x50842800

000024b8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    24b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    24ba:	794b      	ldrb	r3, [r1, #5]
    24bc:	2b01      	cmp	r3, #1
    24be:	d029      	beq.n	2514 <uarte_nrfx_configure+0x5c>
    24c0:	2b03      	cmp	r3, #3
    24c2:	d124      	bne.n	250e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    24c4:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    24c6:	798b      	ldrb	r3, [r1, #6]
    24c8:	2b03      	cmp	r3, #3
    24ca:	d120      	bne.n	250e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    24cc:	79ce      	ldrb	r6, [r1, #7]
    24ce:	b10e      	cbz	r6, 24d4 <uarte_nrfx_configure+0x1c>
    24d0:	2e01      	cmp	r6, #1
    24d2:	d11c      	bne.n	250e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    24d4:	790a      	ldrb	r2, [r1, #4]
    24d6:	2a01      	cmp	r2, #1
    24d8:	d01e      	beq.n	2518 <uarte_nrfx_configure+0x60>
    24da:	2a02      	cmp	r2, #2
    24dc:	d020      	beq.n	2520 <uarte_nrfx_configure+0x68>
    24de:	b9b2      	cbnz	r2, 250e <uarte_nrfx_configure+0x56>
    24e0:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    24e2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    24e4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    24e6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    24ea:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
    24ee:	d06e      	beq.n	25ce <uarte_nrfx_configure+0x116>
    24f0:	d833      	bhi.n	255a <uarte_nrfx_configure+0xa2>
    24f2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    24f6:	d06d      	beq.n	25d4 <uarte_nrfx_configure+0x11c>
    24f8:	d81c      	bhi.n	2534 <uarte_nrfx_configure+0x7c>
    24fa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    24fe:	d06b      	beq.n	25d8 <uarte_nrfx_configure+0x120>
    2500:	d810      	bhi.n	2524 <uarte_nrfx_configure+0x6c>
    2502:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2506:	d06a      	beq.n	25de <uarte_nrfx_configure+0x126>
    2508:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    250c:	d06a      	beq.n	25e4 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
    250e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2512:	e05b      	b.n	25cc <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
    2514:	2700      	movs	r7, #0
    2516:	e7d6      	b.n	24c6 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    2518:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    251c:	220e      	movs	r2, #14
    251e:	e7e0      	b.n	24e2 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    2520:	2400      	movs	r4, #0
    2522:	e7fb      	b.n	251c <uarte_nrfx_configure+0x64>
	switch (baudrate) {
    2524:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2528:	d05f      	beq.n	25ea <uarte_nrfx_configure+0x132>
    252a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    252e:	d1ee      	bne.n	250e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2530:	4b38      	ldr	r3, [pc, #224]	; (2614 <uarte_nrfx_configure+0x15c>)
    2532:	e03c      	b.n	25ae <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2534:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2538:	d05a      	beq.n	25f0 <uarte_nrfx_configure+0x138>
    253a:	d807      	bhi.n	254c <uarte_nrfx_configure+0x94>
    253c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2540:	d058      	beq.n	25f4 <uarte_nrfx_configure+0x13c>
    2542:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2546:	d1e2      	bne.n	250e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2548:	4b33      	ldr	r3, [pc, #204]	; (2618 <uarte_nrfx_configure+0x160>)
    254a:	e030      	b.n	25ae <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    254c:	f647 2512 	movw	r5, #31250	; 0x7a12
    2550:	42ab      	cmp	r3, r5
    2552:	d1dc      	bne.n	250e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2554:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2558:	e029      	b.n	25ae <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    255a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    255e:	d04b      	beq.n	25f8 <uarte_nrfx_configure+0x140>
    2560:	d813      	bhi.n	258a <uarte_nrfx_configure+0xd2>
    2562:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2566:	d04a      	beq.n	25fe <uarte_nrfx_configure+0x146>
    2568:	d809      	bhi.n	257e <uarte_nrfx_configure+0xc6>
    256a:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    256e:	42ab      	cmp	r3, r5
    2570:	d047      	beq.n	2602 <uarte_nrfx_configure+0x14a>
    2572:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2576:	d1ca      	bne.n	250e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2578:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    257c:	e017      	b.n	25ae <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    257e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2582:	d1c4      	bne.n	250e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2584:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2588:	e011      	b.n	25ae <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    258a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    258e:	d03b      	beq.n	2608 <uarte_nrfx_configure+0x150>
    2590:	d808      	bhi.n	25a4 <uarte_nrfx_configure+0xec>
    2592:	4d22      	ldr	r5, [pc, #136]	; (261c <uarte_nrfx_configure+0x164>)
    2594:	42ab      	cmp	r3, r5
    2596:	d03a      	beq.n	260e <uarte_nrfx_configure+0x156>
    2598:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    259c:	d1b7      	bne.n	250e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    259e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    25a2:	e004      	b.n	25ae <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    25a4:	4d1e      	ldr	r5, [pc, #120]	; (2620 <uarte_nrfx_configure+0x168>)
    25a6:	42ab      	cmp	r3, r5
    25a8:	d1b1      	bne.n	250e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    25aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    25ae:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    25b0:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
    25b4:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
    25b6:	433a      	orrs	r2, r7
    25b8:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    25ba:	4334      	orrs	r4, r6
    25bc:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    25be:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    25c2:	1d2b      	adds	r3, r5, #4
    25c4:	c903      	ldmia	r1, {r0, r1}
    25c6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    25ca:	2000      	movs	r0, #0
}
    25cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    25ce:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    25d2:	e7ec      	b.n	25ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    25d4:	4b13      	ldr	r3, [pc, #76]	; (2624 <uarte_nrfx_configure+0x16c>)
    25d6:	e7ea      	b.n	25ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    25d8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    25dc:	e7e7      	b.n	25ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
    25de:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    25e2:	e7e4      	b.n	25ae <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    25e4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    25e8:	e7e1      	b.n	25ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    25ea:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    25ee:	e7de      	b.n	25ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    25f0:	4b0d      	ldr	r3, [pc, #52]	; (2628 <uarte_nrfx_configure+0x170>)
    25f2:	e7dc      	b.n	25ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    25f4:	4b0d      	ldr	r3, [pc, #52]	; (262c <uarte_nrfx_configure+0x174>)
    25f6:	e7da      	b.n	25ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    25f8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    25fc:	e7d7      	b.n	25ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    25fe:	4b0c      	ldr	r3, [pc, #48]	; (2630 <uarte_nrfx_configure+0x178>)
    2600:	e7d5      	b.n	25ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2602:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2606:	e7d2      	b.n	25ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2608:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    260c:	e7cf      	b.n	25ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    260e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2612:	e7cc      	b.n	25ae <uarte_nrfx_configure+0xf6>
    2614:	0013b000 	.word	0x0013b000
    2618:	004ea000 	.word	0x004ea000
    261c:	0003d090 	.word	0x0003d090
    2620:	000f4240 	.word	0x000f4240
    2624:	00275000 	.word	0x00275000
    2628:	0075c000 	.word	0x0075c000
    262c:	003af000 	.word	0x003af000
    2630:	013a9000 	.word	0x013a9000

00002634 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    2634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2638:	4680      	mov	r8, r0
    263a:	2200      	movs	r2, #0
    263c:	2101      	movs	r1, #1
    263e:	2008      	movs	r0, #8
    2640:	f7fe ff44 	bl	14cc <z_arm_irq_priority_set>
    2644:	2008      	movs	r0, #8
    2646:	f7fe ff11 	bl	146c <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    264a:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    264c:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    2650:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    2654:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2656:	aa01      	add	r2, sp, #4
    2658:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    265c:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2660:	f8d7 900c 	ldr.w	r9, [r7, #12]
    2664:	4648      	mov	r0, r9
    2666:	f002 fb89 	bl	4d7c <pinctrl_lookup_state>
	if (ret < 0) {
    266a:	1e05      	subs	r5, r0, #0
    266c:	db4d      	blt.n	270a <uarte_0_init+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    266e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2670:	f8d9 2000 	ldr.w	r2, [r9]
    2674:	7919      	ldrb	r1, [r3, #4]
    2676:	6818      	ldr	r0, [r3, #0]
    2678:	f7ff fe5e 	bl	2338 <pinctrl_configure_pins>
	if (err < 0) {
    267c:	1e05      	subs	r5, r0, #0
    267e:	db44      	blt.n	270a <uarte_0_init+0xd6>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    2680:	4640      	mov	r0, r8
    2682:	1d31      	adds	r1, r6, #4
    2684:	f7ff ff18 	bl	24b8 <uarte_nrfx_configure>
	if (err) {
    2688:	4605      	mov	r5, r0
    268a:	2800      	cmp	r0, #0
    268c:	d13d      	bne.n	270a <uarte_0_init+0xd6>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    268e:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2690:	0799      	lsls	r1, r3, #30
    2692:	d513      	bpl.n	26bc <uarte_0_init+0x88>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2694:	f106 0018 	add.w	r0, r6, #24
    2698:	f000 fc54 	bl	2f44 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    269c:	4b1e      	ldr	r3, [pc, #120]	; (2718 <uarte_0_init+0xe4>)
    269e:	4298      	cmp	r0, r3
    26a0:	d137      	bne.n	2712 <uarte_0_init+0xde>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    26a2:	7e33      	ldrb	r3, [r6, #24]
    26a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    26a8:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    26ac:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    26b0:	2301      	movs	r3, #1
    26b2:	7e32      	ldrb	r2, [r6, #24]
    26b4:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    26b6:	4a19      	ldr	r2, [pc, #100]	; (271c <uarte_0_init+0xe8>)
    26b8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    26bc:	2308      	movs	r3, #8
    26be:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    26c2:	7a3b      	ldrb	r3, [r7, #8]
    26c4:	b953      	cbnz	r3, 26dc <uarte_0_init+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26c6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    26ca:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    26ce:	6973      	ldr	r3, [r6, #20]
    26d0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    26d4:	2301      	movs	r3, #1
    26d6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26da:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    26dc:	687b      	ldr	r3, [r7, #4]
    26de:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    26e0:	bf5c      	itt	pl
    26e2:	f44f 7380 	movpl.w	r3, #256	; 0x100
    26e6:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    26ea:	687b      	ldr	r3, [r7, #4]
    26ec:	06db      	lsls	r3, r3, #27
    26ee:	bf44      	itt	mi
    26f0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    26f4:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    26f8:	6933      	ldr	r3, [r6, #16]
    26fa:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    26fe:	2300      	movs	r3, #0
    2700:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2704:	2301      	movs	r3, #1
    2706:	60a3      	str	r3, [r4, #8]
    2708:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    270a:	4628      	mov	r0, r5
    270c:	b003      	add	sp, #12
    270e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    2712:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    2716:	e7f8      	b.n	270a <uarte_0_init+0xd6>
    2718:	0bad0000 	.word	0x0bad0000
    271c:	50017000 	.word	0x50017000

00002720 <uarte_nrfx_poll_out>:
{
    2720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2722:	4604      	mov	r4, r0
    2724:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    2726:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2728:	f002 fdd0 	bl	52cc <k_is_in_isr>
    272c:	b9b0      	cbnz	r0, 275c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    272e:	4b2e      	ldr	r3, [pc, #184]	; (27e8 <uarte_nrfx_poll_out+0xc8>)
    2730:	781b      	ldrb	r3, [r3, #0]
    2732:	b19b      	cbz	r3, 275c <uarte_nrfx_poll_out+0x3c>
{
    2734:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2736:	6860      	ldr	r0, [r4, #4]
    2738:	f002 fb56 	bl	4de8 <is_tx_ready.isra.0>
    273c:	bb00      	cbnz	r0, 2780 <uarte_nrfx_poll_out+0x60>
    273e:	2001      	movs	r0, #1
    2740:	f002 fbbc 	bl	4ebc <nrfx_busy_wait>
    2744:	3e01      	subs	r6, #1
    2746:	d1f6      	bne.n	2736 <uarte_nrfx_poll_out+0x16>
    2748:	2100      	movs	r1, #0
    274a:	2021      	movs	r0, #33	; 0x21
    274c:	f001 fcfe 	bl	414c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2750:	e7f0      	b.n	2734 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    2752:	f386 8811 	msr	BASEPRI, r6
    2756:	f3bf 8f6f 	isb	sy
}
    275a:	e7f5      	b.n	2748 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    275c:	f04f 0320 	mov.w	r3, #32
    2760:	f3ef 8611 	mrs	r6, BASEPRI
    2764:	f383 8812 	msr	BASEPRI_MAX, r3
    2768:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    276c:	6860      	ldr	r0, [r4, #4]
    276e:	4631      	mov	r1, r6
    2770:	f002 fb3a 	bl	4de8 <is_tx_ready.isra.0>
    2774:	b990      	cbnz	r0, 279c <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    2776:	f386 8811 	msr	BASEPRI, r6
    277a:	f3bf 8f6f 	isb	sy
}
    277e:	e7ed      	b.n	275c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    2780:	f04f 0320 	mov.w	r3, #32
    2784:	f3ef 8611 	mrs	r6, BASEPRI
    2788:	f383 8812 	msr	BASEPRI_MAX, r3
    278c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2790:	6860      	ldr	r0, [r4, #4]
    2792:	4631      	mov	r1, r6
    2794:	f002 fb28 	bl	4de8 <is_tx_ready.isra.0>
    2798:	2800      	cmp	r0, #0
    279a:	d0da      	beq.n	2752 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    279c:	693b      	ldr	r3, [r7, #16]
    279e:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    27a0:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    27a2:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    27a4:	6813      	ldr	r3, [r2, #0]
    27a6:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    27aa:	2001      	movs	r0, #1
    27ac:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    27b0:	2000      	movs	r0, #0
    27b2:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    27b6:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    27ba:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    27be:	6852      	ldr	r2, [r2, #4]
    27c0:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    27c4:	06d2      	lsls	r2, r2, #27
    27c6:	d508      	bpl.n	27da <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    27c8:	2008      	movs	r0, #8
	return config->uarte_regs;
    27ca:	6862      	ldr	r2, [r4, #4]
    27cc:	6812      	ldr	r2, [r2, #0]
    27ce:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    27d2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    27d6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    27da:	2201      	movs	r2, #1
    27dc:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    27de:	f381 8811 	msr	BASEPRI, r1
    27e2:	f3bf 8f6f 	isb	sy
}
    27e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27e8:	20000b2d 	.word	0x20000b2d

000027ec <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    27ec:	2301      	movs	r3, #1
    27ee:	4083      	lsls	r3, r0
{
    27f0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    27f2:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    27f4:	4a0b      	ldr	r2, [pc, #44]	; (2824 <compare_int_lock+0x38>)
    27f6:	e8d2 1fef 	ldaex	r1, [r2]
    27fa:	ea01 0504 	and.w	r5, r1, r4
    27fe:	e8c2 5fe6 	stlex	r6, r5, [r2]
    2802:	2e00      	cmp	r6, #0
    2804:	d1f7      	bne.n	27f6 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2806:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    280a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    280c:	4806      	ldr	r0, [pc, #24]	; (2828 <compare_int_lock+0x3c>)
    280e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2812:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2816:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    281a:	420b      	tst	r3, r1
}
    281c:	bf14      	ite	ne
    281e:	2001      	movne	r0, #1
    2820:	2000      	moveq	r0, #0
    2822:	bd70      	pop	{r4, r5, r6, pc}
    2824:	2000090c 	.word	0x2000090c
    2828:	50015000 	.word	0x50015000

0000282c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    282c:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    282e:	490e      	ldr	r1, [pc, #56]	; (2868 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    2830:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    2834:	e9d1 3400 	ldrd	r3, r4, [r1]
    2838:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    283a:	18c3      	adds	r3, r0, r3
    283c:	f144 0400 	adc.w	r4, r4, #0
    2840:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2844:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2848:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    284c:	d209      	bcs.n	2862 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    284e:	4b07      	ldr	r3, [pc, #28]	; (286c <sys_clock_timeout_handler+0x40>)
    2850:	681b      	ldr	r3, [r3, #0]
    2852:	0a1a      	lsrs	r2, r3, #8
    2854:	061b      	lsls	r3, r3, #24
    2856:	199c      	adds	r4, r3, r6
    2858:	4b05      	ldr	r3, [pc, #20]	; (2870 <sys_clock_timeout_handler+0x44>)
    285a:	f142 0500 	adc.w	r5, r2, #0
    285e:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    2862:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    2864:	f001 bdc8 	b.w	43f8 <sys_clock_announce>
    2868:	200001a0 	.word	0x200001a0
    286c:	20000910 	.word	0x20000910
    2870:	200001a8 	.word	0x200001a8

00002874 <compare_int_unlock>:
	if (key) {
    2874:	b1d9      	cbz	r1, 28ae <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    2876:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2878:	4a0d      	ldr	r2, [pc, #52]	; (28b0 <compare_int_unlock+0x3c>)
    287a:	4083      	lsls	r3, r0
    287c:	e8d2 cfef 	ldaex	ip, [r2]
    2880:	ea4c 0c03 	orr.w	ip, ip, r3
    2884:	e8c2 cfe1 	stlex	r1, ip, [r2]
    2888:	2900      	cmp	r1, #0
    288a:	d1f7      	bne.n	287c <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    288c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    2890:	4a08      	ldr	r2, [pc, #32]	; (28b4 <compare_int_unlock+0x40>)
    2892:	4083      	lsls	r3, r0
    2894:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2898:	4b07      	ldr	r3, [pc, #28]	; (28b8 <compare_int_unlock+0x44>)
    289a:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    289e:	40c3      	lsrs	r3, r0
    28a0:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28a2:	bf42      	ittt	mi
    28a4:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    28a8:	4b04      	ldrmi	r3, [pc, #16]	; (28bc <compare_int_unlock+0x48>)
    28aa:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    28ae:	4770      	bx	lr
    28b0:	2000090c 	.word	0x2000090c
    28b4:	50015000 	.word	0x50015000
    28b8:	20000908 	.word	0x20000908
    28bc:	e000e100 	.word	0xe000e100

000028c0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    28c0:	4b0d      	ldr	r3, [pc, #52]	; (28f8 <z_nrf_rtc_timer_read+0x38>)
    28c2:	6818      	ldr	r0, [r3, #0]
    28c4:	0a01      	lsrs	r1, r0, #8
    28c6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    28c8:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    28cc:	4b0b      	ldr	r3, [pc, #44]	; (28fc <z_nrf_rtc_timer_read+0x3c>)
    28ce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    28d2:	1818      	adds	r0, r3, r0
    28d4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    28d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    28dc:	d20a      	bcs.n	28f4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    28de:	4b08      	ldr	r3, [pc, #32]	; (2900 <z_nrf_rtc_timer_read+0x40>)
    28e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    28e4:	4290      	cmp	r0, r2
    28e6:	eb71 0303 	sbcs.w	r3, r1, r3
    28ea:	d203      	bcs.n	28f4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    28ec:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    28f0:	f141 0100 	adc.w	r1, r1, #0
}
    28f4:	4770      	bx	lr
    28f6:	bf00      	nop
    28f8:	20000910 	.word	0x20000910
    28fc:	50015000 	.word	0x50015000
    2900:	200001a8 	.word	0x200001a8

00002904 <compare_set>:
{
    2904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2908:	4616      	mov	r6, r2
    290a:	461f      	mov	r7, r3
    290c:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    290e:	f7ff ff6d 	bl	27ec <compare_int_lock>
    2912:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2914:	f7ff ffd4 	bl	28c0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2918:	42b0      	cmp	r0, r6
    291a:	eb71 0307 	sbcs.w	r3, r1, r7
    291e:	d250      	bcs.n	29c2 <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    2920:	4b38      	ldr	r3, [pc, #224]	; (2a04 <compare_set+0x100>)
    2922:	1a30      	subs	r0, r6, r0
    2924:	eb67 0101 	sbc.w	r1, r7, r1
    2928:	4298      	cmp	r0, r3
    292a:	f171 0100 	sbcs.w	r1, r1, #0
    292e:	d265      	bcs.n	29fc <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    2930:	4b35      	ldr	r3, [pc, #212]	; (2a08 <compare_set+0x104>)
    2932:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2936:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    293a:	429f      	cmp	r7, r3
    293c:	bf08      	it	eq
    293e:	4296      	cmpeq	r6, r2
    2940:	d049      	beq.n	29d6 <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2942:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2946:	4931      	ldr	r1, [pc, #196]	; (2a0c <compare_set+0x108>)
    2948:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    294c:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    294e:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    2952:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    2956:	f002 fa91 	bl	4e7c <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    295a:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    295e:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2960:	f104 0550 	add.w	r5, r4, #80	; 0x50
    2964:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2966:	b2ad      	uxth	r5, r5
    2968:	f105 2550 	add.w	r5, r5, #1342197760	; 0x50005000
    p_reg->CC[ch] = cc_val;
    296c:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2970:	4a27      	ldr	r2, [pc, #156]	; (2a10 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2972:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    p_reg->CC[ch] = cc_val;
    2976:	9301      	str	r3, [sp, #4]
    2978:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    297c:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    2980:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    2984:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    2988:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    298c:	eba0 0008 	sub.w	r0, r0, r8
    2990:	3803      	subs	r0, #3
    2992:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2996:	4290      	cmp	r0, r2
    2998:	d91d      	bls.n	29d6 <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    299a:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    299c:	b160      	cbz	r0, 29b8 <compare_set+0xb4>
     return p_reg->COUNTER;
    299e:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    29a2:	eba8 000b 	sub.w	r0, r8, fp
    29a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    29aa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    29ae:	d912      	bls.n	29d6 <compare_set+0xd2>
					event_clear(chan);
    29b0:	4620      	mov	r0, r4
    29b2:	f002 fa63 	bl	4e7c <event_clear>
    29b6:	4a16      	ldr	r2, [pc, #88]	; (2a10 <compare_set+0x10c>)
			cc_val = now + cc_inc;
    29b8:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    29bc:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    29c0:	e7da      	b.n	2978 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    29c2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    29c4:	4a13      	ldr	r2, [pc, #76]	; (2a14 <compare_set+0x110>)
    29c6:	40a3      	lsls	r3, r4
    29c8:	e8d2 0fef 	ldaex	r0, [r2]
    29cc:	4318      	orrs	r0, r3
    29ce:	e8c2 0fe1 	stlex	r1, r0, [r2]
    29d2:	2900      	cmp	r1, #0
    29d4:	d1f8      	bne.n	29c8 <compare_set+0xc4>
	return ret;
    29d6:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    29d8:	490b      	ldr	r1, [pc, #44]	; (2a08 <compare_set+0x104>)
	cc_data[chan].callback = handler;
    29da:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    29dc:	0123      	lsls	r3, r4, #4
    29de:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    29e2:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    29e4:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    29e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    29ea:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    29ec:	4620      	mov	r0, r4
    29ee:	9900      	ldr	r1, [sp, #0]
    29f0:	f7ff ff40 	bl	2874 <compare_int_unlock>
}
    29f4:	4628      	mov	r0, r5
    29f6:	b003      	add	sp, #12
    29f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    29fc:	f06f 0515 	mvn.w	r5, #21
    2a00:	e7f4      	b.n	29ec <compare_set+0xe8>
    2a02:	bf00      	nop
    2a04:	00800001 	.word	0x00800001
    2a08:	20000190 	.word	0x20000190
    2a0c:	50015000 	.word	0x50015000
    2a10:	007ffffd 	.word	0x007ffffd
    2a14:	20000908 	.word	0x20000908

00002a18 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    2a18:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    2a1a:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2a1c:	f04f 30ff 	mov.w	r0, #4294967295
    2a20:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
    2a24:	4c18      	ldr	r4, [pc, #96]	; (2a88 <sys_clock_driver_init+0x70>)
    2a26:	4b19      	ldr	r3, [pc, #100]	; (2a8c <sys_clock_driver_init+0x74>)
    p_reg->INTENSET = mask;
    2a28:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    2a2a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    2a2e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    2a32:	4b17      	ldr	r3, [pc, #92]	; (2a90 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    2a34:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    2a38:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2a3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2a44:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    2a48:	4b12      	ldr	r3, [pc, #72]	; (2a94 <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2a4a:	2101      	movs	r1, #1
    2a4c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    2a50:	2015      	movs	r0, #21
    2a52:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2a56:	462a      	mov	r2, r5
    2a58:	f7fe fd38 	bl	14cc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2a5c:	2015      	movs	r0, #21
    2a5e:	f7fe fd05 	bl	146c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2a62:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2a64:	4a0c      	ldr	r2, [pc, #48]	; (2a98 <sys_clock_driver_init+0x80>)
    2a66:	60a3      	str	r3, [r4, #8]
    2a68:	6023      	str	r3, [r4, #0]
    2a6a:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2a6c:	4b0b      	ldr	r3, [pc, #44]	; (2a9c <sys_clock_driver_init+0x84>)
    2a6e:	4a0c      	ldr	r2, [pc, #48]	; (2aa0 <sys_clock_driver_init+0x88>)
    2a70:	9300      	str	r3, [sp, #0]
    2a72:	4628      	mov	r0, r5
    2a74:	2300      	movs	r3, #0
    2a76:	9501      	str	r5, [sp, #4]
    2a78:	f7ff ff44 	bl	2904 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2a7c:	4630      	mov	r0, r6
    2a7e:	f7ff fa75 	bl	1f6c <z_nrf_clock_control_lf_on>

	return 0;
}
    2a82:	4628      	mov	r0, r5
    2a84:	b002      	add	sp, #8
    2a86:	bd70      	pop	{r4, r5, r6, pc}
    2a88:	50015000 	.word	0x50015000
    2a8c:	000f0003 	.word	0x000f0003
    2a90:	20000190 	.word	0x20000190
    2a94:	e000e100 	.word	0xe000e100
    2a98:	2000090c 	.word	0x2000090c
    2a9c:	0000282d 	.word	0x0000282d
    2aa0:	007fffff 	.word	0x007fffff

00002aa4 <rtc_nrf_isr>:
{
    2aa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    2aa8:	4b2e      	ldr	r3, [pc, #184]	; (2b64 <rtc_nrf_isr+0xc0>)
    2aaa:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2aae:	0790      	lsls	r0, r2, #30
    2ab0:	d50b      	bpl.n	2aca <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2ab2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    2ab6:	b142      	cbz	r2, 2aca <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2ab8:	2200      	movs	r2, #0
    2aba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    2abe:	4a2a      	ldr	r2, [pc, #168]	; (2b68 <rtc_nrf_isr+0xc4>)
    2ac0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2ac4:	6813      	ldr	r3, [r2, #0]
    2ac6:	3301      	adds	r3, #1
    2ac8:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    2aca:	4a26      	ldr	r2, [pc, #152]	; (2b64 <rtc_nrf_isr+0xc0>)
    2acc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2ad0:	03d9      	lsls	r1, r3, #15
    2ad2:	d527      	bpl.n	2b24 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2ad4:	4b25      	ldr	r3, [pc, #148]	; (2b6c <rtc_nrf_isr+0xc8>)
    2ad6:	e8d3 1fef 	ldaex	r1, [r3]
    2ada:	f021 0001 	bic.w	r0, r1, #1
    2ade:	e8c3 0fe4 	stlex	r4, r0, [r3]
    2ae2:	2c00      	cmp	r4, #0
    2ae4:	d1f7      	bne.n	2ad6 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    2ae6:	07cb      	lsls	r3, r1, #31
    2ae8:	d402      	bmi.n	2af0 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2aea:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    2aee:	b1cb      	cbz	r3, 2b24 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2af0:	2500      	movs	r5, #0
    2af2:	4c1c      	ldr	r4, [pc, #112]	; (2b64 <rtc_nrf_isr+0xc0>)
    2af4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2af8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    2afc:	f7ff fee0 	bl	28c0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2b00:	f04f 0320 	mov.w	r3, #32
    2b04:	f3ef 8211 	mrs	r2, BASEPRI
    2b08:	f383 8812 	msr	BASEPRI_MAX, r3
    2b0c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2b10:	4b17      	ldr	r3, [pc, #92]	; (2b70 <rtc_nrf_isr+0xcc>)
    2b12:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    2b16:	42b0      	cmp	r0, r6
    2b18:	41b9      	sbcs	r1, r7
    2b1a:	d206      	bcs.n	2b2a <rtc_nrf_isr+0x86>
	__asm__ volatile(
    2b1c:	f382 8811 	msr	BASEPRI, r2
    2b20:	f3bf 8f6f 	isb	sy
}
    2b24:	b003      	add	sp, #12
    2b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2b2a:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    2b2e:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2b32:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    2b36:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2b38:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    2b3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b40:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2b44:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2b48:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2b4c:	f382 8811 	msr	BASEPRI, r2
    2b50:	f3bf 8f6f 	isb	sy
		if (handler) {
    2b54:	2900      	cmp	r1, #0
    2b56:	d0e5      	beq.n	2b24 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    2b58:	9000      	str	r0, [sp, #0]
    2b5a:	4632      	mov	r2, r6
    2b5c:	463b      	mov	r3, r7
    2b5e:	4628      	mov	r0, r5
    2b60:	4788      	blx	r1
    2b62:	e7df      	b.n	2b24 <rtc_nrf_isr+0x80>
    2b64:	50015000 	.word	0x50015000
    2b68:	20000910 	.word	0x20000910
    2b6c:	20000908 	.word	0x20000908
    2b70:	20000190 	.word	0x20000190

00002b74 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    2b74:	1c43      	adds	r3, r0, #1
{
    2b76:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    2b78:	d021      	beq.n	2bbe <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2b7a:	2801      	cmp	r0, #1
    2b7c:	dd21      	ble.n	2bc2 <sys_clock_set_timeout+0x4e>
    2b7e:	4a12      	ldr	r2, [pc, #72]	; (2bc8 <sys_clock_set_timeout+0x54>)
    2b80:	4b12      	ldr	r3, [pc, #72]	; (2bcc <sys_clock_set_timeout+0x58>)
    2b82:	4290      	cmp	r0, r2
    2b84:	bfd4      	ite	le
    2b86:	4604      	movle	r4, r0
    2b88:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2b8a:	f7ff fe99 	bl	28c0 <z_nrf_rtc_timer_read>
    2b8e:	4b10      	ldr	r3, [pc, #64]	; (2bd0 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    2b90:	490e      	ldr	r1, [pc, #56]	; (2bcc <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2b92:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b96:	1a80      	subs	r0, r0, r2
		cyc = 0;
    2b98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2b9c:	bf28      	it	cs
    2b9e:	2400      	movcs	r4, #0
	cyc += unannounced;
    2ba0:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    2ba2:	428c      	cmp	r4, r1
    2ba4:	bf28      	it	cs
    2ba6:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    2ba8:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2baa:	490a      	ldr	r1, [pc, #40]	; (2bd4 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    2bac:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2bae:	9001      	str	r0, [sp, #4]
    2bb0:	9100      	str	r1, [sp, #0]
    2bb2:	f143 0300 	adc.w	r3, r3, #0
    2bb6:	f7ff fea5 	bl	2904 <compare_set>
}
    2bba:	b002      	add	sp, #8
    2bbc:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    2bbe:	4c03      	ldr	r4, [pc, #12]	; (2bcc <sys_clock_set_timeout+0x58>)
    2bc0:	e7e3      	b.n	2b8a <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2bc2:	2401      	movs	r4, #1
    2bc4:	e7e1      	b.n	2b8a <sys_clock_set_timeout+0x16>
    2bc6:	bf00      	nop
    2bc8:	007ffffe 	.word	0x007ffffe
    2bcc:	007fffff 	.word	0x007fffff
    2bd0:	200001a0 	.word	0x200001a0
    2bd4:	0000282d 	.word	0x0000282d

00002bd8 <sys_clock_elapsed>:
{
    2bd8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2bda:	f7ff fe71 	bl	28c0 <z_nrf_rtc_timer_read>
    2bde:	4b02      	ldr	r3, [pc, #8]	; (2be8 <sys_clock_elapsed+0x10>)
    2be0:	681b      	ldr	r3, [r3, #0]
}
    2be2:	1ac0      	subs	r0, r0, r3
    2be4:	bd08      	pop	{r3, pc}
    2be6:	bf00      	nop
    2be8:	200001a0 	.word	0x200001a0

00002bec <sys_clock_disable>:
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2bec:	2301      	movs	r3, #1
{
    2bee:	b510      	push	{r4, lr}
    2bf0:	4c07      	ldr	r4, [pc, #28]	; (2c10 <sys_clock_disable+0x24>)
	irq_disable(RTC_IRQn);
    2bf2:	2015      	movs	r0, #21
    2bf4:	6063      	str	r3, [r4, #4]
    2bf6:	f7fe fc47 	bl	1488 <arch_irq_disable>
    2bfa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->INTENCLR = mask;
    2bfe:	4b05      	ldr	r3, [pc, #20]	; (2c14 <sys_clock_disable+0x28>)
    2c00:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    2c04:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    2c08:	4b03      	ldr	r3, [pc, #12]	; (2c18 <sys_clock_disable+0x2c>)
    2c0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    2c0e:	bd10      	pop	{r4, pc}
    2c10:	50015000 	.word	0x50015000
    2c14:	000f0003 	.word	0x000f0003
    2c18:	e000e100 	.word	0xe000e100

00002c1c <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2c1c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2c20:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2c24:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2c28:	2a07      	cmp	r2, #7
    2c2a:	d105      	bne.n	2c38 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    2c2c:	3b02      	subs	r3, #2
    2c2e:	2b03      	cmp	r3, #3
    2c30:	d802      	bhi.n	2c38 <nrf53_errata_42+0x1c>
    2c32:	4a02      	ldr	r2, [pc, #8]	; (2c3c <nrf53_errata_42+0x20>)
    2c34:	5cd0      	ldrb	r0, [r2, r3]
    2c36:	4770      	bx	lr
                    {
                        case 0x02ul:
                            return true;
                        case 0x03ul:
                            return false;
    2c38:	2000      	movs	r0, #0
                }
            #endif
        #endif
        return false;
    #endif
}
    2c3a:	4770      	bx	lr
    2c3c:	00005b9f 	.word	0x00005b9f

00002c40 <SystemInit>:
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}

void SystemInit(void)
{
    2c40:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    2c42:	f7ff ffeb 	bl	2c1c <nrf53_errata_42>
    2c46:	b158      	cbz	r0, 2c60 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    2c48:	4b64      	ldr	r3, [pc, #400]	; (2ddc <SystemInit+0x19c>)
    2c4a:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    2c4e:	b93a      	cbnz	r2, 2c60 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    2c50:	210d      	movs	r1, #13
    2c52:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    2c56:	2101      	movs	r1, #1
    2c58:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    2c5c:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    2c60:	2200      	movs	r2, #0
    2c62:	00d3      	lsls	r3, r2, #3
    2c64:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2c68:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    2c6c:	3101      	adds	r1, #1
    2c6e:	d007      	beq.n	2c80 <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2c70:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2c74:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2c76:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2c7a:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2c7c:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2c7e:	d1f0      	bne.n	2c62 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2c80:	f7ff ffcc 	bl	2c1c <nrf53_errata_42>
    2c84:	2800      	cmp	r0, #0
    2c86:	f040 80a0 	bne.w	2dca <SystemInit+0x18a>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    2c8a:	f7ff ffc7 	bl	2c1c <nrf53_errata_42>
    2c8e:	b140      	cbz	r0, 2ca2 <SystemInit+0x62>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2c90:	4b53      	ldr	r3, [pc, #332]	; (2de0 <SystemInit+0x1a0>)
    2c92:	4a54      	ldr	r2, [pc, #336]	; (2de4 <SystemInit+0x1a4>)
    2c94:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    2c98:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c9c:	2201      	movs	r2, #1
    2c9e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2ca2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2ca6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2caa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2cae:	2a07      	cmp	r2, #7
    2cb0:	d109      	bne.n	2cc6 <SystemInit+0x86>
                {
                    switch(var2)
    2cb2:	3b02      	subs	r3, #2
    2cb4:	2b03      	cmp	r3, #3
    2cb6:	d806      	bhi.n	2cc6 <SystemInit+0x86>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    2cb8:	4a4b      	ldr	r2, [pc, #300]	; (2de8 <SystemInit+0x1a8>)
    2cba:	5cd3      	ldrb	r3, [r2, r3]
    2cbc:	b11b      	cbz	r3, 2cc6 <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    2cbe:	2200      	movs	r2, #0
    2cc0:	4b4a      	ldr	r3, [pc, #296]	; (2dec <SystemInit+0x1ac>)
    2cc2:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    2cc6:	f7ff ffa9 	bl	2c1c <nrf53_errata_42>
    2cca:	b150      	cbz	r0, 2ce2 <SystemInit+0xa2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    2ccc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cd0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2cd4:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    2cd6:	bf42      	ittt	mi
    2cd8:	2200      	movmi	r2, #0
    2cda:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2cde:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2ce2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2ce6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2cea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    2cee:	2a07      	cmp	r2, #7
    2cf0:	d109      	bne.n	2d06 <SystemInit+0xc6>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    2cf2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cf6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2cfa:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    2cfc:	bf44      	itt	mi
    2cfe:	f06f 0201 	mvnmi.w	r2, #1
    2d02:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    2d06:	f7ff ff89 	bl	2c1c <nrf53_errata_42>
    2d0a:	b118      	cbz	r0, 2d14 <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    2d0c:	2265      	movs	r2, #101	; 0x65
    2d0e:	4b33      	ldr	r3, [pc, #204]	; (2ddc <SystemInit+0x19c>)
    2d10:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2d14:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2d18:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2d1c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    2d20:	2a07      	cmp	r2, #7
    2d22:	d116      	bne.n	2d52 <SystemInit+0x112>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    2d24:	4b31      	ldr	r3, [pc, #196]	; (2dec <SystemInit+0x1ac>)
    2d26:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	da11      	bge.n	2d52 <SystemInit+0x112>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    2d2e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d32:	2203      	movs	r2, #3
    2d34:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    2d38:	2201      	movs	r2, #1
    2d3a:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    2d3c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    2d40:	2a00      	cmp	r2, #0
    2d42:	d0fb      	beq.n	2d3c <SystemInit+0xfc>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    2d44:	2200      	movs	r2, #0
    2d46:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    2d4a:	2201      	movs	r2, #1
    2d4c:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    2d4e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2d52:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2d56:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2d5a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    2d5e:	2a07      	cmp	r2, #7
    2d60:	d123      	bne.n	2daa <SystemInit+0x16a>
                {
                    switch(var2)
    2d62:	3b02      	subs	r3, #2
    2d64:	2b03      	cmp	r3, #3
    2d66:	d802      	bhi.n	2d6e <SystemInit+0x12e>
            }
        }

        if (nrf53_errata_160())
    2d68:	4a21      	ldr	r2, [pc, #132]	; (2df0 <SystemInit+0x1b0>)
    2d6a:	5cd3      	ldrb	r3, [r2, r3]
    2d6c:	b1eb      	cbz	r3, 2daa <SystemInit+0x16a>
        {
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    2d6e:	227e      	movs	r2, #126	; 0x7e
    2d70:	4b1a      	ldr	r3, [pc, #104]	; (2ddc <SystemInit+0x19c>)
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    2d72:	491b      	ldr	r1, [pc, #108]	; (2de0 <SystemInit+0x1a0>)
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    2d74:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
    2d78:	f8c3 293c 	str.w	r2, [r3, #2364]	; 0x93c
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
    2d7c:	237f      	movs	r3, #127	; 0x7f
    2d7e:	4a1d      	ldr	r2, [pc, #116]	; (2df4 <SystemInit+0x1b4>)
    2d80:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    2d84:	2300      	movs	r3, #0
    2d86:	f8c1 3e04 	str.w	r3, [r1, #3588]	; 0xe04
            *((volatile uint32_t *)0x50039E08) = 0x0ul;
    2d8a:	f8c1 3e08 	str.w	r3, [r1, #3592]	; 0xe08
            *((volatile uint32_t *)0x50101110) = 0x0ul;
    2d8e:	f501 2148 	add.w	r1, r1, #819200	; 0xc8000
    2d92:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
            *((volatile uint32_t *)0x50002124) = 0x0ul;
    2d96:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
            *((volatile uint32_t *)0x5000212C) = 0x0ul;
    2d9a:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
            *((volatile uint32_t *)0x502012A0) = 0x0ul;
    2d9e:	f502 12ff 	add.w	r2, r2, #2088960	; 0x1fe000
    2da2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2da6:	f8c2 32a0 	str.w	r3, [r2, #672]	; 0x2a0

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2daa:	4a13      	ldr	r2, [pc, #76]	; (2df8 <SystemInit+0x1b8>)
    2dac:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2db0:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2db4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2db8:	4a10      	ldr	r2, [pc, #64]	; (2dfc <SystemInit+0x1bc>)
    2dba:	4b11      	ldr	r3, [pc, #68]	; (2e00 <SystemInit+0x1c0>)
    2dbc:	6811      	ldr	r1, [r2, #0]
    2dbe:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    2dc2:	69d2      	ldr	r2, [r2, #28]
    2dc4:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
    2dc8:	bd08      	pop	{r3, pc}
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2dca:	2229      	movs	r2, #41	; 0x29
    2dcc:	4b03      	ldr	r3, [pc, #12]	; (2ddc <SystemInit+0x19c>)
    2dce:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    2dd2:	2203      	movs	r2, #3
    2dd4:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    2dd8:	e757      	b.n	2c8a <SystemInit+0x4a>
    2dda:	bf00      	nop
    2ddc:	50004000 	.word	0x50004000
    2de0:	50039000 	.word	0x50039000
    2de4:	beef0044 	.word	0xbeef0044
    2de8:	00005b9b 	.word	0x00005b9b
    2dec:	50032000 	.word	0x50032000
    2df0:	00005b97 	.word	0x00005b97
    2df4:	50002000 	.word	0x50002000
    2df8:	e000ed00 	.word	0xe000ed00
    2dfc:	00ff8000 	.word	0x00ff8000
    2e00:	50006000 	.word	0x50006000

00002e04 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2e04:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2e06:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2e08:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2e0a:	fab2 f382 	clz	r3, r2
    2e0e:	f1c3 031f 	rsb	r3, r3, #31
    2e12:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2e14:	fa05 f403 	lsl.w	r4, r5, r3
    2e18:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2e1c:	e8d0 6fef 	ldaex	r6, [r0]
    2e20:	4296      	cmp	r6, r2
    2e22:	d104      	bne.n	2e2e <nrfx_flag32_alloc+0x2a>
    2e24:	e8c0 4fec 	stlex	ip, r4, [r0]
    2e28:	f1bc 0f00 	cmp.w	ip, #0
    2e2c:	d1f6      	bne.n	2e1c <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2e2e:	d1eb      	bne.n	2e08 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    2e30:	4801      	ldr	r0, [pc, #4]	; (2e38 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    2e32:	700b      	strb	r3, [r1, #0]
}
    2e34:	bd70      	pop	{r4, r5, r6, pc}
    2e36:	bf00      	nop
    2e38:	0bad0000 	.word	0x0bad0000

00002e3c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    2e3c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2e3e:	6803      	ldr	r3, [r0, #0]
    2e40:	40cb      	lsrs	r3, r1
    2e42:	07db      	lsls	r3, r3, #31
    2e44:	d410      	bmi.n	2e68 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    2e46:	2301      	movs	r3, #1
    2e48:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    2e4a:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    2e4c:	ea43 0102 	orr.w	r1, r3, r2
    2e50:	e8d0 4fef 	ldaex	r4, [r0]
    2e54:	4294      	cmp	r4, r2
    2e56:	d104      	bne.n	2e62 <nrfx_flag32_free+0x26>
    2e58:	e8c0 1fec 	stlex	ip, r1, [r0]
    2e5c:	f1bc 0f00 	cmp.w	ip, #0
    2e60:	d1f6      	bne.n	2e50 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2e62:	d1f2      	bne.n	2e4a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    2e64:	4801      	ldr	r0, [pc, #4]	; (2e6c <nrfx_flag32_free+0x30>)
}
    2e66:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2e68:	4801      	ldr	r0, [pc, #4]	; (2e70 <nrfx_flag32_free+0x34>)
    2e6a:	e7fc      	b.n	2e66 <nrfx_flag32_free+0x2a>
    2e6c:	0bad0000 	.word	0x0bad0000
    2e70:	0bad0004 	.word	0x0bad0004

00002e74 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2e74:	4b04      	ldr	r3, [pc, #16]	; (2e88 <nrfx_clock_init+0x14>)
    2e76:	791a      	ldrb	r2, [r3, #4]
    2e78:	b922      	cbnz	r2, 2e84 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2e7a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2e7c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2e7e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2e80:	4802      	ldr	r0, [pc, #8]	; (2e8c <nrfx_clock_init+0x18>)
    2e82:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2e84:	4802      	ldr	r0, [pc, #8]	; (2e90 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2e86:	4770      	bx	lr
    2e88:	20000914 	.word	0x20000914
    2e8c:	0bad0000 	.word	0x0bad0000
    2e90:	0bad000c 	.word	0x0bad000c

00002e94 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e94:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2e98:	b510      	push	{r4, lr}
    2e9a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2e9e:	b152      	cbz	r2, 2eb6 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ea0:	2000      	movs	r0, #0
    2ea2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    2ea6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2eaa:	2201      	movs	r2, #1
    2eac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2eb0:	4b23      	ldr	r3, [pc, #140]	; (2f40 <nrfx_power_clock_irq_handler+0xac>)
    2eb2:	681b      	ldr	r3, [r3, #0]
    2eb4:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2eb6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2eba:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2ebe:	b18a      	cbz	r2, 2ee4 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ec0:	2200      	movs	r2, #0
    2ec2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2ec6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2eca:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2ece:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2ed2:	f002 0203 	and.w	r2, r2, #3
    2ed6:	2a01      	cmp	r2, #1
    2ed8:	f04f 0102 	mov.w	r1, #2
    2edc:	d128      	bne.n	2f30 <nrfx_power_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2ede:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ee2:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2ee4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ee8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    2eec:	b162      	cbz	r2, 2f08 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2eee:	2200      	movs	r2, #0
    2ef0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2ef4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    2ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
    2efc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    2f00:	4b0f      	ldr	r3, [pc, #60]	; (2f40 <nrfx_power_clock_irq_handler+0xac>)
    2f02:	2004      	movs	r0, #4
    2f04:	681b      	ldr	r3, [r3, #0]
    2f06:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2f08:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f0c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    2f10:	b1aa      	cbz	r2, 2f3e <nrfx_power_clock_irq_handler+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f12:	2200      	movs	r2, #0
    2f14:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    2f18:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    2f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
    2f20:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2f24:	4b06      	ldr	r3, [pc, #24]	; (2f40 <nrfx_power_clock_irq_handler+0xac>)
    2f26:	2005      	movs	r0, #5
    }
#endif
}
    2f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2f2c:	681b      	ldr	r3, [r3, #0]
    2f2e:	4718      	bx	r3
    2f30:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2f34:	4b02      	ldr	r3, [pc, #8]	; (2f40 <nrfx_power_clock_irq_handler+0xac>)
    2f36:	2001      	movs	r0, #1
    2f38:	681b      	ldr	r3, [r3, #0]
    2f3a:	4798      	blx	r3
    2f3c:	e7d2      	b.n	2ee4 <nrfx_power_clock_irq_handler+0x50>
}
    2f3e:	bd10      	pop	{r4, pc}
    2f40:	20000914 	.word	0x20000914

00002f44 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    2f44:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    2f46:	4801      	ldr	r0, [pc, #4]	; (2f4c <nrfx_dppi_channel_alloc+0x8>)
    2f48:	f7ff bf5c 	b.w	2e04 <nrfx_flag32_alloc>
    2f4c:	2000004c 	.word	0x2000004c

00002f50 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    2f50:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    2f52:	f003 021f 	and.w	r2, r3, #31
    2f56:	6002      	str	r2, [r0, #0]
}
    2f58:	4a03      	ldr	r2, [pc, #12]	; (2f68 <nrf_gpio_pin_port_decode+0x18>)
    2f5a:	4804      	ldr	r0, [pc, #16]	; (2f6c <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    2f5c:	095b      	lsrs	r3, r3, #5
}
    2f5e:	2b01      	cmp	r3, #1
    2f60:	bf18      	it	ne
    2f62:	4610      	movne	r0, r2
    2f64:	4770      	bx	lr
    2f66:	bf00      	nop
    2f68:	50842500 	.word	0x50842500
    2f6c:	50842800 	.word	0x50842800

00002f70 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2f70:	4b03      	ldr	r3, [pc, #12]	; (2f80 <pin_in_use_by_te+0x10>)
    2f72:	3008      	adds	r0, #8
    2f74:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2f78:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2f7c:	4770      	bx	lr
    2f7e:	bf00      	nop
    2f80:	20000050 	.word	0x20000050

00002f84 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2f84:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2f86:	4c0d      	ldr	r4, [pc, #52]	; (2fbc <call_handler+0x38>)
    2f88:	f100 0308 	add.w	r3, r0, #8
    2f8c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    2f90:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2f92:	05da      	lsls	r2, r3, #23
{
    2f94:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2f96:	d507      	bpl.n	2fa8 <call_handler+0x24>
    2f98:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    2f9c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    2fa0:	6852      	ldr	r2, [r2, #4]
    2fa2:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    2fa6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    2fa8:	68a3      	ldr	r3, [r4, #8]
    2faa:	b12b      	cbz	r3, 2fb8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2fac:	4631      	mov	r1, r6
    2fae:	4628      	mov	r0, r5
    2fb0:	68e2      	ldr	r2, [r4, #12]
    }
}
    2fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2fb6:	4718      	bx	r3
}
    2fb8:	bd70      	pop	{r4, r5, r6, pc}
    2fba:	bf00      	nop
    2fbc:	20000050 	.word	0x20000050

00002fc0 <release_handler>:
{
    2fc0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2fc2:	4a12      	ldr	r2, [pc, #72]	; (300c <release_handler+0x4c>)
    2fc4:	3008      	adds	r0, #8
    2fc6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    2fca:	05d9      	lsls	r1, r3, #23
    2fcc:	d51b      	bpl.n	3006 <release_handler+0x46>
    2fce:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2fd2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2fd6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2fda:	2000      	movs	r0, #0
    2fdc:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2fe0:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2fe4:	f413 7f80 	tst.w	r3, #256	; 0x100
    2fe8:	d003      	beq.n	2ff2 <release_handler+0x32>
    2fea:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2fee:	4299      	cmp	r1, r3
    2ff0:	d009      	beq.n	3006 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2ff2:	3001      	adds	r0, #1
    2ff4:	2830      	cmp	r0, #48	; 0x30
    2ff6:	d1f3      	bne.n	2fe0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    2ff8:	2300      	movs	r3, #0
    2ffa:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2ffe:	4804      	ldr	r0, [pc, #16]	; (3010 <release_handler+0x50>)
}
    3000:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3002:	f7ff bf1b 	b.w	2e3c <nrfx_flag32_free>
}
    3006:	bc10      	pop	{r4}
    3008:	4770      	bx	lr
    300a:	bf00      	nop
    300c:	20000050 	.word	0x20000050
    3010:	200000c4 	.word	0x200000c4

00003014 <pin_handler_trigger_uninit>:
{
    3014:	b538      	push	{r3, r4, r5, lr}
    3016:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3018:	f7ff ffaa 	bl	2f70 <pin_in_use_by_te>
    301c:	4c0b      	ldr	r4, [pc, #44]	; (304c <pin_handler_trigger_uninit+0x38>)
    301e:	f102 0508 	add.w	r5, r2, #8
    3022:	b160      	cbz	r0, 303e <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3024:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3026:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    302a:	0b5b      	lsrs	r3, r3, #13
    302c:	009b      	lsls	r3, r3, #2
    302e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3032:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3036:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
    303a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    303e:	4610      	mov	r0, r2
    3040:	f7ff ffbe 	bl	2fc0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3044:	2300      	movs	r3, #0
    3046:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    304a:	bd38      	pop	{r3, r4, r5, pc}
    304c:	20000050 	.word	0x20000050

00003050 <nrfx_gpiote_input_configure>:
{
    3050:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3054:	4604      	mov	r4, r0
    3056:	4690      	mov	r8, r2
    3058:	461d      	mov	r5, r3
    if (p_input_config)
    305a:	b301      	cbz	r1, 309e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    305c:	4e4f      	ldr	r6, [pc, #316]	; (319c <nrfx_gpiote_input_configure+0x14c>)
    305e:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3062:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3066:	079b      	lsls	r3, r3, #30
    3068:	d502      	bpl.n	3070 <nrfx_gpiote_input_configure+0x20>
    306a:	f7ff ff81 	bl	2f70 <pin_in_use_by_te>
    306e:	bb28      	cbnz	r0, 30bc <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3070:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3072:	4620      	mov	r0, r4
    3074:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3078:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    307c:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3080:	f10d 020f 	add.w	r2, sp, #15
    3084:	460b      	mov	r3, r1
    3086:	f10d 010e 	add.w	r1, sp, #14
    308a:	f002 f84f 	bl	512c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    308e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3092:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3096:	f043 0301 	orr.w	r3, r3, #1
    309a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
    309e:	f1b8 0f00 	cmp.w	r8, #0
    30a2:	d02d      	beq.n	3100 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    30a4:	4e3d      	ldr	r6, [pc, #244]	; (319c <nrfx_gpiote_input_configure+0x14c>)
    30a6:	f104 0708 	add.w	r7, r4, #8
    30aa:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    30ae:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
    30b2:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    30b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
    30b8:	d502      	bpl.n	30c0 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
    30ba:	b1cb      	cbz	r3, 30f0 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
    30bc:	4838      	ldr	r0, [pc, #224]	; (31a0 <nrfx_gpiote_input_configure+0x150>)
    30be:	e021      	b.n	3104 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    30c0:	f021 0120 	bic.w	r1, r1, #32
    30c4:	04c9      	lsls	r1, r1, #19
    30c6:	0cc9      	lsrs	r1, r1, #19
    30c8:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    30cc:	b183      	cbz	r3, 30f0 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
    30ce:	2803      	cmp	r0, #3
    30d0:	d8f4      	bhi.n	30bc <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
    30d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    30d6:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    30da:	4662      	mov	r2, ip
    30dc:	0092      	lsls	r2, r2, #2
    30de:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    30e2:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    30e6:	b980      	cbnz	r0, 310a <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
    30e8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    30ec:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    30f0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    30f4:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    30f8:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    30fc:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    3100:	bb1d      	cbnz	r5, 314a <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
    3102:	4828      	ldr	r0, [pc, #160]	; (31a4 <nrfx_gpiote_input_configure+0x154>)
}
    3104:	b004      	add	sp, #16
    3106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    310a:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    310e:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    3112:	f023 0303 	bic.w	r3, r3, #3
    3116:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    311a:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    311e:	f041 0120 	orr.w	r1, r1, #32
    3122:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
    3126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    312a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    312e:	0223      	lsls	r3, r4, #8
    3130:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3134:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    3138:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    313c:	ea43 030e 	orr.w	r3, r3, lr
    3140:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    3144:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    3148:	e7d2      	b.n	30f0 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
    314a:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    314c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3150:	f7ff ff36 	bl	2fc0 <release_handler>
    if (!handler)
    3154:	2e00      	cmp	r6, #0
    3156:	d0d4      	beq.n	3102 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3158:	4d10      	ldr	r5, [pc, #64]	; (319c <nrfx_gpiote_input_configure+0x14c>)
    315a:	e9d5 2300 	ldrd	r2, r3, [r5]
    315e:	4296      	cmp	r6, r2
    3160:	d101      	bne.n	3166 <nrfx_gpiote_input_configure+0x116>
    3162:	429f      	cmp	r7, r3
    3164:	d018      	beq.n	3198 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3166:	4810      	ldr	r0, [pc, #64]	; (31a8 <nrfx_gpiote_input_configure+0x158>)
    3168:	f10d 010f 	add.w	r1, sp, #15
    316c:	f7ff fe4a 	bl	2e04 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3170:	4b0c      	ldr	r3, [pc, #48]	; (31a4 <nrfx_gpiote_input_configure+0x154>)
    3172:	4298      	cmp	r0, r3
    3174:	d1c6      	bne.n	3104 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
    3176:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    317a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    317e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3180:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3182:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    3186:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    318a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    318e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3192:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    3196:	e7b4      	b.n	3102 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3198:	2200      	movs	r2, #0
    319a:	e7ee      	b.n	317a <nrfx_gpiote_input_configure+0x12a>
    319c:	20000050 	.word	0x20000050
    31a0:	0bad0004 	.word	0x0bad0004
    31a4:	0bad0000 	.word	0x0bad0000
    31a8:	200000c4 	.word	0x200000c4

000031ac <nrfx_gpiote_output_configure>:
{
    31ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ae:	4604      	mov	r4, r0
    31b0:	4615      	mov	r5, r2
    31b2:	b085      	sub	sp, #20
    if (p_config)
    31b4:	b319      	cbz	r1, 31fe <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    31b6:	4e34      	ldr	r6, [pc, #208]	; (3288 <nrfx_gpiote_output_configure+0xdc>)
    31b8:	f100 0708 	add.w	r7, r0, #8
    31bc:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    31c0:	0793      	lsls	r3, r2, #30
    31c2:	d403      	bmi.n	31cc <nrfx_gpiote_output_configure+0x20>
    31c4:	f7ff fed4 	bl	2f70 <pin_in_use_by_te>
    31c8:	2800      	cmp	r0, #0
    31ca:	d15a      	bne.n	3282 <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    31cc:	f012 0f1c 	tst.w	r2, #28
    31d0:	d002      	beq.n	31d8 <nrfx_gpiote_output_configure+0x2c>
    31d2:	784b      	ldrb	r3, [r1, #1]
    31d4:	2b01      	cmp	r3, #1
    31d6:	d054      	beq.n	3282 <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    31d8:	2301      	movs	r3, #1
    31da:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    31de:	2300      	movs	r3, #0
    31e0:	1c4a      	adds	r2, r1, #1
    31e2:	e9cd 1300 	strd	r1, r3, [sp]
    31e6:	4620      	mov	r0, r4
    31e8:	1c8b      	adds	r3, r1, #2
    31ea:	f10d 010f 	add.w	r1, sp, #15
    31ee:	f001 ff9d 	bl	512c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    31f2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    31f6:	f043 0303 	orr.w	r3, r3, #3
    31fa:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    31fe:	b915      	cbnz	r5, 3206 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    3200:	4822      	ldr	r0, [pc, #136]	; (328c <nrfx_gpiote_output_configure+0xe0>)
}
    3202:	b005      	add	sp, #20
    3204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3206:	4e20      	ldr	r6, [pc, #128]	; (3288 <nrfx_gpiote_output_configure+0xdc>)
    3208:	f104 0708 	add.w	r7, r4, #8
    320c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3210:	0783      	lsls	r3, r0, #30
    3212:	d536      	bpl.n	3282 <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    3214:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3218:	2300      	movs	r3, #0
    321a:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    321c:	f020 0020 	bic.w	r0, r0, #32
    3220:	0089      	lsls	r1, r1, #2
    3222:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    3226:	04c0      	lsls	r0, r0, #19
    3228:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    322c:	0cc0      	lsrs	r0, r0, #19
    322e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3232:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    3236:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    323a:	786a      	ldrb	r2, [r5, #1]
    323c:	2a00      	cmp	r2, #0
    323e:	d0df      	beq.n	3200 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3240:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    3244:	78ad      	ldrb	r5, [r5, #2]
    3246:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    324a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    324e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3252:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3256:	0223      	lsls	r3, r4, #8
    3258:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    325c:	0412      	lsls	r2, r2, #16
    325e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3262:	ea43 030e 	orr.w	r3, r3, lr
    3266:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3268:	052a      	lsls	r2, r5, #20
    326a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    326e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3272:	4313      	orrs	r3, r2
    3274:	f040 0020 	orr.w	r0, r0, #32
    3278:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    327c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3280:	e7be      	b.n	3200 <nrfx_gpiote_output_configure+0x54>
{
    3282:	4803      	ldr	r0, [pc, #12]	; (3290 <nrfx_gpiote_output_configure+0xe4>)
    3284:	e7bd      	b.n	3202 <nrfx_gpiote_output_configure+0x56>
    3286:	bf00      	nop
    3288:	20000050 	.word	0x20000050
    328c:	0bad0000 	.word	0x0bad0000
    3290:	0bad0004 	.word	0x0bad0004

00003294 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3294:	4b01      	ldr	r3, [pc, #4]	; (329c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3296:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    329a:	4770      	bx	lr
    329c:	20000050 	.word	0x20000050

000032a0 <nrfx_gpiote_channel_get>:
{
    32a0:	b508      	push	{r3, lr}
    32a2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    32a4:	f7ff fe64 	bl	2f70 <pin_in_use_by_te>
    32a8:	b138      	cbz	r0, 32ba <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    32aa:	4b05      	ldr	r3, [pc, #20]	; (32c0 <nrfx_gpiote_channel_get+0x20>)
    32ac:	3208      	adds	r2, #8
    32ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    32b2:	4804      	ldr	r0, [pc, #16]	; (32c4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    32b4:	0b5b      	lsrs	r3, r3, #13
    32b6:	700b      	strb	r3, [r1, #0]
}
    32b8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    32ba:	4803      	ldr	r0, [pc, #12]	; (32c8 <nrfx_gpiote_channel_get+0x28>)
    32bc:	e7fc      	b.n	32b8 <nrfx_gpiote_channel_get+0x18>
    32be:	bf00      	nop
    32c0:	20000050 	.word	0x20000050
    32c4:	0bad0000 	.word	0x0bad0000
    32c8:	0bad0004 	.word	0x0bad0004

000032cc <nrfx_gpiote_init>:
{
    32cc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    32ce:	4c0f      	ldr	r4, [pc, #60]	; (330c <nrfx_gpiote_init+0x40>)
    32d0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    32d4:	b9bd      	cbnz	r5, 3306 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    32d6:	2260      	movs	r2, #96	; 0x60
    32d8:	4629      	mov	r1, r5
    32da:	f104 0010 	add.w	r0, r4, #16
    32de:	f001 fc57 	bl	4b90 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    32e2:	200d      	movs	r0, #13
    32e4:	f7fe f8c2 	bl	146c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    32e8:	4b09      	ldr	r3, [pc, #36]	; (3310 <nrfx_gpiote_init+0x44>)
    return err_code;
    32ea:	480a      	ldr	r0, [pc, #40]	; (3314 <nrfx_gpiote_init+0x48>)
    32ec:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    32f0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    32f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    32f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    32fc:	2301      	movs	r3, #1
    32fe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3302:	6763      	str	r3, [r4, #116]	; 0x74
}
    3304:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3306:	4804      	ldr	r0, [pc, #16]	; (3318 <nrfx_gpiote_init+0x4c>)
    3308:	e7fc      	b.n	3304 <nrfx_gpiote_init+0x38>
    330a:	bf00      	nop
    330c:	20000050 	.word	0x20000050
    3310:	5000d000 	.word	0x5000d000
    3314:	0bad0000 	.word	0x0bad0000
    3318:	0bad0005 	.word	0x0bad0005

0000331c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    331c:	4b03      	ldr	r3, [pc, #12]	; (332c <nrfx_gpiote_is_init+0x10>)
    331e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3322:	3800      	subs	r0, #0
    3324:	bf18      	it	ne
    3326:	2001      	movne	r0, #1
    3328:	4770      	bx	lr
    332a:	bf00      	nop
    332c:	20000050 	.word	0x20000050

00003330 <nrfx_gpiote_channel_free>:
{
    3330:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3332:	4801      	ldr	r0, [pc, #4]	; (3338 <nrfx_gpiote_channel_free+0x8>)
    3334:	f7ff bd82 	b.w	2e3c <nrfx_flag32_free>
    3338:	200000c0 	.word	0x200000c0

0000333c <nrfx_gpiote_channel_alloc>:
{
    333c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    333e:	4801      	ldr	r0, [pc, #4]	; (3344 <nrfx_gpiote_channel_alloc+0x8>)
    3340:	f7ff bd60 	b.w	2e04 <nrfx_flag32_alloc>
    3344:	200000c0 	.word	0x200000c0

00003348 <nrfx_gpiote_trigger_enable>:
{
    3348:	b537      	push	{r0, r1, r2, r4, r5, lr}
    334a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    334c:	f7ff fe10 	bl	2f70 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3350:	4b1e      	ldr	r3, [pc, #120]	; (33cc <nrfx_gpiote_trigger_enable+0x84>)
    3352:	f104 0208 	add.w	r2, r4, #8
    3356:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    335a:	b1e8      	cbz	r0, 3398 <nrfx_gpiote_trigger_enable+0x50>
    335c:	f013 0502 	ands.w	r5, r3, #2
    3360:	d11a      	bne.n	3398 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3362:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3364:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3366:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    336a:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    336e:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3372:	6005      	str	r5, [r0, #0]
    3374:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3378:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    337a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    337e:	f040 0001 	orr.w	r0, r0, #1
    3382:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    3386:	b129      	cbz	r1, 3394 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3388:	2201      	movs	r2, #1
    338a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    338e:	4a10      	ldr	r2, [pc, #64]	; (33d0 <nrfx_gpiote_trigger_enable+0x88>)
    3390:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3394:	b003      	add	sp, #12
    3396:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3398:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    339c:	2b04      	cmp	r3, #4
    339e:	d011      	beq.n	33c4 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    33a0:	2b05      	cmp	r3, #5
    33a2:	d011      	beq.n	33c8 <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    33a4:	a801      	add	r0, sp, #4
    33a6:	9401      	str	r4, [sp, #4]
    33a8:	f7ff fdd2 	bl	2f50 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    33ac:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    33ae:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    33b0:	40d9      	lsrs	r1, r3
    33b2:	f001 0101 	and.w	r1, r1, #1
    33b6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    33b8:	4620      	mov	r0, r4
}
    33ba:	b003      	add	sp, #12
    33bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    33c0:	f001 befd 	b.w	51be <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    33c4:	2103      	movs	r1, #3
    33c6:	e7f7      	b.n	33b8 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    33c8:	2102      	movs	r1, #2
    33ca:	e7f5      	b.n	33b8 <nrfx_gpiote_trigger_enable+0x70>
    33cc:	20000050 	.word	0x20000050
    33d0:	5000d000 	.word	0x5000d000

000033d4 <nrfx_gpiote_trigger_disable>:
{
    33d4:	b508      	push	{r3, lr}
    33d6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    33d8:	f7ff fdca 	bl	2f70 <pin_in_use_by_te>
    33dc:	b1c0      	cbz	r0, 3410 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    33de:	4b0f      	ldr	r3, [pc, #60]	; (341c <nrfx_gpiote_trigger_disable+0x48>)
    33e0:	f102 0108 	add.w	r1, r2, #8
    33e4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    33e8:	0799      	lsls	r1, r3, #30
    33ea:	d411      	bmi.n	3410 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    33ec:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    33ee:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    33f0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    33f2:	490b      	ldr	r1, [pc, #44]	; (3420 <nrfx_gpiote_trigger_disable+0x4c>)
    33f4:	009b      	lsls	r3, r3, #2
    33f6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    33fa:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    33fe:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3402:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3406:	f022 0203 	bic.w	r2, r2, #3
    340a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    340e:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3410:	2100      	movs	r1, #0
}
    3412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3416:	4610      	mov	r0, r2
    3418:	f001 bed1 	b.w	51be <nrf_gpio_cfg_sense_set>
    341c:	20000050 	.word	0x20000050
    3420:	5000d000 	.word	0x5000d000

00003424 <nrfx_gpiote_pin_uninit>:
{
    3424:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3426:	4b10      	ldr	r3, [pc, #64]	; (3468 <nrfx_gpiote_pin_uninit+0x44>)
    3428:	f100 0208 	add.w	r2, r0, #8
    342c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    3430:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3432:	07db      	lsls	r3, r3, #31
    3434:	d516      	bpl.n	3464 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    3436:	f7ff ffcd 	bl	33d4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    343a:	4620      	mov	r0, r4
    343c:	f7ff fdea 	bl	3014 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3440:	a801      	add	r0, sp, #4
    3442:	9401      	str	r4, [sp, #4]
    3444:	f7ff fd84 	bl	2f50 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    3448:	9b01      	ldr	r3, [sp, #4]
    344a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    344e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    3452:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3456:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    345a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    345e:	4803      	ldr	r0, [pc, #12]	; (346c <nrfx_gpiote_pin_uninit+0x48>)
}
    3460:	b002      	add	sp, #8
    3462:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3464:	4802      	ldr	r0, [pc, #8]	; (3470 <nrfx_gpiote_pin_uninit+0x4c>)
    3466:	e7fb      	b.n	3460 <nrfx_gpiote_pin_uninit+0x3c>
    3468:	20000050 	.word	0x20000050
    346c:	0bad0000 	.word	0x0bad0000
    3470:	0bad0004 	.word	0x0bad0004

00003474 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    3478:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    347a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    347c:	4634      	mov	r4, r6
{
    347e:	4b63      	ldr	r3, [pc, #396]	; (360c <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    3480:	4863      	ldr	r0, [pc, #396]	; (3610 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3482:	4964      	ldr	r1, [pc, #400]	; (3614 <nrfx_gpiote_irq_handler+0x1a0>)
{
    3484:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3486:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3488:	b135      	cbz	r5, 3498 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    348a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    348e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3490:	bf1e      	ittt	ne
    3492:	601c      	strne	r4, [r3, #0]
    3494:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3496:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3498:	3304      	adds	r3, #4
    349a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    349c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    34a0:	d1f1      	bne.n	3486 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    34a2:	f8df a16c 	ldr.w	sl, [pc, #364]	; 3610 <nrfx_gpiote_irq_handler+0x19c>
    34a6:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    34aa:	2b00      	cmp	r3, #0
    34ac:	f000 8091 	beq.w	35d2 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    34b0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 3618 <nrfx_gpiote_irq_handler+0x1a4>
    34b4:	f8d8 3020 	ldr.w	r3, [r8, #32]
    34b8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    34ba:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    34be:	4b57      	ldr	r3, [pc, #348]	; (361c <nrfx_gpiote_irq_handler+0x1a8>)
    34c0:	6a1a      	ldr	r2, [r3, #32]
    34c2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    34c4:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    34c6:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
    34ca:	f10d 0b10 	add.w	fp, sp, #16
    34ce:	ea4f 1349 	mov.w	r3, r9, lsl #5
    34d2:	9300      	str	r3, [sp, #0]
    34d4:	e048      	b.n	3568 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
    34d6:	fa94 f4a4 	rbit	r4, r4
    34da:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    34de:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    34e0:	4a4f      	ldr	r2, [pc, #316]	; (3620 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
    34e2:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    34e4:	f104 0308 	add.w	r3, r4, #8
    34e8:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    34ec:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    34ee:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    34f0:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    34f4:	fa03 f202 	lsl.w	r2, r3, r2
    34f8:	f81b 3000 	ldrb.w	r3, [fp, r0]
    34fc:	9403      	str	r4, [sp, #12]
    34fe:	ea23 0302 	bic.w	r3, r3, r2
    3502:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3506:	a803      	add	r0, sp, #12
    3508:	f7ff fd22 	bl	2f50 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    350c:	9b03      	ldr	r3, [sp, #12]
    350e:	08b9      	lsrs	r1, r7, #2
    3510:	3380      	adds	r3, #128	; 0x80
    3512:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3516:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    351a:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    351c:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    351e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    3522:	d52b      	bpl.n	357c <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
    3524:	4620      	mov	r0, r4
    3526:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3528:	b2dd      	uxtb	r5, r3
    352a:	f7ff fd2b 	bl	2f84 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    352e:	a803      	add	r0, sp, #12
    3530:	9403      	str	r4, [sp, #12]
    3532:	f7ff fd0d 	bl	2f50 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3536:	9b03      	ldr	r3, [sp, #12]
    3538:	3380      	adds	r3, #128	; 0x80
    353a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    353e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    3542:	429d      	cmp	r5, r3
    3544:	d107      	bne.n	3556 <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3546:	2100      	movs	r1, #0
    3548:	4620      	mov	r0, r4
    354a:	f001 fe38 	bl	51be <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    354e:	4629      	mov	r1, r5
    3550:	4620      	mov	r0, r4
    3552:	f001 fe34 	bl	51be <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3556:	a803      	add	r0, sp, #12
    3558:	9403      	str	r4, [sp, #12]
    355a:	f7ff fcf9 	bl	2f50 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    355e:	2201      	movs	r2, #1
    3560:	9b03      	ldr	r3, [sp, #12]
    3562:	fa02 f303 	lsl.w	r3, r2, r3
    3566:	6203      	str	r3, [r0, #32]
            while (latch[i])
    3568:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
    356c:	2c00      	cmp	r4, #0
    356e:	d1b2      	bne.n	34d6 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3570:	f1b9 0f00 	cmp.w	r9, #0
    3574:	d11d      	bne.n	35b2 <nrfx_gpiote_irq_handler+0x13e>
    3576:	f04f 0901 	mov.w	r9, #1
    357a:	e7a8      	b.n	34ce <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    357c:	2b02      	cmp	r3, #2
    357e:	d10c      	bne.n	359a <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3580:	2103      	movs	r1, #3
    3582:	4620      	mov	r0, r4
    3584:	f001 fe1b 	bl	51be <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3588:	f005 0305 	and.w	r3, r5, #5
    358c:	2b01      	cmp	r3, #1
    358e:	d1e2      	bne.n	3556 <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
    3590:	4639      	mov	r1, r7
    3592:	4620      	mov	r0, r4
    3594:	f7ff fcf6 	bl	2f84 <call_handler>
    3598:	e7dd      	b.n	3556 <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    359a:	2102      	movs	r1, #2
    359c:	4620      	mov	r0, r4
    359e:	9301      	str	r3, [sp, #4]
    35a0:	f001 fe0d 	bl	51be <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    35a4:	2d03      	cmp	r5, #3
    35a6:	d0f3      	beq.n	3590 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    35a8:	9b01      	ldr	r3, [sp, #4]
    35aa:	2b03      	cmp	r3, #3
    35ac:	d1d3      	bne.n	3556 <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    35ae:	2d02      	cmp	r5, #2
    35b0:	e7ed      	b.n	358e <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    35b2:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
    35b6:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    35ba:	f8d8 3020 	ldr.w	r3, [r8, #32]
    35be:	4917      	ldr	r1, [pc, #92]	; (361c <nrfx_gpiote_irq_handler+0x1a8>)
    35c0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    35c2:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    35c6:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
    35c8:	4313      	orrs	r3, r2
    35ca:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    35cc:	620a      	str	r2, [r1, #32]
    35ce:	f47f af7a 	bne.w	34c6 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
    35d2:	2401      	movs	r4, #1
    while (mask)
    35d4:	b916      	cbnz	r6, 35dc <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    35d6:	b007      	add	sp, #28
    35d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    35dc:	fa96 f3a6 	rbit	r3, r6
    35e0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    35e4:	fa04 f203 	lsl.w	r2, r4, r3
    35e8:	009b      	lsls	r3, r3, #2
    35ea:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    35ee:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    35f2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    35f6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    35fa:	f3c0 2005 	ubfx	r0, r0, #8, #6
    35fe:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    3602:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3606:	f7ff fcbd 	bl	2f84 <call_handler>
    360a:	e7e3      	b.n	35d4 <nrfx_gpiote_irq_handler+0x160>
    360c:	5000d100 	.word	0x5000d100
    3610:	5000d000 	.word	0x5000d000
    3614:	5000d120 	.word	0x5000d120
    3618:	50842500 	.word	0x50842500
    361c:	50842800 	.word	0x50842800
    3620:	20000050 	.word	0x20000050

00003624 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3624:	4b10      	ldr	r3, [pc, #64]	; (3668 <z_sys_init_run_level+0x44>)
{
    3626:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3628:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    362c:	3001      	adds	r0, #1
    362e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3632:	42a6      	cmp	r6, r4
    3634:	d800      	bhi.n	3638 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    3636:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    3638:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    363c:	b18d      	cbz	r5, 3662 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    363e:	4628      	mov	r0, r5
    3640:	4798      	blx	r3
			if (rc != 0) {
    3642:	b138      	cbz	r0, 3654 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3644:	2800      	cmp	r0, #0
    3646:	bfb8      	it	lt
    3648:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    364a:	28ff      	cmp	r0, #255	; 0xff
    364c:	bfa8      	it	ge
    364e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    3650:	68eb      	ldr	r3, [r5, #12]
    3652:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3654:	68ea      	ldr	r2, [r5, #12]
    3656:	7853      	ldrb	r3, [r2, #1]
    3658:	f043 0301 	orr.w	r3, r3, #1
    365c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    365e:	3408      	adds	r4, #8
    3660:	e7e7      	b.n	3632 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    3662:	4798      	blx	r3
    3664:	e7fb      	b.n	365e <z_sys_init_run_level+0x3a>
    3666:	bf00      	nop
    3668:	00005940 	.word	0x00005940

0000366c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    366c:	2201      	movs	r2, #1
{
    366e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3670:	4b09      	ldr	r3, [pc, #36]	; (3698 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3672:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    3674:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3676:	f7ff ffd5 	bl	3624 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    367a:	f000 ff41 	bl	4500 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    367e:	2004      	movs	r0, #4
    3680:	f7ff ffd0 	bl	3624 <z_sys_init_run_level>

	z_init_static_threads();
    3684:	f000 f92a 	bl	38dc <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    3688:	f7fc fecc 	bl	424 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    368c:	4a03      	ldr	r2, [pc, #12]	; (369c <bg_thread_main+0x30>)
    368e:	7b13      	ldrb	r3, [r2, #12]
    3690:	f023 0301 	bic.w	r3, r3, #1
    3694:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3696:	bd08      	pop	{r3, pc}
    3698:	20000b2d 	.word	0x20000b2d
    369c:	20000230 	.word	0x20000230

000036a0 <z_bss_zero>:
{
    36a0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    36a2:	4803      	ldr	r0, [pc, #12]	; (36b0 <z_bss_zero+0x10>)
    36a4:	4a03      	ldr	r2, [pc, #12]	; (36b4 <z_bss_zero+0x14>)
    36a6:	2100      	movs	r1, #0
    36a8:	1a12      	subs	r2, r2, r0
    36aa:	f001 fdbe 	bl	522a <z_early_memset>
}
    36ae:	bd08      	pop	{r3, pc}
    36b0:	20000190 	.word	0x20000190
    36b4:	20000b30 	.word	0x20000b30

000036b8 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    36b8:	2300      	movs	r3, #0
    36ba:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    36bc:	b570      	push	{r4, r5, r6, lr}
    36be:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    36c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    36c4:	220f      	movs	r2, #15
    36c6:	9301      	str	r3, [sp, #4]
    36c8:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    36cc:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    36ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    36d2:	4d0e      	ldr	r5, [pc, #56]	; (370c <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    36d4:	4e0e      	ldr	r6, [pc, #56]	; (3710 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    36d6:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    36da:	490e      	ldr	r1, [pc, #56]	; (3714 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    36dc:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    36e0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    36e2:	fb02 1100 	mla	r1, r2, r0, r1
    36e6:	4b0c      	ldr	r3, [pc, #48]	; (3718 <z_init_cpu+0x60>)
    36e8:	4630      	mov	r0, r6
    36ea:	9500      	str	r5, [sp, #0]
    36ec:	f000 f8c6 	bl	387c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    36f0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    36f2:	742c      	strb	r4, [r5, #16]
    36f4:	f023 0304 	bic.w	r3, r3, #4
    36f8:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    36fa:	4b08      	ldr	r3, [pc, #32]	; (371c <z_init_cpu+0x64>)
    36fc:	3401      	adds	r4, #1
    36fe:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3702:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    3704:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    3706:	b006      	add	sp, #24
    3708:	bd70      	pop	{r4, r5, r6, pc}
    370a:	bf00      	nop
    370c:	2000091c 	.word	0x2000091c
    3710:	200001b0 	.word	0x200001b0
    3714:	20001330 	.word	0x20001330
    3718:	00003995 	.word	0x00003995
    371c:	20000b30 	.word	0x20000b30

00003720 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    3720:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3722:	2000      	movs	r0, #0
{
    3724:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3726:	f7ff ff7d 	bl	3624 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    372a:	4b2d      	ldr	r3, [pc, #180]	; (37e0 <z_cstart+0xc0>)
	uint32_t msp =
    372c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3730:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3734:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3738:	2400      	movs	r4, #0
    373a:	23e0      	movs	r3, #224	; 0xe0
    373c:	4d29      	ldr	r5, [pc, #164]	; (37e4 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    373e:	4e2a      	ldr	r6, [pc, #168]	; (37e8 <z_cstart+0xc8>)
    3740:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3744:	77ec      	strb	r4, [r5, #31]
    3746:	762c      	strb	r4, [r5, #24]
    3748:	766c      	strb	r4, [r5, #25]
    374a:	76ac      	strb	r4, [r5, #26]
    374c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3750:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3752:	4f26      	ldr	r7, [pc, #152]	; (37ec <z_cstart+0xcc>)
    3754:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3758:	626b      	str	r3, [r5, #36]	; 0x24
    375a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    375e:	f7fe f8cb 	bl	18f8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3762:	f7fd fe57 	bl	1414 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3766:	f04f 33ff 	mov.w	r3, #4294967295
    376a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    376c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    376e:	f7fe facd 	bl	1d0c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3772:	f7fe f973 	bl	1a5c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    3776:	f240 1301 	movw	r3, #257	; 0x101
    377a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    377e:	ab06      	add	r3, sp, #24
    3780:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    3782:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    3786:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3788:	f001 fd28 	bl	51dc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    378c:	2001      	movs	r0, #1
    378e:	f7ff ff49 	bl	3624 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3792:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    3794:	4d16      	ldr	r5, [pc, #88]	; (37f0 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3796:	f7ff ff45 	bl	3624 <z_sys_init_run_level>
	z_sched_init();
    379a:	f000 fc4d 	bl	4038 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    379e:	4b15      	ldr	r3, [pc, #84]	; (37f4 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    37a0:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    37a2:	9305      	str	r3, [sp, #20]
    37a4:	2301      	movs	r3, #1
    37a6:	4914      	ldr	r1, [pc, #80]	; (37f8 <z_cstart+0xd8>)
    37a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    37ac:	e9cd 4303 	strd	r4, r3, [sp, #12]
    37b0:	4628      	mov	r0, r5
    37b2:	463b      	mov	r3, r7
    37b4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    37b8:	9400      	str	r4, [sp, #0]
    37ba:	f000 f85f 	bl	387c <z_setup_new_thread>
    37be:	4606      	mov	r6, r0
    37c0:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    37c2:	4628      	mov	r0, r5
    37c4:	f022 0204 	bic.w	r2, r2, #4
    37c8:	736a      	strb	r2, [r5, #13]
    37ca:	f001 fdd5 	bl	5378 <z_ready_thread>
	z_init_cpu(0);
    37ce:	4620      	mov	r0, r4
    37d0:	f7ff ff72 	bl	36b8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    37d4:	463a      	mov	r2, r7
    37d6:	4631      	mov	r1, r6
    37d8:	4628      	mov	r0, r5
    37da:	f7fd ff1f 	bl	161c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    37de:	bf00      	nop
    37e0:	20000b30 	.word	0x20000b30
    37e4:	e000ed00 	.word	0xe000ed00
    37e8:	2000091c 	.word	0x2000091c
    37ec:	0000366d 	.word	0x0000366d
    37f0:	20000230 	.word	0x20000230
    37f4:	00005bc4 	.word	0x00005bc4
    37f8:	20001470 	.word	0x20001470

000037fc <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
    37fc:	2000      	movs	r0, #0
{
    37fe:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3800:	4c05      	ldr	r4, [pc, #20]	; (3818 <init_mem_slab_module+0x1c>)
    3802:	4d06      	ldr	r5, [pc, #24]	; (381c <init_mem_slab_module+0x20>)
    3804:	42ac      	cmp	r4, r5
    3806:	d300      	bcc.n	380a <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    3808:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    380a:	4620      	mov	r0, r4
    380c:	f001 fd11 	bl	5232 <create_free_list>
		if (rc < 0) {
    3810:	2800      	cmp	r0, #0
    3812:	dbf9      	blt.n	3808 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3814:	341c      	adds	r4, #28
    3816:	e7f5      	b.n	3804 <init_mem_slab_module+0x8>
    3818:	2000013c 	.word	0x2000013c
    381c:	2000013c 	.word	0x2000013c

00003820 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3820:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3822:	460c      	mov	r4, r1
	__asm__ volatile(
    3824:	f04f 0520 	mov.w	r5, #32
    3828:	f3ef 8111 	mrs	r1, BASEPRI
    382c:	f385 8812 	msr	BASEPRI_MAX, r5
    3830:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3834:	6945      	ldr	r5, [r0, #20]
    3836:	b15d      	cbz	r5, 3850 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    3838:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    383a:	682b      	ldr	r3, [r5, #0]
    383c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    383e:	6983      	ldr	r3, [r0, #24]
    3840:	3301      	adds	r3, #1
    3842:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3844:	2000      	movs	r0, #0
	__asm__ volatile(
    3846:	f381 8811 	msr	BASEPRI, r1
    384a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    384e:	e011      	b.n	3874 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3850:	ea52 0603 	orrs.w	r6, r2, r3
    3854:	d103      	bne.n	385e <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    3856:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    385a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    385c:	e7f3      	b.n	3846 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    385e:	e9cd 2300 	strd	r2, r3, [sp]
    3862:	4602      	mov	r2, r0
    3864:	3008      	adds	r0, #8
    3866:	f000 faf1 	bl	3e4c <z_pend_curr>
		if (result == 0) {
    386a:	b918      	cbnz	r0, 3874 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    386c:	4b02      	ldr	r3, [pc, #8]	; (3878 <k_mem_slab_alloc+0x58>)
    386e:	689b      	ldr	r3, [r3, #8]
    3870:	695b      	ldr	r3, [r3, #20]
    3872:	6023      	str	r3, [r4, #0]
}
    3874:	b002      	add	sp, #8
    3876:	bd70      	pop	{r4, r5, r6, pc}
    3878:	2000091c 	.word	0x2000091c

0000387c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    387c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3880:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3882:	f100 0558 	add.w	r5, r0, #88	; 0x58
    3886:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3888:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    388a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    388e:	2500      	movs	r5, #0
{
    3890:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    3892:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    3894:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3896:	e9c0 5506 	strd	r5, r5, [r0, #24]
    389a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    389c:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    389e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    38a0:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    38a4:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    38a8:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    38aa:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    38ac:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    38ae:	9202      	str	r2, [sp, #8]
    38b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    38b2:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    38b6:	9201      	str	r2, [sp, #4]
    38b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    38ba:	9200      	str	r2, [sp, #0]
    38bc:	4642      	mov	r2, r8
    38be:	f7fd fe91 	bl	15e4 <arch_new_thread>
	if (!_current) {
    38c2:	4b05      	ldr	r3, [pc, #20]	; (38d8 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    38c4:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    38c6:	689b      	ldr	r3, [r3, #8]
    38c8:	b103      	cbz	r3, 38cc <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    38ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    38cc:	4640      	mov	r0, r8
    38ce:	6723      	str	r3, [r4, #112]	; 0x70
    38d0:	b004      	add	sp, #16
    38d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38d6:	bf00      	nop
    38d8:	2000091c 	.word	0x2000091c

000038dc <z_init_static_threads>:
{
    38dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    38e0:	4c29      	ldr	r4, [pc, #164]	; (3988 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    38e2:	4d2a      	ldr	r5, [pc, #168]	; (398c <z_init_static_threads+0xb0>)
{
    38e4:	b087      	sub	sp, #28
    38e6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    38e8:	42ae      	cmp	r6, r5
    38ea:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    38ee:	d30f      	bcc.n	3910 <z_init_static_threads+0x34>
	k_sched_lock();
    38f0:	f000 fb72 	bl	3fd8 <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    38f4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    38f8:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    38fc:	4c22      	ldr	r4, [pc, #136]	; (3988 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    38fe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 3990 <z_init_static_threads+0xb4>
    3902:	42ac      	cmp	r4, r5
    3904:	d320      	bcc.n	3948 <z_init_static_threads+0x6c>
}
    3906:	b007      	add	sp, #28
    3908:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    390c:	f000 bb78 	b.w	4000 <k_sched_unlock>
		z_setup_new_thread(
    3910:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3914:	9305      	str	r3, [sp, #20]
    3916:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    391a:	9304      	str	r3, [sp, #16]
    391c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3920:	9303      	str	r3, [sp, #12]
    3922:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3926:	9302      	str	r3, [sp, #8]
    3928:	f854 3c18 	ldr.w	r3, [r4, #-24]
    392c:	9301      	str	r3, [sp, #4]
    392e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3932:	9300      	str	r3, [sp, #0]
    3934:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    3938:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    393c:	f7ff ff9e 	bl	387c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3940:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    3944:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3946:	e7ce      	b.n	38e6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3948:	6a63      	ldr	r3, [r4, #36]	; 0x24
    394a:	1c5a      	adds	r2, r3, #1
    394c:	d00d      	beq.n	396a <z_init_static_threads+0x8e>
    394e:	2100      	movs	r1, #0
    3950:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    3952:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3956:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    395a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    395e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3962:	d104      	bne.n	396e <z_init_static_threads+0x92>
	z_sched_start(thread);
    3964:	4640      	mov	r0, r8
    3966:	f000 fae7 	bl	3f38 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    396a:	342c      	adds	r4, #44	; 0x2c
    396c:	e7c9      	b.n	3902 <z_init_static_threads+0x26>
    396e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3972:	2300      	movs	r3, #0
    3974:	f7fc fbee 	bl	154 <__aeabi_uldivmod>
    3978:	4602      	mov	r2, r0
    397a:	460b      	mov	r3, r1
    397c:	f108 0018 	add.w	r0, r8, #24
    3980:	4649      	mov	r1, r9
    3982:	f000 fcc3 	bl	430c <z_add_timeout>
    3986:	e7f0      	b.n	396a <z_init_static_threads+0x8e>
    3988:	00005788 	.word	0x00005788
    398c:	00005788 	.word	0x00005788
    3990:	000053dd 	.word	0x000053dd

00003994 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3994:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3996:	4c0b      	ldr	r4, [pc, #44]	; (39c4 <idle+0x30>)
	return !z_sys_post_kernel;
    3998:	4d0b      	ldr	r5, [pc, #44]	; (39c8 <idle+0x34>)
	__asm__ volatile(
    399a:	f04f 0220 	mov.w	r2, #32
    399e:	f3ef 8311 	mrs	r3, BASEPRI
    39a2:	f382 8812 	msr	BASEPRI_MAX, r2
    39a6:	f3bf 8f6f 	isb	sy
    39aa:	f001 fd63 	bl	5474 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    39ae:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    39b0:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    39b2:	b913      	cbnz	r3, 39ba <idle+0x26>
	arch_cpu_idle();
    39b4:	f7fd fd34 	bl	1420 <arch_cpu_idle>
}
    39b8:	e7ef      	b.n	399a <idle+0x6>
    39ba:	f7fd fb65 	bl	1088 <pm_system_suspend>
    39be:	2800      	cmp	r0, #0
    39c0:	d1eb      	bne.n	399a <idle+0x6>
    39c2:	e7f7      	b.n	39b4 <idle+0x20>
    39c4:	2000091c 	.word	0x2000091c
    39c8:	20000b2d 	.word	0x20000b2d

000039cc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    39cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    39d0:	4604      	mov	r4, r0
    39d2:	4617      	mov	r7, r2
    39d4:	461e      	mov	r6, r3
    39d6:	f04f 0320 	mov.w	r3, #32
    39da:	f3ef 8811 	mrs	r8, BASEPRI
    39de:	f383 8812 	msr	BASEPRI_MAX, r3
    39e2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    39e6:	68c3      	ldr	r3, [r0, #12]
    39e8:	4a33      	ldr	r2, [pc, #204]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    39ea:	b17b      	cbz	r3, 3a0c <z_impl_k_mutex_lock+0x40>
    39ec:	6880      	ldr	r0, [r0, #8]
    39ee:	6891      	ldr	r1, [r2, #8]
    39f0:	4288      	cmp	r0, r1
    39f2:	d019      	beq.n	3a28 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    39f4:	ea57 0306 	orrs.w	r3, r7, r6
    39f8:	d118      	bne.n	3a2c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    39fa:	f388 8811 	msr	BASEPRI, r8
    39fe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    3a02:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3a06:	b002      	add	sp, #8
    3a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3a0c:	6891      	ldr	r1, [r2, #8]
    3a0e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    3a12:	3301      	adds	r3, #1
    3a14:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3a16:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3a18:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    3a1a:	60a3      	str	r3, [r4, #8]
    3a1c:	f388 8811 	msr	BASEPRI, r8
    3a20:	f3bf 8f6f 	isb	sy
		return 0;
    3a24:	2000      	movs	r0, #0
    3a26:	e7ee      	b.n	3a06 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    3a28:	6921      	ldr	r1, [r4, #16]
    3a2a:	e7f2      	b.n	3a12 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3a2c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3a30:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    3a34:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    3a38:	4299      	cmp	r1, r3
    3a3a:	bfa8      	it	ge
    3a3c:	4619      	movge	r1, r3
    3a3e:	4291      	cmp	r1, r2
    3a40:	bfb8      	it	lt
    3a42:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3a44:	428b      	cmp	r3, r1
    3a46:	dd2e      	ble.n	3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
		resched = adjust_owner_prio(mutex, new_prio);
    3a48:	f001 fc4d 	bl	52e6 <adjust_owner_prio.isra.0>
    3a4c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3a4e:	4622      	mov	r2, r4
    3a50:	4641      	mov	r1, r8
    3a52:	e9cd 7600 	strd	r7, r6, [sp]
    3a56:	4819      	ldr	r0, [pc, #100]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a58:	f000 f9f8 	bl	3e4c <z_pend_curr>
	if (got_mutex == 0) {
    3a5c:	2800      	cmp	r0, #0
    3a5e:	d0e1      	beq.n	3a24 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    3a60:	f04f 0320 	mov.w	r3, #32
    3a64:	f3ef 8611 	mrs	r6, BASEPRI
    3a68:	f383 8812 	msr	BASEPRI_MAX, r3
    3a6c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    3a70:	68a0      	ldr	r0, [r4, #8]
    3a72:	b1d0      	cbz	r0, 3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3a74:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3a76:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a78:	429c      	cmp	r4, r3
    3a7a:	d00a      	beq.n	3a92 <z_impl_k_mutex_lock+0xc6>
    3a7c:	b14b      	cbz	r3, 3a92 <z_impl_k_mutex_lock+0xc6>
    3a7e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3a82:	4299      	cmp	r1, r3
    3a84:	bfa8      	it	ge
    3a86:	4619      	movge	r1, r3
    3a88:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    3a8c:	4299      	cmp	r1, r3
    3a8e:	bfb8      	it	lt
    3a90:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    3a92:	f001 fc28 	bl	52e6 <adjust_owner_prio.isra.0>
    3a96:	b140      	cbz	r0, 3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
		z_reschedule(&lock, key);
    3a98:	4631      	mov	r1, r6
    3a9a:	4808      	ldr	r0, [pc, #32]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a9c:	f000 fa3a 	bl	3f14 <z_reschedule>
	return -EAGAIN;
    3aa0:	f06f 000a 	mvn.w	r0, #10
    3aa4:	e7af      	b.n	3a06 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    3aa6:	2500      	movs	r5, #0
    3aa8:	e7d1      	b.n	3a4e <z_impl_k_mutex_lock+0x82>
	if (resched) {
    3aaa:	2d00      	cmp	r5, #0
    3aac:	d1f4      	bne.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
	__asm__ volatile(
    3aae:	f386 8811 	msr	BASEPRI, r6
    3ab2:	f3bf 8f6f 	isb	sy
    3ab6:	e7f3      	b.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3ab8:	2000091c 	.word	0x2000091c
    3abc:	20000b2e 	.word	0x20000b2e

00003ac0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3ac0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3ac2:	6883      	ldr	r3, [r0, #8]
{
    3ac4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    3ac6:	b36b      	cbz	r3, 3b24 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3ac8:	4a19      	ldr	r2, [pc, #100]	; (3b30 <z_impl_k_mutex_unlock+0x70>)
    3aca:	6892      	ldr	r2, [r2, #8]
    3acc:	4293      	cmp	r3, r2
    3ace:	d12c      	bne.n	3b2a <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3ad0:	68c3      	ldr	r3, [r0, #12]
    3ad2:	2b01      	cmp	r3, #1
    3ad4:	d903      	bls.n	3ade <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    3ad6:	3b01      	subs	r3, #1
    3ad8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    3ada:	2000      	movs	r0, #0
}
    3adc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    3ade:	f04f 0320 	mov.w	r3, #32
    3ae2:	f3ef 8511 	mrs	r5, BASEPRI
    3ae6:	f383 8812 	msr	BASEPRI_MAX, r3
    3aea:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3aee:	6901      	ldr	r1, [r0, #16]
    3af0:	6880      	ldr	r0, [r0, #8]
    3af2:	f001 fbf8 	bl	52e6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3af6:	4620      	mov	r0, r4
    3af8:	f001 fc74 	bl	53e4 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3afc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3afe:	b158      	cbz	r0, 3b18 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    3b00:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3b04:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3b06:	2200      	movs	r2, #0
    3b08:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    3b0a:	f001 fc35 	bl	5378 <z_ready_thread>
		z_reschedule(&lock, key);
    3b0e:	4629      	mov	r1, r5
    3b10:	4808      	ldr	r0, [pc, #32]	; (3b34 <z_impl_k_mutex_unlock+0x74>)
    3b12:	f000 f9ff 	bl	3f14 <z_reschedule>
    3b16:	e7e0      	b.n	3ada <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    3b18:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3b1a:	f385 8811 	msr	BASEPRI, r5
    3b1e:	f3bf 8f6f 	isb	sy
    3b22:	e7da      	b.n	3ada <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    3b24:	f06f 0015 	mvn.w	r0, #21
    3b28:	e7d8      	b.n	3adc <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    3b2a:	f04f 30ff 	mov.w	r0, #4294967295
    3b2e:	e7d5      	b.n	3adc <z_impl_k_mutex_unlock+0x1c>
    3b30:	2000091c 	.word	0x2000091c
    3b34:	20000b2e 	.word	0x20000b2e

00003b38 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3b38:	b538      	push	{r3, r4, r5, lr}
    3b3a:	4604      	mov	r4, r0
	__asm__ volatile(
    3b3c:	f04f 0320 	mov.w	r3, #32
    3b40:	f3ef 8511 	mrs	r5, BASEPRI
    3b44:	f383 8812 	msr	BASEPRI_MAX, r3
    3b48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3b4c:	f001 fc4a 	bl	53e4 <z_unpend_first_thread>

	if (thread != NULL) {
    3b50:	b148      	cbz	r0, 3b66 <z_impl_k_sem_give+0x2e>
    3b52:	2200      	movs	r2, #0
    3b54:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3b56:	f001 fc0f 	bl	5378 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3b5a:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3b60:	4804      	ldr	r0, [pc, #16]	; (3b74 <z_impl_k_sem_give+0x3c>)
    3b62:	f000 b9d7 	b.w	3f14 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3b66:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3b6a:	429a      	cmp	r2, r3
    3b6c:	bf18      	it	ne
    3b6e:	3301      	addne	r3, #1
    3b70:	60a3      	str	r3, [r4, #8]
}
    3b72:	e7f2      	b.n	3b5a <z_impl_k_sem_give+0x22>
    3b74:	20000b2e 	.word	0x20000b2e

00003b78 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3b78:	b513      	push	{r0, r1, r4, lr}
    3b7a:	f04f 0420 	mov.w	r4, #32
    3b7e:	f3ef 8111 	mrs	r1, BASEPRI
    3b82:	f384 8812 	msr	BASEPRI_MAX, r4
    3b86:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3b8a:	6884      	ldr	r4, [r0, #8]
    3b8c:	b144      	cbz	r4, 3ba0 <z_impl_k_sem_take+0x28>
		sem->count--;
    3b8e:	3c01      	subs	r4, #1
    3b90:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    3b92:	f381 8811 	msr	BASEPRI, r1
    3b96:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3b9a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3b9c:	b002      	add	sp, #8
    3b9e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3ba0:	ea52 0403 	orrs.w	r4, r2, r3
    3ba4:	d106      	bne.n	3bb4 <z_impl_k_sem_take+0x3c>
    3ba6:	f381 8811 	msr	BASEPRI, r1
    3baa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3bae:	f06f 000f 	mvn.w	r0, #15
    3bb2:	e7f3      	b.n	3b9c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3bb4:	e9cd 2300 	strd	r2, r3, [sp]
    3bb8:	4602      	mov	r2, r0
    3bba:	4802      	ldr	r0, [pc, #8]	; (3bc4 <z_impl_k_sem_take+0x4c>)
    3bbc:	f000 f946 	bl	3e4c <z_pend_curr>
	return ret;
    3bc0:	e7ec      	b.n	3b9c <z_impl_k_sem_take+0x24>
    3bc2:	bf00      	nop
    3bc4:	20000b2e 	.word	0x20000b2e

00003bc8 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    3bc8:	89c3      	ldrh	r3, [r0, #14]
    3bca:	2b7f      	cmp	r3, #127	; 0x7f
    3bcc:	d812      	bhi.n	3bf4 <sliceable+0x2c>
	int ret = slice_ticks;
    3bce:	4b0a      	ldr	r3, [pc, #40]	; (3bf8 <sliceable+0x30>)
    3bd0:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    3bd2:	b163      	cbz	r3, 3bee <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3bd4:	4b09      	ldr	r3, [pc, #36]	; (3bfc <sliceable+0x34>)
    3bd6:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3bda:	681b      	ldr	r3, [r3, #0]
    3bdc:	429a      	cmp	r2, r3
    3bde:	db09      	blt.n	3bf4 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    3be0:	7b43      	ldrb	r3, [r0, #13]
    3be2:	06db      	lsls	r3, r3, #27
    3be4:	d106      	bne.n	3bf4 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    3be6:	4b06      	ldr	r3, [pc, #24]	; (3c00 <sliceable+0x38>)
    3be8:	1ac3      	subs	r3, r0, r3
    3bea:	bf18      	it	ne
    3bec:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    3bee:	f003 0001 	and.w	r0, r3, #1
    3bf2:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    3bf4:	2300      	movs	r3, #0
    3bf6:	e7fa      	b.n	3bee <sliceable+0x26>
    3bf8:	20000948 	.word	0x20000948
    3bfc:	20000944 	.word	0x20000944
    3c00:	200001b0 	.word	0x200001b0

00003c04 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
    3c04:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    3c06:	4b04      	ldr	r3, [pc, #16]	; (3c18 <slice_timeout+0x14>)
    3c08:	1ac0      	subs	r0, r0, r3
    3c0a:	4b04      	ldr	r3, [pc, #16]	; (3c1c <slice_timeout+0x18>)
    3c0c:	10c0      	asrs	r0, r0, #3
    3c0e:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
    3c10:	4b03      	ldr	r3, [pc, #12]	; (3c20 <slice_timeout+0x1c>)
    3c12:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    3c14:	4770      	bx	lr
    3c16:	bf00      	nop
    3c18:	200002b0 	.word	0x200002b0
    3c1c:	aaaaaaab 	.word	0xaaaaaaab
    3c20:	20000b2e 	.word	0x20000b2e

00003c24 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    3c24:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    3c26:	4b0e      	ldr	r3, [pc, #56]	; (3c60 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    3c28:	4c0e      	ldr	r4, [pc, #56]	; (3c64 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    3c2a:	7c1e      	ldrb	r6, [r3, #16]
{
    3c2c:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    3c2e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    3c32:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    3c36:	4620      	mov	r0, r4
    3c38:	f001 fc06 	bl	5448 <z_abort_timeout>
	slice_expired[cpu] = false;
    3c3c:	2200      	movs	r2, #0
    3c3e:	4b0a      	ldr	r3, [pc, #40]	; (3c68 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
    3c40:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    3c42:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    3c44:	f7ff ffc0 	bl	3bc8 <sliceable>
    3c48:	b148      	cbz	r0, 3c5e <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    3c4a:	4b08      	ldr	r3, [pc, #32]	; (3c6c <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    3c4c:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
    3c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
    3c52:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    3c54:	4906      	ldr	r1, [pc, #24]	; (3c70 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    3c56:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    3c58:	17d3      	asrs	r3, r2, #31
    3c5a:	f000 bb57 	b.w	430c <z_add_timeout>
}
    3c5e:	bd70      	pop	{r4, r5, r6, pc}
    3c60:	2000091c 	.word	0x2000091c
    3c64:	200002b0 	.word	0x200002b0
    3c68:	20000b2e 	.word	0x20000b2e
    3c6c:	20000948 	.word	0x20000948
    3c70:	00003c05 	.word	0x00003c05

00003c74 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    3c74:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    3c76:	4d0d      	ldr	r5, [pc, #52]	; (3cac <update_cache+0x38>)
    3c78:	462b      	mov	r3, r5
    3c7a:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c7e:	429c      	cmp	r4, r3
    3c80:	d000      	beq.n	3c84 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3c82:	b904      	cbnz	r4, 3c86 <update_cache+0x12>
    3c84:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    3c86:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    3c88:	b938      	cbnz	r0, 3c9a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    3c8a:	7b5a      	ldrb	r2, [r3, #13]
    3c8c:	06d2      	lsls	r2, r2, #27
    3c8e:	d104      	bne.n	3c9a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3c90:	69a2      	ldr	r2, [r4, #24]
    3c92:	b912      	cbnz	r2, 3c9a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    3c94:	89da      	ldrh	r2, [r3, #14]
    3c96:	2a7f      	cmp	r2, #127	; 0x7f
    3c98:	d805      	bhi.n	3ca6 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    3c9a:	429c      	cmp	r4, r3
    3c9c:	d002      	beq.n	3ca4 <update_cache+0x30>
			z_reset_time_slice(thread);
    3c9e:	4620      	mov	r0, r4
    3ca0:	f7ff ffc0 	bl	3c24 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    3ca4:	4623      	mov	r3, r4
    3ca6:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    3ca8:	bd38      	pop	{r3, r4, r5, pc}
    3caa:	bf00      	nop
    3cac:	2000091c 	.word	0x2000091c

00003cb0 <move_thread_to_end_of_prio_q>:
{
    3cb0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3cb2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    3cb6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3cb8:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    3cba:	7b43      	ldrb	r3, [r0, #13]
    3cbc:	da04      	bge.n	3cc8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3cc2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    3cc4:	f001 fb1e 	bl	5304 <sys_dlist_remove>
	return list->head == list;
    3cc8:	4a15      	ldr	r2, [pc, #84]	; (3d20 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3cca:	7b4b      	ldrb	r3, [r1, #13]
    3ccc:	4610      	mov	r0, r2
    3cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3cd2:	734b      	strb	r3, [r1, #13]
    3cd4:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3cd8:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3cda:	4283      	cmp	r3, r0
    3cdc:	bf08      	it	eq
    3cde:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3ce0:	b923      	cbnz	r3, 3cec <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    3ce2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    3ce6:	6021      	str	r1, [r4, #0]
	list->tail = node;
    3ce8:	6211      	str	r1, [r2, #32]
}
    3cea:	e00c      	b.n	3d06 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    3cec:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3cf0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3cf4:	42b5      	cmp	r5, r6
    3cf6:	d00e      	beq.n	3d16 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3cf8:	42ae      	cmp	r6, r5
    3cfa:	dd0c      	ble.n	3d16 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3cfc:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3cfe:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3d02:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3d04:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3d06:	6890      	ldr	r0, [r2, #8]
}
    3d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3d0c:	1a43      	subs	r3, r0, r1
    3d0e:	4258      	negs	r0, r3
    3d10:	4158      	adcs	r0, r3
    3d12:	f7ff bfaf 	b.w	3c74 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3d16:	429c      	cmp	r4, r3
    3d18:	d0e3      	beq.n	3ce2 <move_thread_to_end_of_prio_q+0x32>
    3d1a:	681b      	ldr	r3, [r3, #0]
    3d1c:	e7e0      	b.n	3ce0 <move_thread_to_end_of_prio_q+0x30>
    3d1e:	bf00      	nop
    3d20:	2000091c 	.word	0x2000091c

00003d24 <ready_thread>:
{
    3d24:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3d26:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3d2a:	7b42      	ldrb	r2, [r0, #13]
    3d2c:	2b00      	cmp	r3, #0
    3d2e:	db29      	blt.n	3d84 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3d30:	06d3      	lsls	r3, r2, #27
    3d32:	d127      	bne.n	3d84 <ready_thread+0x60>
	return node->next != NULL;
    3d34:	6983      	ldr	r3, [r0, #24]
    3d36:	bb2b      	cbnz	r3, 3d84 <ready_thread+0x60>
	return list->head == list;
    3d38:	4913      	ldr	r1, [pc, #76]	; (3d88 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3d3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3d3e:	7342      	strb	r2, [r0, #13]
    3d40:	460a      	mov	r2, r1
    3d42:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d46:	4294      	cmp	r4, r2
    3d48:	bf18      	it	ne
    3d4a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    3d4c:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3d4e:	b923      	cbnz	r3, 3d5a <ready_thread+0x36>
	node->prev = tail;
    3d50:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    3d54:	6020      	str	r0, [r4, #0]
	list->tail = node;
    3d56:	6208      	str	r0, [r1, #32]
}
    3d58:	e00c      	b.n	3d74 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    3d5a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    3d5e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3d62:	42b5      	cmp	r5, r6
    3d64:	d00a      	beq.n	3d7c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3d66:	42ae      	cmp	r6, r5
    3d68:	dd08      	ble.n	3d7c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    3d6a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3d6c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3d70:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3d72:	6058      	str	r0, [r3, #4]
		update_cache(0);
    3d74:	2000      	movs	r0, #0
}
    3d76:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3d78:	f7ff bf7c 	b.w	3c74 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3d7c:	42a3      	cmp	r3, r4
    3d7e:	d0e7      	beq.n	3d50 <ready_thread+0x2c>
    3d80:	681b      	ldr	r3, [r3, #0]
    3d82:	e7e4      	b.n	3d4e <ready_thread+0x2a>
}
    3d84:	bc70      	pop	{r4, r5, r6}
    3d86:	4770      	bx	lr
    3d88:	2000091c 	.word	0x2000091c

00003d8c <unready_thread>:
{
    3d8c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    3d8e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    3d92:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3d94:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    3d96:	7b43      	ldrb	r3, [r0, #13]
    3d98:	da04      	bge.n	3da4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3d9e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3da0:	f001 fab0 	bl	5304 <sys_dlist_remove>
	update_cache(thread == _current);
    3da4:	4b04      	ldr	r3, [pc, #16]	; (3db8 <unready_thread+0x2c>)
    3da6:	6898      	ldr	r0, [r3, #8]
    3da8:	1a43      	subs	r3, r0, r1
    3daa:	4258      	negs	r0, r3
    3dac:	4158      	adcs	r0, r3
}
    3dae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3db2:	f7ff bf5f 	b.w	3c74 <update_cache>
    3db6:	bf00      	nop
    3db8:	2000091c 	.word	0x2000091c

00003dbc <pend_locked>:
{
    3dbc:	b570      	push	{r4, r5, r6, lr}
    3dbe:	4615      	mov	r5, r2
    3dc0:	461c      	mov	r4, r3
    3dc2:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    3dc4:	f001 fab0 	bl	5328 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3dc8:	f1b4 3fff 	cmp.w	r4, #4294967295
    3dcc:	bf08      	it	eq
    3dce:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    3dd2:	d008      	beq.n	3de6 <pend_locked+0x2a>
    3dd4:	462a      	mov	r2, r5
    3dd6:	4623      	mov	r3, r4
    3dd8:	f106 0018 	add.w	r0, r6, #24
    3ddc:	4902      	ldr	r1, [pc, #8]	; (3de8 <pend_locked+0x2c>)
}
    3dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3de2:	f000 ba93 	b.w	430c <z_add_timeout>
    3de6:	bd70      	pop	{r4, r5, r6, pc}
    3de8:	000053dd 	.word	0x000053dd

00003dec <z_time_slice>:
{
    3dec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3dee:	f04f 0320 	mov.w	r3, #32
    3df2:	f3ef 8511 	mrs	r5, BASEPRI
    3df6:	f383 8812 	msr	BASEPRI_MAX, r3
    3dfa:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    3dfe:	4b10      	ldr	r3, [pc, #64]	; (3e40 <z_time_slice+0x54>)
	if (pending_current == curr) {
    3e00:	4a10      	ldr	r2, [pc, #64]	; (3e44 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    3e02:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    3e04:	6810      	ldr	r0, [r2, #0]
    3e06:	42a0      	cmp	r0, r4
    3e08:	d106      	bne.n	3e18 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    3e0a:	f7ff ff0b 	bl	3c24 <z_reset_time_slice>
	__asm__ volatile(
    3e0e:	f385 8811 	msr	BASEPRI, r5
    3e12:	f3bf 8f6f 	isb	sy
}
    3e16:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    3e18:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    3e1a:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    3e1c:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    3e1e:	4a0a      	ldr	r2, [pc, #40]	; (3e48 <z_time_slice+0x5c>)
    3e20:	5cd3      	ldrb	r3, [r2, r3]
    3e22:	2b00      	cmp	r3, #0
    3e24:	d0f3      	beq.n	3e0e <z_time_slice+0x22>
    3e26:	4620      	mov	r0, r4
    3e28:	f7ff fece 	bl	3bc8 <sliceable>
    3e2c:	2800      	cmp	r0, #0
    3e2e:	d0ee      	beq.n	3e0e <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    3e30:	7b63      	ldrb	r3, [r4, #13]
    3e32:	06db      	lsls	r3, r3, #27
    3e34:	d102      	bne.n	3e3c <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    3e36:	4620      	mov	r0, r4
    3e38:	f7ff ff3a 	bl	3cb0 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    3e3c:	4620      	mov	r0, r4
    3e3e:	e7e4      	b.n	3e0a <z_time_slice+0x1e>
    3e40:	2000091c 	.word	0x2000091c
    3e44:	20000940 	.word	0x20000940
    3e48:	20000b2e 	.word	0x20000b2e

00003e4c <z_pend_curr>:
{
    3e4c:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    3e4e:	480c      	ldr	r0, [pc, #48]	; (3e80 <z_pend_curr+0x34>)
    3e50:	4d0c      	ldr	r5, [pc, #48]	; (3e84 <z_pend_curr+0x38>)
    3e52:	6886      	ldr	r6, [r0, #8]
{
    3e54:	460c      	mov	r4, r1
	pending_current = _current;
    3e56:	602e      	str	r6, [r5, #0]
{
    3e58:	4611      	mov	r1, r2
    3e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    3e5e:	f04f 0620 	mov.w	r6, #32
    3e62:	f3ef 8511 	mrs	r5, BASEPRI
    3e66:	f386 8812 	msr	BASEPRI_MAX, r6
    3e6a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    3e6e:	6880      	ldr	r0, [r0, #8]
    3e70:	f7ff ffa4 	bl	3dbc <pend_locked>
	ret = arch_swap(key);
    3e74:	4620      	mov	r0, r4
}
    3e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3e7a:	f7fd bb5d 	b.w	1538 <arch_swap>
    3e7e:	bf00      	nop
    3e80:	2000091c 	.word	0x2000091c
    3e84:	20000940 	.word	0x20000940

00003e88 <z_set_prio>:
{
    3e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e8a:	4604      	mov	r4, r0
    3e8c:	f04f 0320 	mov.w	r3, #32
    3e90:	f3ef 8611 	mrs	r6, BASEPRI
    3e94:	f383 8812 	msr	BASEPRI_MAX, r3
    3e98:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    3e9c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    3e9e:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3ea0:	06da      	lsls	r2, r3, #27
    3ea2:	d119      	bne.n	3ed8 <z_set_prio+0x50>
	return node->next != NULL;
    3ea4:	6985      	ldr	r5, [r0, #24]
    3ea6:	b9bd      	cbnz	r5, 3ed8 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3eac:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3eae:	f001 fa29 	bl	5304 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3eb2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    3eb4:	4a16      	ldr	r2, [pc, #88]	; (3f10 <z_set_prio+0x88>)
    3eb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3eba:	7343      	strb	r3, [r0, #13]
    3ebc:	4613      	mov	r3, r2
				thread->base.prio = prio;
    3ebe:	7381      	strb	r1, [r0, #14]
    3ec0:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ec4:	4298      	cmp	r0, r3
    3ec6:	bf18      	it	ne
    3ec8:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    3eca:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3ecc:	b95d      	cbnz	r5, 3ee6 <z_set_prio+0x5e>
	node->prev = tail;
    3ece:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    3ed2:	6004      	str	r4, [r0, #0]
	list->tail = node;
    3ed4:	6214      	str	r4, [r2, #32]
}
    3ed6:	e011      	b.n	3efc <z_set_prio+0x74>
    3ed8:	2000      	movs	r0, #0
			thread->base.prio = prio;
    3eda:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    3edc:	f386 8811 	msr	BASEPRI, r6
    3ee0:	f3bf 8f6f 	isb	sy
}
    3ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    3ee6:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    3eea:	42b9      	cmp	r1, r7
    3eec:	d00b      	beq.n	3f06 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3eee:	428f      	cmp	r7, r1
    3ef0:	dd09      	ble.n	3f06 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    3ef2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    3ef4:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    3ef8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    3efa:	606c      	str	r4, [r5, #4]
			update_cache(1);
    3efc:	2001      	movs	r0, #1
    3efe:	f7ff feb9 	bl	3c74 <update_cache>
    3f02:	2001      	movs	r0, #1
    3f04:	e7ea      	b.n	3edc <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    3f06:	42a8      	cmp	r0, r5
    3f08:	d0e1      	beq.n	3ece <z_set_prio+0x46>
    3f0a:	682d      	ldr	r5, [r5, #0]
    3f0c:	e7de      	b.n	3ecc <z_set_prio+0x44>
    3f0e:	bf00      	nop
    3f10:	2000091c 	.word	0x2000091c

00003f14 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3f14:	b949      	cbnz	r1, 3f2a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3f16:	f3ef 8005 	mrs	r0, IPSR
    3f1a:	b930      	cbnz	r0, 3f2a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3f1c:	4b05      	ldr	r3, [pc, #20]	; (3f34 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3f1e:	699a      	ldr	r2, [r3, #24]
    3f20:	689b      	ldr	r3, [r3, #8]
    3f22:	429a      	cmp	r2, r3
    3f24:	d001      	beq.n	3f2a <z_reschedule+0x16>
    3f26:	f7fd bb07 	b.w	1538 <arch_swap>
    3f2a:	f381 8811 	msr	BASEPRI, r1
    3f2e:	f3bf 8f6f 	isb	sy
}
    3f32:	4770      	bx	lr
    3f34:	2000091c 	.word	0x2000091c

00003f38 <z_sched_start>:
{
    3f38:	b510      	push	{r4, lr}
	__asm__ volatile(
    3f3a:	f04f 0220 	mov.w	r2, #32
    3f3e:	f3ef 8411 	mrs	r4, BASEPRI
    3f42:	f382 8812 	msr	BASEPRI_MAX, r2
    3f46:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    3f4a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    3f4c:	0751      	lsls	r1, r2, #29
    3f4e:	d404      	bmi.n	3f5a <z_sched_start+0x22>
	__asm__ volatile(
    3f50:	f384 8811 	msr	BASEPRI, r4
    3f54:	f3bf 8f6f 	isb	sy
}
    3f58:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3f5a:	f022 0204 	bic.w	r2, r2, #4
    3f5e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3f60:	f7ff fee0 	bl	3d24 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3f64:	4621      	mov	r1, r4
}
    3f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3f6a:	4801      	ldr	r0, [pc, #4]	; (3f70 <z_sched_start+0x38>)
    3f6c:	f7ff bfd2 	b.w	3f14 <z_reschedule>
    3f70:	20000b2f 	.word	0x20000b2f

00003f74 <z_impl_k_thread_suspend>:
{
    3f74:	b570      	push	{r4, r5, r6, lr}
    3f76:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3f78:	3018      	adds	r0, #24
    3f7a:	f001 fa65 	bl	5448 <z_abort_timeout>
	__asm__ volatile(
    3f7e:	f04f 0320 	mov.w	r3, #32
    3f82:	f3ef 8611 	mrs	r6, BASEPRI
    3f86:	f383 8812 	msr	BASEPRI_MAX, r3
    3f8a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3f8e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    3f92:	7b63      	ldrb	r3, [r4, #13]
    3f94:	2a00      	cmp	r2, #0
    3f96:	da05      	bge.n	3fa4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    3f9c:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3f9e:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3fa0:	f001 f9b0 	bl	5304 <sys_dlist_remove>
		update_cache(thread == _current);
    3fa4:	4d0b      	ldr	r5, [pc, #44]	; (3fd4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3fa6:	7b63      	ldrb	r3, [r4, #13]
    3fa8:	68a8      	ldr	r0, [r5, #8]
    3faa:	f043 0310 	orr.w	r3, r3, #16
    3fae:	7363      	strb	r3, [r4, #13]
    3fb0:	1b03      	subs	r3, r0, r4
    3fb2:	4258      	negs	r0, r3
    3fb4:	4158      	adcs	r0, r3
    3fb6:	f7ff fe5d 	bl	3c74 <update_cache>
	__asm__ volatile(
    3fba:	f386 8811 	msr	BASEPRI, r6
    3fbe:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3fc2:	68ab      	ldr	r3, [r5, #8]
    3fc4:	42a3      	cmp	r3, r4
    3fc6:	d103      	bne.n	3fd0 <z_impl_k_thread_suspend+0x5c>
}
    3fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3fcc:	f001 ba32 	b.w	5434 <z_reschedule_unlocked>
}
    3fd0:	bd70      	pop	{r4, r5, r6, pc}
    3fd2:	bf00      	nop
    3fd4:	2000091c 	.word	0x2000091c

00003fd8 <k_sched_lock>:
	__asm__ volatile(
    3fd8:	f04f 0320 	mov.w	r3, #32
    3fdc:	f3ef 8111 	mrs	r1, BASEPRI
    3fe0:	f383 8812 	msr	BASEPRI_MAX, r3
    3fe4:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3fe8:	4b04      	ldr	r3, [pc, #16]	; (3ffc <k_sched_lock+0x24>)
    3fea:	689a      	ldr	r2, [r3, #8]
    3fec:	7bd3      	ldrb	r3, [r2, #15]
    3fee:	3b01      	subs	r3, #1
    3ff0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3ff2:	f381 8811 	msr	BASEPRI, r1
    3ff6:	f3bf 8f6f 	isb	sy
}
    3ffa:	4770      	bx	lr
    3ffc:	2000091c 	.word	0x2000091c

00004000 <k_sched_unlock>:
{
    4000:	b510      	push	{r4, lr}
	__asm__ volatile(
    4002:	f04f 0320 	mov.w	r3, #32
    4006:	f3ef 8411 	mrs	r4, BASEPRI
    400a:	f383 8812 	msr	BASEPRI_MAX, r3
    400e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    4012:	4b08      	ldr	r3, [pc, #32]	; (4034 <k_sched_unlock+0x34>)
		update_cache(0);
    4014:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    4016:	689a      	ldr	r2, [r3, #8]
    4018:	7bd3      	ldrb	r3, [r2, #15]
    401a:	3301      	adds	r3, #1
    401c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    401e:	f7ff fe29 	bl	3c74 <update_cache>
	__asm__ volatile(
    4022:	f384 8811 	msr	BASEPRI, r4
    4026:	f3bf 8f6f 	isb	sy
}
    402a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    402e:	f001 ba01 	b.w	5434 <z_reschedule_unlocked>
    4032:	bf00      	nop
    4034:	2000091c 	.word	0x2000091c

00004038 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4038:	4b02      	ldr	r3, [pc, #8]	; (4044 <z_sched_init+0xc>)
    403a:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    403e:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    4042:	4770      	bx	lr
    4044:	2000091c 	.word	0x2000091c

00004048 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    4048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    404a:	f04f 0320 	mov.w	r3, #32
    404e:	f3ef 8511 	mrs	r5, BASEPRI
    4052:	f383 8812 	msr	BASEPRI_MAX, r3
    4056:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    405a:	4919      	ldr	r1, [pc, #100]	; (40c0 <z_impl_k_yield+0x78>)
    405c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    405e:	7b43      	ldrb	r3, [r0, #13]
    4060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4064:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4066:	f001 f94d 	bl	5304 <sys_dlist_remove>
	return list->head == list;
    406a:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    406c:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    406e:	7b5a      	ldrb	r2, [r3, #13]
    4070:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4074:	735a      	strb	r2, [r3, #13]
    4076:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    407a:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    407c:	4282      	cmp	r2, r0
    407e:	bf08      	it	eq
    4080:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4082:	b922      	cbnz	r2, 408e <z_impl_k_yield+0x46>
	node->prev = tail;
    4084:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    4088:	6023      	str	r3, [r4, #0]
	list->tail = node;
    408a:	620b      	str	r3, [r1, #32]
}
    408c:	e00c      	b.n	40a8 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    408e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    4092:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    4096:	42be      	cmp	r6, r7
    4098:	d00e      	beq.n	40b8 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    409a:	42b7      	cmp	r7, r6
    409c:	dd0c      	ble.n	40b8 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    409e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    40a0:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    40a4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    40a6:	6053      	str	r3, [r2, #4]
	update_cache(1);
    40a8:	2001      	movs	r0, #1
    40aa:	f7ff fde3 	bl	3c74 <update_cache>
    40ae:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    40b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    40b4:	f7fd ba40 	b.w	1538 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    40b8:	42a2      	cmp	r2, r4
    40ba:	d0e3      	beq.n	4084 <z_impl_k_yield+0x3c>
    40bc:	6812      	ldr	r2, [r2, #0]
    40be:	e7e0      	b.n	4082 <z_impl_k_yield+0x3a>
    40c0:	2000091c 	.word	0x2000091c

000040c4 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    40c4:	ea50 0301 	orrs.w	r3, r0, r1
{
    40c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40cc:	4605      	mov	r5, r0
    40ce:	460e      	mov	r6, r1
	if (ticks == 0) {
    40d0:	d103      	bne.n	40da <z_tick_sleep+0x16>
	z_impl_k_yield();
    40d2:	f7ff ffb9 	bl	4048 <z_impl_k_yield>
		k_yield();
		return 0;
    40d6:	2000      	movs	r0, #0
    40d8:	e02c      	b.n	4134 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    40da:	1c83      	adds	r3, r0, #2
    40dc:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    40e0:	db2a      	blt.n	4138 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    40e2:	f001 f9d7 	bl	5494 <sys_clock_tick_get_32>
    40e6:	182c      	adds	r4, r5, r0
    40e8:	f04f 0320 	mov.w	r3, #32
    40ec:	f3ef 8811 	mrs	r8, BASEPRI
    40f0:	f383 8812 	msr	BASEPRI_MAX, r3
    40f4:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    40f8:	4f11      	ldr	r7, [pc, #68]	; (4140 <z_tick_sleep+0x7c>)
    40fa:	4b12      	ldr	r3, [pc, #72]	; (4144 <z_tick_sleep+0x80>)
    40fc:	68b8      	ldr	r0, [r7, #8]
    40fe:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    4100:	f7ff fe44 	bl	3d8c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4104:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4106:	4910      	ldr	r1, [pc, #64]	; (4148 <z_tick_sleep+0x84>)
    4108:	462a      	mov	r2, r5
    410a:	4633      	mov	r3, r6
    410c:	3018      	adds	r0, #24
    410e:	f000 f8fd 	bl	430c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4112:	68ba      	ldr	r2, [r7, #8]
    4114:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4116:	7b53      	ldrb	r3, [r2, #13]
    4118:	f043 0310 	orr.w	r3, r3, #16
    411c:	7353      	strb	r3, [r2, #13]
    411e:	f7fd fa0b 	bl	1538 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4122:	f001 f9b7 	bl	5494 <sys_clock_tick_get_32>
    4126:	1a20      	subs	r0, r4, r0
    4128:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    412c:	2801      	cmp	r0, #1
    412e:	f173 0300 	sbcs.w	r3, r3, #0
    4132:	dbd0      	blt.n	40d6 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    4134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4138:	f06f 0401 	mvn.w	r4, #1
    413c:	1a24      	subs	r4, r4, r0
    413e:	e7d3      	b.n	40e8 <z_tick_sleep+0x24>
    4140:	2000091c 	.word	0x2000091c
    4144:	20000940 	.word	0x20000940
    4148:	000053dd 	.word	0x000053dd

0000414c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    414c:	f1b1 3fff 	cmp.w	r1, #4294967295
    4150:	bf08      	it	eq
    4152:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    4156:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4158:	d106      	bne.n	4168 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    415a:	4b08      	ldr	r3, [pc, #32]	; (417c <z_impl_k_sleep+0x30>)
    415c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    415e:	f7ff ff09 	bl	3f74 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    4162:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    4166:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4168:	f7ff ffac 	bl	40c4 <z_tick_sleep>
    416c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4170:	fb80 0303 	smull	r0, r3, r0, r3
    4174:	0bc0      	lsrs	r0, r0, #15
    4176:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    417a:	e7f4      	b.n	4166 <z_impl_k_sleep+0x1a>
    417c:	2000091c 	.word	0x2000091c

00004180 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4180:	4b01      	ldr	r3, [pc, #4]	; (4188 <z_impl_z_current_get+0x8>)
    4182:	6898      	ldr	r0, [r3, #8]
    4184:	4770      	bx	lr
    4186:	bf00      	nop
    4188:	2000091c 	.word	0x2000091c

0000418c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    418c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4190:	4604      	mov	r4, r0
    4192:	f04f 0320 	mov.w	r3, #32
    4196:	f3ef 8611 	mrs	r6, BASEPRI
    419a:	f383 8812 	msr	BASEPRI_MAX, r3
    419e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    41a2:	7b03      	ldrb	r3, [r0, #12]
    41a4:	07d9      	lsls	r1, r3, #31
    41a6:	d50b      	bpl.n	41c0 <z_thread_abort+0x34>
	__asm__ volatile(
    41a8:	f386 8811 	msr	BASEPRI, r6
    41ac:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    41b0:	4040      	eors	r0, r0
    41b2:	f380 8811 	msr	BASEPRI, r0
    41b6:	f04f 0004 	mov.w	r0, #4
    41ba:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    41bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    41c0:	7b43      	ldrb	r3, [r0, #13]
    41c2:	071a      	lsls	r2, r3, #28
    41c4:	d504      	bpl.n	41d0 <z_thread_abort+0x44>
    41c6:	f386 8811 	msr	BASEPRI, r6
    41ca:	f3bf 8f6f 	isb	sy
    41ce:	e7f5      	b.n	41bc <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    41d0:	f023 0220 	bic.w	r2, r3, #32
    41d4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    41d8:	09d2      	lsrs	r2, r2, #7
    41da:	d120      	bne.n	421e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    41dc:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    41de:	68a3      	ldr	r3, [r4, #8]
    41e0:	b113      	cbz	r3, 41e8 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    41e2:	4620      	mov	r0, r4
    41e4:	f001 f896 	bl	5314 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    41e8:	f104 0018 	add.w	r0, r4, #24
    41ec:	f001 f92c 	bl	5448 <z_abort_timeout>
    41f0:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    41f4:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    41f8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    41fa:	42bd      	cmp	r5, r7
    41fc:	d000      	beq.n	4200 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    41fe:	b9b5      	cbnz	r5, 422e <z_thread_abort+0xa2>
		update_cache(1);
    4200:	2001      	movs	r0, #1
    4202:	f7ff fd37 	bl	3c74 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    4206:	4b10      	ldr	r3, [pc, #64]	; (4248 <z_thread_abort+0xbc>)
    4208:	689b      	ldr	r3, [r3, #8]
    420a:	42a3      	cmp	r3, r4
    420c:	d1db      	bne.n	41c6 <z_thread_abort+0x3a>
    420e:	f3ef 8305 	mrs	r3, IPSR
    4212:	2b00      	cmp	r3, #0
    4214:	d1d7      	bne.n	41c6 <z_thread_abort+0x3a>
    4216:	4630      	mov	r0, r6
    4218:	f7fd f98e 	bl	1538 <arch_swap>
	return ret;
    421c:	e7d3      	b.n	41c6 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    421e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    4222:	f043 0308 	orr.w	r3, r3, #8
    4226:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4228:	f001 f86c 	bl	5304 <sys_dlist_remove>
}
    422c:	e7d7      	b.n	41de <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    422e:	4628      	mov	r0, r5
    4230:	f001 f870 	bl	5314 <unpend_thread_no_timeout>
    4234:	f105 0018 	add.w	r0, r5, #24
    4238:	f001 f906 	bl	5448 <z_abort_timeout>
		ready_thread(thread);
    423c:	4628      	mov	r0, r5
    423e:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    4242:	f7ff fd6f 	bl	3d24 <ready_thread>
    4246:	e7d7      	b.n	41f8 <z_thread_abort+0x6c>
    4248:	2000091c 	.word	0x2000091c

0000424c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    424c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    424e:	4806      	ldr	r0, [pc, #24]	; (4268 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4250:	4a06      	ldr	r2, [pc, #24]	; (426c <z_data_copy+0x20>)
    4252:	4907      	ldr	r1, [pc, #28]	; (4270 <z_data_copy+0x24>)
    4254:	1a12      	subs	r2, r2, r0
    4256:	f000 ffea 	bl	522e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    425a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    425e:	4a05      	ldr	r2, [pc, #20]	; (4274 <z_data_copy+0x28>)
    4260:	4905      	ldr	r1, [pc, #20]	; (4278 <z_data_copy+0x2c>)
    4262:	4806      	ldr	r0, [pc, #24]	; (427c <z_data_copy+0x30>)
    4264:	f000 bfe3 	b.w	522e <z_early_memcpy>
    4268:	20000000 	.word	0x20000000
    426c:	2000018c 	.word	0x2000018c
    4270:	00005bfc 	.word	0x00005bfc
    4274:	00000000 	.word	0x00000000
    4278:	00005bfc 	.word	0x00005bfc
    427c:	20000000 	.word	0x20000000

00004280 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4280:	4b03      	ldr	r3, [pc, #12]	; (4290 <elapsed+0x10>)
    4282:	681b      	ldr	r3, [r3, #0]
    4284:	b90b      	cbnz	r3, 428a <elapsed+0xa>
    4286:	f7fe bca7 	b.w	2bd8 <sys_clock_elapsed>
}
    428a:	2000      	movs	r0, #0
    428c:	4770      	bx	lr
    428e:	bf00      	nop
    4290:	2000094c 	.word	0x2000094c

00004294 <next_timeout>:

static int32_t next_timeout(void)
{
    4294:	b510      	push	{r4, lr}
	return list->head == list;
    4296:	4b0e      	ldr	r3, [pc, #56]	; (42d0 <next_timeout+0x3c>)
    4298:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    429a:	429c      	cmp	r4, r3
    429c:	d104      	bne.n	42a8 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    429e:	f7ff ffef 	bl	4280 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    42a2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    42a6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    42a8:	f7ff ffea 	bl	4280 <elapsed>
	if ((to == NULL) ||
    42ac:	2c00      	cmp	r4, #0
    42ae:	d0f8      	beq.n	42a2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    42b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    42b4:	1a1b      	subs	r3, r3, r0
    42b6:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    42ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    42be:	f172 0100 	sbcs.w	r1, r2, #0
    42c2:	daee      	bge.n	42a2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    42c4:	2a00      	cmp	r2, #0
    42c6:	bfac      	ite	ge
    42c8:	4618      	movge	r0, r3
    42ca:	2000      	movlt	r0, #0
	return ret;
    42cc:	e7eb      	b.n	42a6 <next_timeout+0x12>
    42ce:	bf00      	nop
    42d0:	200000cc 	.word	0x200000cc

000042d4 <remove_timeout>:
{
    42d4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    42d6:	b170      	cbz	r0, 42f6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    42d8:	4b0b      	ldr	r3, [pc, #44]	; (4308 <remove_timeout+0x34>)
    42da:	685b      	ldr	r3, [r3, #4]
    42dc:	4298      	cmp	r0, r3
    42de:	d00a      	beq.n	42f6 <remove_timeout+0x22>
    42e0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    42e2:	b143      	cbz	r3, 42f6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    42e4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    42e8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    42ec:	1912      	adds	r2, r2, r4
    42ee:	eb41 0105 	adc.w	r1, r1, r5
    42f2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    42f6:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    42fa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    42fc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    42fe:	2300      	movs	r3, #0
	node->prev = NULL;
    4300:	e9c0 3300 	strd	r3, r3, [r0]
}
    4304:	bd30      	pop	{r4, r5, pc}
    4306:	bf00      	nop
    4308:	200000cc 	.word	0x200000cc

0000430c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    430c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4310:	bf08      	it	eq
    4312:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    4316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4318:	4604      	mov	r4, r0
    431a:	461d      	mov	r5, r3
    431c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    431e:	d05c      	beq.n	43da <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4320:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    4322:	f04f 0320 	mov.w	r3, #32
    4326:	f3ef 8711 	mrs	r7, BASEPRI
    432a:	f383 8812 	msr	BASEPRI_MAX, r3
    432e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4332:	3201      	adds	r2, #1
    4334:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    4338:	da24      	bge.n	4384 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    433a:	f06f 0301 	mvn.w	r3, #1
    433e:	492c      	ldr	r1, [pc, #176]	; (43f0 <z_add_timeout+0xe4>)
    4340:	e9d1 2000 	ldrd	r2, r0, [r1]
    4344:	1a9b      	subs	r3, r3, r2
    4346:	f04f 32ff 	mov.w	r2, #4294967295
    434a:	eb62 0000 	sbc.w	r0, r2, r0
    434e:	1b9e      	subs	r6, r3, r6
    4350:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    4354:	2e01      	cmp	r6, #1
    4356:	f170 0300 	sbcs.w	r3, r0, #0
    435a:	da01      	bge.n	4360 <z_add_timeout+0x54>
    435c:	2601      	movs	r6, #1
    435e:	2000      	movs	r0, #0
    4360:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    4364:	4e23      	ldr	r6, [pc, #140]	; (43f4 <z_add_timeout+0xe8>)
    4366:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    436a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    436c:	45b4      	cmp	ip, r6
    436e:	bf08      	it	eq
    4370:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    4374:	f1bc 0f00 	cmp.w	ip, #0
    4378:	d10d      	bne.n	4396 <z_add_timeout+0x8a>
	node->prev = tail;
    437a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    437e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4380:	6074      	str	r4, [r6, #4]
}
    4382:	e01c      	b.n	43be <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    4384:	f7ff ff7c 	bl	4280 <elapsed>
    4388:	3601      	adds	r6, #1
    438a:	f145 0500 	adc.w	r5, r5, #0
    438e:	1836      	adds	r6, r6, r0
    4390:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    4394:	e7e4      	b.n	4360 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    4396:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    439a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    439e:	4293      	cmp	r3, r2
    43a0:	eb71 0e00 	sbcs.w	lr, r1, r0
    43a4:	da1a      	bge.n	43dc <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    43a6:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    43a8:	f8dc 3004 	ldr.w	r3, [ip, #4]
    43ac:	eb60 0001 	sbc.w	r0, r0, r1
    43b0:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    43b4:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    43b8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    43ba:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    43be:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43c0:	42b3      	cmp	r3, r6
    43c2:	d006      	beq.n	43d2 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    43c4:	429c      	cmp	r4, r3
    43c6:	d104      	bne.n	43d2 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    43c8:	f7ff ff64 	bl	4294 <next_timeout>
    43cc:	2100      	movs	r1, #0
    43ce:	f7fe fbd1 	bl	2b74 <sys_clock_set_timeout>
	__asm__ volatile(
    43d2:	f387 8811 	msr	BASEPRI, r7
    43d6:	f3bf 8f6f 	isb	sy
		}
	}
}
    43da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    43dc:	1a9b      	subs	r3, r3, r2
    43de:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    43e2:	45ac      	cmp	ip, r5
    43e4:	e9c4 3104 	strd	r3, r1, [r4, #16]
    43e8:	d0c7      	beq.n	437a <z_add_timeout+0x6e>
    43ea:	f8dc c000 	ldr.w	ip, [ip]
    43ee:	e7c1      	b.n	4374 <z_add_timeout+0x68>
    43f0:	200002c8 	.word	0x200002c8
    43f4:	200000cc 	.word	0x200000cc

000043f8 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    43f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    43fc:	f04f 0320 	mov.w	r3, #32
    4400:	f3ef 8c11 	mrs	ip, BASEPRI
    4404:	f383 8812 	msr	BASEPRI_MAX, r3
    4408:	f3bf 8f6f 	isb	sy
	return list->head == list;
    440c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 44c0 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    4410:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 44c4 <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    4414:	2400      	movs	r4, #0
	announce_remaining = ticks;
    4416:	f8c9 0000 	str.w	r0, [r9]
    441a:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    441e:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4420:	4550      	cmp	r0, sl
    4422:	bf08      	it	eq
    4424:	2000      	moveq	r0, #0
		curr_tick += dt;
    4426:	4f28      	ldr	r7, [pc, #160]	; (44c8 <sys_clock_announce+0xd0>)
    4428:	46e0      	mov	r8, ip
    442a:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    442e:	f8d9 3000 	ldr.w	r3, [r9]
    4432:	b380      	cbz	r0, 4496 <sys_clock_announce+0x9e>
    4434:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    4438:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    443c:	42b3      	cmp	r3, r6
    443e:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    4442:	da05      	bge.n	4450 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    4444:	1af6      	subs	r6, r6, r3
    4446:	eb6c 040e 	sbc.w	r4, ip, lr
    444a:	e9c0 6404 	strd	r6, r4, [r0, #16]
    444e:	e022      	b.n	4496 <sys_clock_announce+0x9e>
		curr_tick += dt;
    4450:	18b2      	adds	r2, r6, r2
    4452:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    4456:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    445a:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    445e:	f7ff ff39 	bl	42d4 <remove_timeout>
	__asm__ volatile(
    4462:	f388 8811 	msr	BASEPRI, r8
    4466:	f3bf 8f6f 	isb	sy
		t->fn(t);
    446a:	6883      	ldr	r3, [r0, #8]
    446c:	4798      	blx	r3
	__asm__ volatile(
    446e:	f04f 0320 	mov.w	r3, #32
    4472:	f3ef 8811 	mrs	r8, BASEPRI
    4476:	f383 8812 	msr	BASEPRI_MAX, r3
    447a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    447e:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    4482:	f8da 0000 	ldr.w	r0, [sl]
    4486:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4488:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    448a:	46c4      	mov	ip, r8
    448c:	f8c9 3000 	str.w	r3, [r9]
    4490:	d1ca      	bne.n	4428 <sys_clock_announce+0x30>
		curr_tick += dt;
    4492:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    4496:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4498:	189a      	adds	r2, r3, r2
    449a:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
    449e:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    44a2:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    44a6:	f7ff fef5 	bl	4294 <next_timeout>
    44aa:	4621      	mov	r1, r4
    44ac:	f7fe fb62 	bl	2b74 <sys_clock_set_timeout>
	__asm__ volatile(
    44b0:	f388 8811 	msr	BASEPRI, r8
    44b4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    44b8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    44bc:	f7ff bc96 	b.w	3dec <z_time_slice>
    44c0:	200000cc 	.word	0x200000cc
    44c4:	2000094c 	.word	0x2000094c
    44c8:	200002c8 	.word	0x200002c8

000044cc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    44cc:	b510      	push	{r4, lr}
	__asm__ volatile(
    44ce:	f04f 0320 	mov.w	r3, #32
    44d2:	f3ef 8411 	mrs	r4, BASEPRI
    44d6:	f383 8812 	msr	BASEPRI_MAX, r3
    44da:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    44de:	f7ff fecf 	bl	4280 <elapsed>
    44e2:	4603      	mov	r3, r0
    44e4:	4a05      	ldr	r2, [pc, #20]	; (44fc <sys_clock_tick_get+0x30>)
    44e6:	e9d2 0100 	ldrd	r0, r1, [r2]
    44ea:	1818      	adds	r0, r3, r0
    44ec:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    44f0:	f384 8811 	msr	BASEPRI, r4
    44f4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    44f8:	bd10      	pop	{r4, pc}
    44fa:	bf00      	nop
    44fc:	200002c8 	.word	0x200002c8

00004500 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    4500:	4801      	ldr	r0, [pc, #4]	; (4508 <boot_banner+0x8>)
    4502:	f000 b997 	b.w	4834 <printk>
    4506:	bf00      	nop
    4508:	00005bcc 	.word	0x00005bcc

0000450c <nrf_cc3xx_platform_init_no_rng>:
    450c:	b510      	push	{r4, lr}
    450e:	4c0a      	ldr	r4, [pc, #40]	; (4538 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4510:	6823      	ldr	r3, [r4, #0]
    4512:	b11b      	cbz	r3, 451c <nrf_cc3xx_platform_init_no_rng+0x10>
    4514:	2301      	movs	r3, #1
    4516:	6023      	str	r3, [r4, #0]
    4518:	2000      	movs	r0, #0
    451a:	bd10      	pop	{r4, pc}
    451c:	f000 f8f4 	bl	4708 <CC_LibInitNoRng>
    4520:	2800      	cmp	r0, #0
    4522:	d0f7      	beq.n	4514 <nrf_cc3xx_platform_init_no_rng+0x8>
    4524:	3801      	subs	r0, #1
    4526:	2807      	cmp	r0, #7
    4528:	d803      	bhi.n	4532 <nrf_cc3xx_platform_init_no_rng+0x26>
    452a:	4b04      	ldr	r3, [pc, #16]	; (453c <nrf_cc3xx_platform_init_no_rng+0x30>)
    452c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4530:	bd10      	pop	{r4, pc}
    4532:	4803      	ldr	r0, [pc, #12]	; (4540 <nrf_cc3xx_platform_init_no_rng+0x34>)
    4534:	bd10      	pop	{r4, pc}
    4536:	bf00      	nop
    4538:	20000950 	.word	0x20000950
    453c:	00005958 	.word	0x00005958
    4540:	ffff8ffe 	.word	0xffff8ffe

00004544 <nrf_cc3xx_platform_abort>:
    4544:	f3bf 8f4f 	dsb	sy
    4548:	4905      	ldr	r1, [pc, #20]	; (4560 <nrf_cc3xx_platform_abort+0x1c>)
    454a:	4b06      	ldr	r3, [pc, #24]	; (4564 <nrf_cc3xx_platform_abort+0x20>)
    454c:	68ca      	ldr	r2, [r1, #12]
    454e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4552:	4313      	orrs	r3, r2
    4554:	60cb      	str	r3, [r1, #12]
    4556:	f3bf 8f4f 	dsb	sy
    455a:	bf00      	nop
    455c:	e7fd      	b.n	455a <nrf_cc3xx_platform_abort+0x16>
    455e:	bf00      	nop
    4560:	e000ed00 	.word	0xe000ed00
    4564:	05fa0004 	.word	0x05fa0004

00004568 <CC_PalAbort>:
    4568:	b430      	push	{r4, r5}
    456a:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    456e:	2500      	movs	r5, #0
    4570:	4b0b      	ldr	r3, [pc, #44]	; (45a0 <CC_PalAbort+0x38>)
    4572:	4c0c      	ldr	r4, [pc, #48]	; (45a4 <CC_PalAbort+0x3c>)
    4574:	490c      	ldr	r1, [pc, #48]	; (45a8 <CC_PalAbort+0x40>)
    4576:	6849      	ldr	r1, [r1, #4]
    4578:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    457c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    4580:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    4584:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    4588:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    458c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    4590:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    4594:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    4598:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    459c:	bc30      	pop	{r4, r5}
    459e:	4708      	bx	r1
    45a0:	50845000 	.word	0x50845000
    45a4:	50844000 	.word	0x50844000
    45a8:	200000d4 	.word	0x200000d4

000045ac <nrf_cc3xx_platform_set_abort>:
    45ac:	4b02      	ldr	r3, [pc, #8]	; (45b8 <nrf_cc3xx_platform_set_abort+0xc>)
    45ae:	e9d0 1200 	ldrd	r1, r2, [r0]
    45b2:	e9c3 1200 	strd	r1, r2, [r3]
    45b6:	4770      	bx	lr
    45b8:	200000d4 	.word	0x200000d4

000045bc <mutex_free>:
    45bc:	b510      	push	{r4, lr}
    45be:	4604      	mov	r4, r0
    45c0:	b150      	cbz	r0, 45d8 <mutex_free+0x1c>
    45c2:	6863      	ldr	r3, [r4, #4]
    45c4:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    45c8:	d005      	beq.n	45d6 <mutex_free+0x1a>
    45ca:	4a06      	ldr	r2, [pc, #24]	; (45e4 <mutex_free+0x28>)
    45cc:	4293      	cmp	r3, r2
    45ce:	d002      	beq.n	45d6 <mutex_free+0x1a>
    45d0:	2300      	movs	r3, #0
    45d2:	6062      	str	r2, [r4, #4]
    45d4:	6023      	str	r3, [r4, #0]
    45d6:	bd10      	pop	{r4, pc}
    45d8:	4b03      	ldr	r3, [pc, #12]	; (45e8 <mutex_free+0x2c>)
    45da:	4804      	ldr	r0, [pc, #16]	; (45ec <mutex_free+0x30>)
    45dc:	685b      	ldr	r3, [r3, #4]
    45de:	4798      	blx	r3
    45e0:	e7ef      	b.n	45c2 <mutex_free+0x6>
    45e2:	bf00      	nop
    45e4:	a95c5f2c 	.word	0xa95c5f2c
    45e8:	200000d4 	.word	0x200000d4
    45ec:	00005978 	.word	0x00005978

000045f0 <mutex_lock>:
    45f0:	b1c8      	cbz	r0, 4626 <mutex_lock+0x36>
    45f2:	6843      	ldr	r3, [r0, #4]
    45f4:	4a0d      	ldr	r2, [pc, #52]	; (462c <mutex_lock+0x3c>)
    45f6:	4293      	cmp	r3, r2
    45f8:	d013      	beq.n	4622 <mutex_lock+0x32>
    45fa:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    45fe:	d00e      	beq.n	461e <mutex_lock+0x2e>
    4600:	2301      	movs	r3, #1
    4602:	e850 2f00 	ldrex	r2, [r0]
    4606:	4619      	mov	r1, r3
    4608:	e840 1c00 	strex	ip, r1, [r0]
    460c:	f09c 0f00 	teq	ip, #0
    4610:	d1f7      	bne.n	4602 <mutex_lock+0x12>
    4612:	2a01      	cmp	r2, #1
    4614:	d0f5      	beq.n	4602 <mutex_lock+0x12>
    4616:	f3bf 8f5f 	dmb	sy
    461a:	2000      	movs	r0, #0
    461c:	4770      	bx	lr
    461e:	4804      	ldr	r0, [pc, #16]	; (4630 <mutex_lock+0x40>)
    4620:	4770      	bx	lr
    4622:	4804      	ldr	r0, [pc, #16]	; (4634 <mutex_lock+0x44>)
    4624:	4770      	bx	lr
    4626:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    462a:	4770      	bx	lr
    462c:	a95c5f2c 	.word	0xa95c5f2c
    4630:	ffff8fe9 	.word	0xffff8fe9
    4634:	ffff8fea 	.word	0xffff8fea

00004638 <mutex_unlock>:
    4638:	4603      	mov	r3, r0
    463a:	b180      	cbz	r0, 465e <mutex_unlock+0x26>
    463c:	6842      	ldr	r2, [r0, #4]
    463e:	4909      	ldr	r1, [pc, #36]	; (4664 <mutex_unlock+0x2c>)
    4640:	428a      	cmp	r2, r1
    4642:	d00a      	beq.n	465a <mutex_unlock+0x22>
    4644:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    4648:	d005      	beq.n	4656 <mutex_unlock+0x1e>
    464a:	f3bf 8f5f 	dmb	sy
    464e:	2200      	movs	r2, #0
    4650:	4610      	mov	r0, r2
    4652:	601a      	str	r2, [r3, #0]
    4654:	4770      	bx	lr
    4656:	4804      	ldr	r0, [pc, #16]	; (4668 <mutex_unlock+0x30>)
    4658:	4770      	bx	lr
    465a:	4804      	ldr	r0, [pc, #16]	; (466c <mutex_unlock+0x34>)
    465c:	4770      	bx	lr
    465e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4662:	4770      	bx	lr
    4664:	a95c5f2c 	.word	0xa95c5f2c
    4668:	ffff8fe9 	.word	0xffff8fe9
    466c:	ffff8fea 	.word	0xffff8fea

00004670 <mutex_init>:
    4670:	b510      	push	{r4, lr}
    4672:	4604      	mov	r4, r0
    4674:	b120      	cbz	r0, 4680 <mutex_init+0x10>
    4676:	2300      	movs	r3, #0
    4678:	4a03      	ldr	r2, [pc, #12]	; (4688 <mutex_init+0x18>)
    467a:	6023      	str	r3, [r4, #0]
    467c:	6062      	str	r2, [r4, #4]
    467e:	bd10      	pop	{r4, pc}
    4680:	4802      	ldr	r0, [pc, #8]	; (468c <mutex_init+0x1c>)
    4682:	f7ff ff71 	bl	4568 <CC_PalAbort>
    4686:	e7f6      	b.n	4676 <mutex_init+0x6>
    4688:	3a00003a 	.word	0x3a00003a
    468c:	000059a0 	.word	0x000059a0

00004690 <nrf_cc3xx_platform_set_mutexes>:
    4690:	b570      	push	{r4, r5, r6, lr}
    4692:	4c19      	ldr	r4, [pc, #100]	; (46f8 <nrf_cc3xx_platform_set_mutexes+0x68>)
    4694:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4698:	6806      	ldr	r6, [r0, #0]
    469a:	f8c4 c004 	str.w	ip, [r4, #4]
    469e:	f8d0 c008 	ldr.w	ip, [r0, #8]
    46a2:	68c0      	ldr	r0, [r0, #12]
    46a4:	f8c4 c008 	str.w	ip, [r4, #8]
    46a8:	60e0      	str	r0, [r4, #12]
    46aa:	6026      	str	r6, [r4, #0]
    46ac:	6808      	ldr	r0, [r1, #0]
    46ae:	4b13      	ldr	r3, [pc, #76]	; (46fc <nrf_cc3xx_platform_set_mutexes+0x6c>)
    46b0:	4d13      	ldr	r5, [pc, #76]	; (4700 <nrf_cc3xx_platform_set_mutexes+0x70>)
    46b2:	6018      	str	r0, [r3, #0]
    46b4:	6848      	ldr	r0, [r1, #4]
    46b6:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    46ba:	6058      	str	r0, [r3, #4]
    46bc:	6888      	ldr	r0, [r1, #8]
    46be:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    46c2:	6098      	str	r0, [r3, #8]
    46c4:	68c8      	ldr	r0, [r1, #12]
    46c6:	6909      	ldr	r1, [r1, #16]
    46c8:	60d8      	str	r0, [r3, #12]
    46ca:	6119      	str	r1, [r3, #16]
    46cc:	d012      	beq.n	46f4 <nrf_cc3xx_platform_set_mutexes+0x64>
    46ce:	2300      	movs	r3, #0
    46d0:	4a0c      	ldr	r2, [pc, #48]	; (4704 <nrf_cc3xx_platform_set_mutexes+0x74>)
    46d2:	f505 708a 	add.w	r0, r5, #276	; 0x114
    46d6:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    46da:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    46de:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    46e2:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    46e6:	47b0      	blx	r6
    46e8:	6823      	ldr	r3, [r4, #0]
    46ea:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    46ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    46f2:	4718      	bx	r3
    46f4:	bd70      	pop	{r4, r5, r6, pc}
    46f6:	bf00      	nop
    46f8:	200000f0 	.word	0x200000f0
    46fc:	200000dc 	.word	0x200000dc
    4700:	20000968 	.word	0x20000968
    4704:	a95c5f2c 	.word	0xa95c5f2c

00004708 <CC_LibInitNoRng>:
    4708:	b508      	push	{r3, lr}
    470a:	f000 f811 	bl	4730 <CC_HalInit>
    470e:	b930      	cbnz	r0, 471e <CC_LibInitNoRng+0x16>
    4710:	f000 f810 	bl	4734 <CC_PalInit>
    4714:	b938      	cbnz	r0, 4726 <CC_LibInitNoRng+0x1e>
    4716:	4a05      	ldr	r2, [pc, #20]	; (472c <CC_LibInitNoRng+0x24>)
    4718:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    471c:	bd08      	pop	{r3, pc}
    471e:	f000 f837 	bl	4790 <CC_PalTerminate>
    4722:	2003      	movs	r0, #3
    4724:	bd08      	pop	{r3, pc}
    4726:	2004      	movs	r0, #4
    4728:	bd08      	pop	{r3, pc}
    472a:	bf00      	nop
    472c:	50845000 	.word	0x50845000

00004730 <CC_HalInit>:
    4730:	2000      	movs	r0, #0
    4732:	4770      	bx	lr

00004734 <CC_PalInit>:
    4734:	b510      	push	{r4, lr}
    4736:	4811      	ldr	r0, [pc, #68]	; (477c <CC_PalInit+0x48>)
    4738:	f000 f848 	bl	47cc <CC_PalMutexCreate>
    473c:	b100      	cbz	r0, 4740 <CC_PalInit+0xc>
    473e:	bd10      	pop	{r4, pc}
    4740:	480f      	ldr	r0, [pc, #60]	; (4780 <CC_PalInit+0x4c>)
    4742:	f000 f843 	bl	47cc <CC_PalMutexCreate>
    4746:	2800      	cmp	r0, #0
    4748:	d1f9      	bne.n	473e <CC_PalInit+0xa>
    474a:	4c0e      	ldr	r4, [pc, #56]	; (4784 <CC_PalInit+0x50>)
    474c:	4620      	mov	r0, r4
    474e:	f000 f83d 	bl	47cc <CC_PalMutexCreate>
    4752:	2800      	cmp	r0, #0
    4754:	d1f3      	bne.n	473e <CC_PalInit+0xa>
    4756:	4b0c      	ldr	r3, [pc, #48]	; (4788 <CC_PalInit+0x54>)
    4758:	480c      	ldr	r0, [pc, #48]	; (478c <CC_PalInit+0x58>)
    475a:	601c      	str	r4, [r3, #0]
    475c:	f000 f836 	bl	47cc <CC_PalMutexCreate>
    4760:	4601      	mov	r1, r0
    4762:	2800      	cmp	r0, #0
    4764:	d1eb      	bne.n	473e <CC_PalInit+0xa>
    4766:	f000 f82d 	bl	47c4 <CC_PalDmaInit>
    476a:	4604      	mov	r4, r0
    476c:	b108      	cbz	r0, 4772 <CC_PalInit+0x3e>
    476e:	4620      	mov	r0, r4
    4770:	bd10      	pop	{r4, pc}
    4772:	f000 f83f 	bl	47f4 <CC_PalPowerSaveModeInit>
    4776:	4620      	mov	r0, r4
    4778:	e7fa      	b.n	4770 <CC_PalInit+0x3c>
    477a:	bf00      	nop
    477c:	20000130 	.word	0x20000130
    4780:	2000012c 	.word	0x2000012c
    4784:	20000128 	.word	0x20000128
    4788:	20000120 	.word	0x20000120
    478c:	20000124 	.word	0x20000124

00004790 <CC_PalTerminate>:
    4790:	b508      	push	{r3, lr}
    4792:	4808      	ldr	r0, [pc, #32]	; (47b4 <CC_PalTerminate+0x24>)
    4794:	f000 f824 	bl	47e0 <CC_PalMutexDestroy>
    4798:	4807      	ldr	r0, [pc, #28]	; (47b8 <CC_PalTerminate+0x28>)
    479a:	f000 f821 	bl	47e0 <CC_PalMutexDestroy>
    479e:	4807      	ldr	r0, [pc, #28]	; (47bc <CC_PalTerminate+0x2c>)
    47a0:	f000 f81e 	bl	47e0 <CC_PalMutexDestroy>
    47a4:	4806      	ldr	r0, [pc, #24]	; (47c0 <CC_PalTerminate+0x30>)
    47a6:	f000 f81b 	bl	47e0 <CC_PalMutexDestroy>
    47aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    47ae:	f000 b80b 	b.w	47c8 <CC_PalDmaTerminate>
    47b2:	bf00      	nop
    47b4:	20000130 	.word	0x20000130
    47b8:	2000012c 	.word	0x2000012c
    47bc:	20000128 	.word	0x20000128
    47c0:	20000124 	.word	0x20000124

000047c4 <CC_PalDmaInit>:
    47c4:	2000      	movs	r0, #0
    47c6:	4770      	bx	lr

000047c8 <CC_PalDmaTerminate>:
    47c8:	4770      	bx	lr
    47ca:	bf00      	nop

000047cc <CC_PalMutexCreate>:
    47cc:	b508      	push	{r3, lr}
    47ce:	4b03      	ldr	r3, [pc, #12]	; (47dc <CC_PalMutexCreate+0x10>)
    47d0:	6802      	ldr	r2, [r0, #0]
    47d2:	681b      	ldr	r3, [r3, #0]
    47d4:	6810      	ldr	r0, [r2, #0]
    47d6:	4798      	blx	r3
    47d8:	2000      	movs	r0, #0
    47da:	bd08      	pop	{r3, pc}
    47dc:	200000f0 	.word	0x200000f0

000047e0 <CC_PalMutexDestroy>:
    47e0:	b508      	push	{r3, lr}
    47e2:	4b03      	ldr	r3, [pc, #12]	; (47f0 <CC_PalMutexDestroy+0x10>)
    47e4:	6802      	ldr	r2, [r0, #0]
    47e6:	685b      	ldr	r3, [r3, #4]
    47e8:	6810      	ldr	r0, [r2, #0]
    47ea:	4798      	blx	r3
    47ec:	2000      	movs	r0, #0
    47ee:	bd08      	pop	{r3, pc}
    47f0:	200000f0 	.word	0x200000f0

000047f4 <CC_PalPowerSaveModeInit>:
    47f4:	b570      	push	{r4, r5, r6, lr}
    47f6:	4c09      	ldr	r4, [pc, #36]	; (481c <CC_PalPowerSaveModeInit+0x28>)
    47f8:	4d09      	ldr	r5, [pc, #36]	; (4820 <CC_PalPowerSaveModeInit+0x2c>)
    47fa:	6920      	ldr	r0, [r4, #16]
    47fc:	68ab      	ldr	r3, [r5, #8]
    47fe:	4798      	blx	r3
    4800:	b118      	cbz	r0, 480a <CC_PalPowerSaveModeInit+0x16>
    4802:	4b08      	ldr	r3, [pc, #32]	; (4824 <CC_PalPowerSaveModeInit+0x30>)
    4804:	4808      	ldr	r0, [pc, #32]	; (4828 <CC_PalPowerSaveModeInit+0x34>)
    4806:	685b      	ldr	r3, [r3, #4]
    4808:	4798      	blx	r3
    480a:	2100      	movs	r1, #0
    480c:	4a07      	ldr	r2, [pc, #28]	; (482c <CC_PalPowerSaveModeInit+0x38>)
    480e:	68eb      	ldr	r3, [r5, #12]
    4810:	6011      	str	r1, [r2, #0]
    4812:	6920      	ldr	r0, [r4, #16]
    4814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4818:	4718      	bx	r3
    481a:	bf00      	nop
    481c:	200000dc 	.word	0x200000dc
    4820:	200000f0 	.word	0x200000f0
    4824:	200000d4 	.word	0x200000d4
    4828:	000059c4 	.word	0x000059c4
    482c:	20000964 	.word	0x20000964

00004830 <arch_printk_char_out>:
}
    4830:	2000      	movs	r0, #0
    4832:	4770      	bx	lr

00004834 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    4834:	b40f      	push	{r0, r1, r2, r3}
    4836:	b507      	push	{r0, r1, r2, lr}
    4838:	a904      	add	r1, sp, #16
    483a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    483e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    4840:	f7fb fe4c 	bl	4dc <vprintk>

	va_end(ap);
}
    4844:	b003      	add	sp, #12
    4846:	f85d eb04 	ldr.w	lr, [sp], #4
    484a:	b004      	add	sp, #16
    484c:	4770      	bx	lr

0000484e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    484e:	4604      	mov	r4, r0
    4850:	b508      	push	{r3, lr}
    4852:	4608      	mov	r0, r1
    4854:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4856:	461a      	mov	r2, r3
    4858:	47a0      	blx	r4
	return z_impl_z_current_get();
    485a:	f7ff fc91 	bl	4180 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    485e:	f7fd f8e7 	bl	1a30 <z_impl_k_thread_abort>

00004862 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4862:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4864:	f013 0307 	ands.w	r3, r3, #7
    4868:	d105      	bne.n	4876 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    486a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    486c:	2b00      	cmp	r3, #0
    486e:	bf0c      	ite	eq
    4870:	2000      	moveq	r0, #0
    4872:	2003      	movne	r0, #3
    4874:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4876:	2b02      	cmp	r3, #2
    4878:	d105      	bne.n	4886 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    487a:	8b40      	ldrh	r0, [r0, #26]
    487c:	fab0 f080 	clz	r0, r0
    4880:	0940      	lsrs	r0, r0, #5
    4882:	0080      	lsls	r0, r0, #2
    4884:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    4886:	2b01      	cmp	r3, #1
    4888:	d105      	bne.n	4896 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    488a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    488c:	2b00      	cmp	r3, #0
    488e:	bf0c      	ite	eq
    4890:	2000      	moveq	r0, #0
    4892:	2005      	movne	r0, #5
    4894:	4770      	bx	lr
	int evt = EVT_NOP;
    4896:	2000      	movs	r0, #0
}
    4898:	4770      	bx	lr

0000489a <validate_args>:
{
    489a:	b510      	push	{r4, lr}
    489c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    489e:	b100      	cbz	r0, 48a2 <validate_args+0x8>
    48a0:	b911      	cbnz	r1, 48a8 <validate_args+0xe>
		return -EINVAL;
    48a2:	f06f 0015 	mvn.w	r0, #21
}
    48a6:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    48a8:	1d08      	adds	r0, r1, #4
    48aa:	f000 f895 	bl	49d8 <sys_notify_validate>
	if ((rv == 0)
    48ae:	2800      	cmp	r0, #0
    48b0:	d1f9      	bne.n	48a6 <validate_args+0xc>
	    && ((cli->notify.flags
    48b2:	68a3      	ldr	r3, [r4, #8]
    48b4:	2b03      	cmp	r3, #3
    48b6:	d9f6      	bls.n	48a6 <validate_args+0xc>
    48b8:	e7f3      	b.n	48a2 <validate_args+0x8>

000048ba <notify_one>:
{
    48ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48be:	460d      	mov	r5, r1
    48c0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    48c2:	4619      	mov	r1, r3
    48c4:	1d28      	adds	r0, r5, #4
{
    48c6:	4690      	mov	r8, r2
    48c8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    48ca:	f000 f896 	bl	49fa <sys_notify_finalize>
	if (cb) {
    48ce:	4604      	mov	r4, r0
    48d0:	b138      	cbz	r0, 48e2 <notify_one+0x28>
		cb(mgr, cli, state, res);
    48d2:	4633      	mov	r3, r6
    48d4:	4642      	mov	r2, r8
    48d6:	4629      	mov	r1, r5
    48d8:	4638      	mov	r0, r7
    48da:	46a4      	mov	ip, r4
}
    48dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    48e0:	4760      	bx	ip
}
    48e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000048e6 <transition_complete>:
{
    48e6:	b410      	push	{r4}
	__asm__ volatile(
    48e8:	f04f 0420 	mov.w	r4, #32
    48ec:	f3ef 8211 	mrs	r2, BASEPRI
    48f0:	f384 8812 	msr	BASEPRI_MAX, r4
    48f4:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    48f8:	6141      	str	r1, [r0, #20]
}
    48fa:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    48fc:	2101      	movs	r1, #1
    48fe:	f7fb bdfb 	b.w	4f8 <process_event>

00004902 <onoff_manager_init>:
{
    4902:	b538      	push	{r3, r4, r5, lr}
    4904:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4906:	4605      	mov	r5, r0
    4908:	b158      	cbz	r0, 4922 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    490a:	b151      	cbz	r1, 4922 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    490c:	680b      	ldr	r3, [r1, #0]
    490e:	b143      	cbz	r3, 4922 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4910:	684b      	ldr	r3, [r1, #4]
    4912:	b133      	cbz	r3, 4922 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4914:	221c      	movs	r2, #28
    4916:	2100      	movs	r1, #0
    4918:	f000 f93a 	bl	4b90 <memset>
	return 0;
    491c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    491e:	612c      	str	r4, [r5, #16]
}
    4920:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4922:	f06f 0015 	mvn.w	r0, #21
    4926:	e7fb      	b.n	4920 <onoff_manager_init+0x1e>

00004928 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4928:	b570      	push	{r4, r5, r6, lr}
    492a:	4605      	mov	r5, r0
    492c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    492e:	f7ff ffb4 	bl	489a <validate_args>

	if (rv < 0) {
    4932:	1e04      	subs	r4, r0, #0
    4934:	db15      	blt.n	4962 <onoff_request+0x3a>
    4936:	f04f 0320 	mov.w	r3, #32
    493a:	f3ef 8211 	mrs	r2, BASEPRI
    493e:	f383 8812 	msr	BASEPRI_MAX, r3
    4942:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4946:	f64f 71ff 	movw	r1, #65535	; 0xffff
    494a:	8b6b      	ldrh	r3, [r5, #26]
    494c:	8b2c      	ldrh	r4, [r5, #24]
    494e:	428b      	cmp	r3, r1
    4950:	f004 0407 	and.w	r4, r4, #7
    4954:	d107      	bne.n	4966 <onoff_request+0x3e>
	__asm__ volatile(
    4956:	f382 8811 	msr	BASEPRI, r2
    495a:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    495e:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    4962:	4620      	mov	r0, r4
    4964:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    4966:	2c02      	cmp	r4, #2
    4968:	d10c      	bne.n	4984 <onoff_request+0x5c>
		mgr->refs += 1U;
    496a:	3301      	adds	r3, #1
    496c:	836b      	strh	r3, [r5, #26]
    496e:	f382 8811 	msr	BASEPRI, r2
    4972:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    4976:	2300      	movs	r3, #0
    4978:	4622      	mov	r2, r4
    497a:	4631      	mov	r1, r6
    497c:	4628      	mov	r0, r5
    497e:	f7ff ff9c 	bl	48ba <notify_one>
    4982:	e7ee      	b.n	4962 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    4984:	2c06      	cmp	r4, #6
    4986:	d814      	bhi.n	49b2 <onoff_request+0x8a>
    4988:	e8df f004 	tbb	[pc, r4]
    498c:	13131304 	.word	0x13131304
    4990:	1a04      	.short	0x1a04
    4992:	04          	.byte	0x04
    4993:	00          	.byte	0x00
	parent->next = child;
    4994:	2300      	movs	r3, #0
    4996:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    4998:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    499a:	b93b      	cbnz	r3, 49ac <onoff_request+0x84>
	list->head = node;
    499c:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    49a0:	b9ac      	cbnz	r4, 49ce <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    49a2:	2102      	movs	r1, #2
    49a4:	4628      	mov	r0, r5
    49a6:	f7fb fda7 	bl	4f8 <process_event>
    49aa:	e7da      	b.n	4962 <onoff_request+0x3a>
	parent->next = child;
    49ac:	601e      	str	r6, [r3, #0]
	list->tail = node;
    49ae:	606e      	str	r6, [r5, #4]
}
    49b0:	e7f6      	b.n	49a0 <onoff_request+0x78>
    49b2:	f382 8811 	msr	BASEPRI, r2
    49b6:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    49ba:	f06f 0404 	mvn.w	r4, #4
    49be:	e7d0      	b.n	4962 <onoff_request+0x3a>
    49c0:	f382 8811 	msr	BASEPRI, r2
    49c4:	f3bf 8f6f 	isb	sy
    49c8:	f06f 0485 	mvn.w	r4, #133	; 0x85
    49cc:	e7c9      	b.n	4962 <onoff_request+0x3a>
    49ce:	f382 8811 	msr	BASEPRI, r2
    49d2:	f3bf 8f6f 	isb	sy
		if (notify) {
    49d6:	e7c4      	b.n	4962 <onoff_request+0x3a>

000049d8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    49d8:	4603      	mov	r3, r0
    49da:	b158      	cbz	r0, 49f4 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    49dc:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    49de:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    49e2:	2a01      	cmp	r2, #1
    49e4:	d003      	beq.n	49ee <sys_notify_validate+0x16>
    49e6:	2a03      	cmp	r2, #3
    49e8:	d104      	bne.n	49f4 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    49ea:	6802      	ldr	r2, [r0, #0]
    49ec:	b112      	cbz	r2, 49f4 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    49ee:	2000      	movs	r0, #0
    49f0:	6098      	str	r0, [r3, #8]
    49f2:	4770      	bx	lr
    49f4:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    49f8:	4770      	bx	lr

000049fa <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    49fa:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    49fc:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    49fe:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    4a02:	2a03      	cmp	r2, #3
    4a04:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    4a08:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    4a0a:	bf14      	ite	ne
    4a0c:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4a0e:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4a10:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4a12:	4770      	bx	lr

00004a14 <encode_uint>:
{
    4a14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a18:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    4a1a:	78d3      	ldrb	r3, [r2, #3]
{
    4a1c:	4680      	mov	r8, r0
	switch (specifier) {
    4a1e:	2b6f      	cmp	r3, #111	; 0x6f
{
    4a20:	460f      	mov	r7, r1
    4a22:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4a24:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    4a28:	d029      	beq.n	4a7e <encode_uint+0x6a>
    4a2a:	d824      	bhi.n	4a76 <encode_uint+0x62>
		return 10;
    4a2c:	2b58      	cmp	r3, #88	; 0x58
    4a2e:	bf0c      	ite	eq
    4a30:	2610      	moveq	r6, #16
    4a32:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    4a34:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    4a38:	4632      	mov	r2, r6
    4a3a:	2300      	movs	r3, #0
    4a3c:	4640      	mov	r0, r8
    4a3e:	4639      	mov	r1, r7
    4a40:	f7fb fb88 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4a44:	2a09      	cmp	r2, #9
    4a46:	b2d4      	uxtb	r4, r2
    4a48:	d81e      	bhi.n	4a88 <encode_uint+0x74>
    4a4a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    4a4c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4a4e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    4a50:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4a54:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    4a58:	d301      	bcc.n	4a5e <encode_uint+0x4a>
    4a5a:	45d1      	cmp	r9, sl
    4a5c:	d811      	bhi.n	4a82 <encode_uint+0x6e>
	if (conv->flag_hash) {
    4a5e:	782b      	ldrb	r3, [r5, #0]
    4a60:	069b      	lsls	r3, r3, #26
    4a62:	d505      	bpl.n	4a70 <encode_uint+0x5c>
		if (radix == 8) {
    4a64:	2e08      	cmp	r6, #8
    4a66:	d115      	bne.n	4a94 <encode_uint+0x80>
			conv->altform_0 = true;
    4a68:	78ab      	ldrb	r3, [r5, #2]
    4a6a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    4a6e:	70ab      	strb	r3, [r5, #2]
}
    4a70:	4648      	mov	r0, r9
    4a72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    4a76:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    4a7a:	2b70      	cmp	r3, #112	; 0x70
    4a7c:	e7d7      	b.n	4a2e <encode_uint+0x1a>
	switch (specifier) {
    4a7e:	2608      	movs	r6, #8
    4a80:	e7d8      	b.n	4a34 <encode_uint+0x20>
		value /= radix;
    4a82:	4680      	mov	r8, r0
    4a84:	460f      	mov	r7, r1
    4a86:	e7d7      	b.n	4a38 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4a88:	f1bb 0f19 	cmp.w	fp, #25
    4a8c:	bf94      	ite	ls
    4a8e:	3437      	addls	r4, #55	; 0x37
    4a90:	3457      	addhi	r4, #87	; 0x57
    4a92:	e7db      	b.n	4a4c <encode_uint+0x38>
		} else if (radix == 16) {
    4a94:	2e10      	cmp	r6, #16
    4a96:	d1eb      	bne.n	4a70 <encode_uint+0x5c>
			conv->altform_0c = true;
    4a98:	78ab      	ldrb	r3, [r5, #2]
    4a9a:	f043 0310 	orr.w	r3, r3, #16
    4a9e:	e7e6      	b.n	4a6e <encode_uint+0x5a>

00004aa0 <outs>:
{
    4aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4aa4:	4607      	mov	r7, r0
    4aa6:	4688      	mov	r8, r1
    4aa8:	4615      	mov	r5, r2
    4aaa:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4aac:	4614      	mov	r4, r2
    4aae:	42b4      	cmp	r4, r6
    4ab0:	d305      	bcc.n	4abe <outs+0x1e>
    4ab2:	b10e      	cbz	r6, 4ab8 <outs+0x18>
	return (int)count;
    4ab4:	1b60      	subs	r0, r4, r5
    4ab6:	e008      	b.n	4aca <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4ab8:	7823      	ldrb	r3, [r4, #0]
    4aba:	2b00      	cmp	r3, #0
    4abc:	d0fa      	beq.n	4ab4 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    4abe:	4641      	mov	r1, r8
    4ac0:	f814 0b01 	ldrb.w	r0, [r4], #1
    4ac4:	47b8      	blx	r7
		if (rc < 0) {
    4ac6:	2800      	cmp	r0, #0
    4ac8:	daf1      	bge.n	4aae <outs+0xe>
}
    4aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004ace <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    4ace:	4770      	bx	lr

00004ad0 <pm_state_exit_post_ops>:
    4ad0:	2300      	movs	r3, #0
    4ad2:	f383 8811 	msr	BASEPRI, r3
    4ad6:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    4ada:	4770      	bx	lr

00004adc <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    4adc:	2000      	movs	r0, #0
{
    4ade:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    4ae0:	f7fc f9ca 	bl	e78 <sys_reboot>

00004ae4 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4ae4:	f000 bb86 	b.w	51f4 <z_fatal_error>

00004ae8 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    4ae8:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4aea:	6800      	ldr	r0, [r0, #0]
    4aec:	f000 bb82 	b.w	51f4 <z_fatal_error>

00004af0 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4af0:	2100      	movs	r1, #0
    4af2:	2001      	movs	r0, #1
    4af4:	f7ff bff6 	b.w	4ae4 <z_arm_fatal_error>

00004af8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    4af8:	b508      	push	{r3, lr}
	handler();
    4afa:	f7fc fcfd 	bl	14f8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4b02:	f7fc bdbf 	b.w	1684 <z_arm_exc_exit>

00004b06 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    4b06:	6e43      	ldr	r3, [r0, #100]	; 0x64
    4b08:	f383 880b 	msr	PSPLIM, r3
}
    4b0c:	4770      	bx	lr

00004b0e <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    4b0e:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    4b12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4b16:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    4b18:	bf08      	it	eq
    4b1a:	f06f 0015 	mvneq.w	r0, #21
    4b1e:	4770      	bx	lr

00004b20 <mpu_configure_region>:
{
    4b20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    4b22:	890a      	ldrh	r2, [r1, #8]
    4b24:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    4b26:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    4b28:	684d      	ldr	r5, [r1, #4]
    4b2a:	f002 021f 	and.w	r2, r2, #31
    4b2e:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    4b32:	9300      	str	r3, [sp, #0]
    4b34:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    4b38:	f023 031f 	bic.w	r3, r3, #31
    4b3c:	1e6a      	subs	r2, r5, #1
    4b3e:	4413      	add	r3, r2
    4b40:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    4b44:	2807      	cmp	r0, #7
    4b46:	9303      	str	r3, [sp, #12]
    4b48:	d804      	bhi.n	4b54 <mpu_configure_region+0x34>
	region_init(index, region_conf);
    4b4a:	4669      	mov	r1, sp
    4b4c:	f7fc ffa2 	bl	1a94 <region_init>
}
    4b50:	b004      	add	sp, #16
    4b52:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    4b54:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    4b58:	e7fa      	b.n	4b50 <mpu_configure_region+0x30>

00004b5a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4b5a:	4603      	mov	r3, r0
	size_t n = 0;
    4b5c:	2000      	movs	r0, #0

	while (*s != '\0') {
    4b5e:	5c1a      	ldrb	r2, [r3, r0]
    4b60:	b902      	cbnz	r2, 4b64 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    4b62:	4770      	bx	lr
		n++;
    4b64:	3001      	adds	r0, #1
    4b66:	e7fa      	b.n	4b5e <strlen+0x4>

00004b68 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4b68:	4603      	mov	r3, r0
	size_t n = 0;
    4b6a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    4b6c:	5c1a      	ldrb	r2, [r3, r0]
    4b6e:	b10a      	cbz	r2, 4b74 <strnlen+0xc>
    4b70:	4288      	cmp	r0, r1
    4b72:	d100      	bne.n	4b76 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    4b74:	4770      	bx	lr
		n++;
    4b76:	3001      	adds	r0, #1
    4b78:	e7f8      	b.n	4b6c <strnlen+0x4>

00004b7a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    4b7a:	b510      	push	{r4, lr}
    4b7c:	1e43      	subs	r3, r0, #1
    4b7e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    4b80:	4291      	cmp	r1, r2
    4b82:	d100      	bne.n	4b86 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4b84:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    4b86:	f811 4b01 	ldrb.w	r4, [r1], #1
    4b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4b8e:	e7f7      	b.n	4b80 <memcpy+0x6>

00004b90 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    4b90:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    4b92:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    4b94:	4402      	add	r2, r0
    4b96:	4293      	cmp	r3, r2
    4b98:	d100      	bne.n	4b9c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4b9a:	4770      	bx	lr
		*(d_byte++) = c_byte;
    4b9c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4ba0:	e7f9      	b.n	4b96 <memset+0x6>

00004ba2 <_stdout_hook_default>:
}
    4ba2:	f04f 30ff 	mov.w	r0, #4294967295
    4ba6:	4770      	bx	lr

00004ba8 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4ba8:	220c      	movs	r2, #12
    4baa:	6903      	ldr	r3, [r0, #16]
    4bac:	b2c9      	uxtb	r1, r1
    4bae:	fb01 3302 	mla	r3, r1, r2, r3
    4bb2:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    4bb4:	f000 0007 	and.w	r0, r0, #7
    4bb8:	4770      	bx	lr

00004bba <set_on_state>:
	__asm__ volatile(
    4bba:	f04f 0320 	mov.w	r3, #32
    4bbe:	f3ef 8211 	mrs	r2, BASEPRI
    4bc2:	f383 8812 	msr	BASEPRI_MAX, r3
    4bc6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4bca:	6803      	ldr	r3, [r0, #0]
    4bcc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4bd0:	f043 0302 	orr.w	r3, r3, #2
    4bd4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4bd6:	f382 8811 	msr	BASEPRI, r2
    4bda:	f3bf 8f6f 	isb	sy
}
    4bde:	4770      	bx	lr

00004be0 <stop>:
{
    4be0:	b570      	push	{r4, r5, r6, lr}
    4be2:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    4be4:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    4be6:	f04f 0420 	mov.w	r4, #32
    4bea:	f3ef 8511 	mrs	r5, BASEPRI
    4bee:	f384 8812 	msr	BASEPRI_MAX, r4
    4bf2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4bf6:	260c      	movs	r6, #12
    4bf8:	fb06 3401 	mla	r4, r6, r1, r3
    4bfc:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4bfe:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    4c02:	d008      	beq.n	4c16 <stop+0x36>
    4c04:	42a2      	cmp	r2, r4
    4c06:	d006      	beq.n	4c16 <stop+0x36>
	__asm__ volatile(
    4c08:	f385 8811 	msr	BASEPRI, r5
    4c0c:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    4c10:	f04f 30ff 	mov.w	r0, #4294967295
}
    4c14:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4c16:	2201      	movs	r2, #1
    4c18:	fb06 3301 	mla	r3, r6, r1, r3
    4c1c:	679a      	str	r2, [r3, #120]	; 0x78
    4c1e:	f385 8811 	msr	BASEPRI, r5
    4c22:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    4c26:	6843      	ldr	r3, [r0, #4]
    4c28:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    4c2c:	685b      	ldr	r3, [r3, #4]
    4c2e:	4798      	blx	r3
	return 0;
    4c30:	2000      	movs	r0, #0
    4c32:	e7ef      	b.n	4c14 <stop+0x34>

00004c34 <api_stop>:
	return stop(dev, subsys, CTX_API);
    4c34:	2280      	movs	r2, #128	; 0x80
    4c36:	f7ff bfd3 	b.w	4be0 <stop>

00004c3a <async_start>:
{
    4c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c3c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    4c3e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    4c40:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4c42:	f04f 0520 	mov.w	r5, #32
    4c46:	f3ef 8611 	mrs	r6, BASEPRI
    4c4a:	f385 8812 	msr	BASEPRI_MAX, r5
    4c4e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4c52:	250c      	movs	r5, #12
    4c54:	fb05 4401 	mla	r4, r5, r1, r4
    4c58:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4c5a:	f005 0c07 	and.w	ip, r5, #7
    4c5e:	f1bc 0f01 	cmp.w	ip, #1
    4c62:	d10c      	bne.n	4c7e <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4c64:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    4c66:	f386 8811 	msr	BASEPRI, r6
    4c6a:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    4c6e:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    4c72:	6843      	ldr	r3, [r0, #4]
    4c74:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    4c78:	4798      	blx	r3
	return 0;
    4c7a:	2000      	movs	r0, #0
}
    4c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4c7e:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    4c82:	42af      	cmp	r7, r5
    4c84:	f386 8811 	msr	BASEPRI, r6
    4c88:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    4c8c:	bf0c      	ite	eq
    4c8e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    4c92:	f04f 30ff 	movne.w	r0, #4294967295
    4c96:	e7f1      	b.n	4c7c <async_start+0x42>

00004c98 <api_start>:
{
    4c98:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    4c9a:	2480      	movs	r4, #128	; 0x80
    4c9c:	9400      	str	r4, [sp, #0]
    4c9e:	f7ff ffcc 	bl	4c3a <async_start>
}
    4ca2:	b002      	add	sp, #8
    4ca4:	bd10      	pop	{r4, pc}

00004ca6 <onoff_started_callback>:
{
    4ca6:	b410      	push	{r4}
	notify(mgr, 0);
    4ca8:	241c      	movs	r4, #28
	return &data->mgr[type];
    4caa:	6900      	ldr	r0, [r0, #16]
    4cac:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4cae:	fb03 0004 	mla	r0, r3, r4, r0
    4cb2:	2100      	movs	r1, #0
}
    4cb4:	bc10      	pop	{r4}
	notify(mgr, 0);
    4cb6:	4710      	bx	r2

00004cb8 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    4cb8:	2003      	movs	r0, #3
    4cba:	f000 b9d6 	b.w	506a <nrfx_clock_start>

00004cbe <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    4cbe:	2002      	movs	r0, #2
    4cc0:	f000 b9d3 	b.w	506a <nrfx_clock_start>

00004cc4 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    4cc4:	2000      	movs	r0, #0
    4cc6:	f000 b9d0 	b.w	506a <nrfx_clock_start>

00004cca <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    4cca:	2003      	movs	r0, #3
    4ccc:	f000 ba2c 	b.w	5128 <nrfx_clock_stop>

00004cd0 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    4cd0:	2002      	movs	r0, #2
    4cd2:	f000 ba29 	b.w	5128 <nrfx_clock_stop>

00004cd6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4cd6:	2000      	movs	r0, #0
    4cd8:	f000 ba26 	b.w	5128 <nrfx_clock_stop>

00004cdc <blocking_start_callback>:
{
    4cdc:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4cde:	f7fe bf2b 	b.w	3b38 <z_impl_k_sem_give>

00004ce2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4ce2:	6843      	ldr	r3, [r0, #4]
}
    4ce4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4ce6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    4ce8:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    4cea:	600b      	str	r3, [r1, #0]
}
    4cec:	4770      	bx	lr

00004cee <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4cee:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    4cf0:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4cf4:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    4cf6:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    4cfa:	6098      	str	r0, [r3, #8]
}
    4cfc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4cfe:	60d9      	str	r1, [r3, #12]
    4d00:	4770      	bx	lr

00004d02 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4d02:	6843      	ldr	r3, [r0, #4]
}
    4d04:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4d06:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    4d08:	6099      	str	r1, [r3, #8]
}
    4d0a:	4770      	bx	lr

00004d0c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4d0c:	6843      	ldr	r3, [r0, #4]
}
    4d0e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4d10:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    4d12:	60d9      	str	r1, [r3, #12]
}
    4d14:	4770      	bx	lr

00004d16 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4d16:	6843      	ldr	r3, [r0, #4]
    4d18:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4d1a:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    4d1c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    4d20:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    4d22:	6090      	str	r0, [r2, #8]
}
    4d24:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4d26:	60d3      	str	r3, [r2, #12]
    4d28:	4770      	bx	lr

00004d2a <gpio_nrfx_manage_callback>:
{
    4d2a:	b510      	push	{r4, lr}
	return port->data;
    4d2c:	6903      	ldr	r3, [r0, #16]
	return list->head;
    4d2e:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    4d30:	b1f8      	cbz	r0, 4d72 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4d32:	4288      	cmp	r0, r1
    4d34:	d119      	bne.n	4d6a <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    4d36:	689c      	ldr	r4, [r3, #8]
	return node->next;
    4d38:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    4d3a:	42a1      	cmp	r1, r4
	list->head = node;
    4d3c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4d3e:	d100      	bne.n	4d42 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    4d40:	6098      	str	r0, [r3, #8]
	parent->next = child;
    4d42:	2000      	movs	r0, #0
    4d44:	6008      	str	r0, [r1, #0]
	if (set) {
    4d46:	b12a      	cbz	r2, 4d54 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    4d48:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    4d4a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    4d4c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    4d4e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    4d50:	b902      	cbnz	r2, 4d54 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    4d52:	6099      	str	r1, [r3, #8]
	return 0;
    4d54:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4d56:	e010      	b.n	4d7a <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4d58:	4281      	cmp	r1, r0
    4d5a:	d106      	bne.n	4d6a <gpio_nrfx_manage_callback+0x40>
	return node->next;
    4d5c:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    4d5e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    4d60:	6898      	ldr	r0, [r3, #8]
    4d62:	4281      	cmp	r1, r0
    4d64:	d1ed      	bne.n	4d42 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    4d66:	609c      	str	r4, [r3, #8]
}
    4d68:	e7eb      	b.n	4d42 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    4d6a:	4604      	mov	r4, r0
    4d6c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4d6e:	2800      	cmp	r0, #0
    4d70:	d1f2      	bne.n	4d58 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    4d72:	2a00      	cmp	r2, #0
    4d74:	d1e8      	bne.n	4d48 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    4d76:	f06f 0015 	mvn.w	r0, #21
}
    4d7a:	bd10      	pop	{r4, pc}

00004d7c <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    4d7c:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    4d7e:	6843      	ldr	r3, [r0, #4]
    4d80:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    4d82:	7a05      	ldrb	r5, [r0, #8]
    4d84:	6844      	ldr	r4, [r0, #4]
    4d86:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    4d8a:	42a3      	cmp	r3, r4
    4d8c:	d302      	bcc.n	4d94 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    4d8e:	f06f 0001 	mvn.w	r0, #1
}
    4d92:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    4d94:	795c      	ldrb	r4, [r3, #5]
    4d96:	428c      	cmp	r4, r1
    4d98:	d001      	beq.n	4d9e <pinctrl_lookup_state+0x22>
		(*state)++;
    4d9a:	3308      	adds	r3, #8
    4d9c:	e7f0      	b.n	4d80 <pinctrl_lookup_state+0x4>
			return 0;
    4d9e:	2000      	movs	r0, #0
    4da0:	e7f7      	b.n	4d92 <pinctrl_lookup_state+0x16>

00004da2 <uarte_nrfx_config_get>:
{
    4da2:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    4da4:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    4da6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    4daa:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4dae:	2000      	movs	r0, #0
    4db0:	4770      	bx	lr

00004db2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4db2:	6843      	ldr	r3, [r0, #4]
    4db4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4db6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4dba:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4dbe:	4770      	bx	lr

00004dc0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4dc0:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    4dc2:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    4dc4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4dc6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4dca:	b150      	cbz	r0, 4de2 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4dcc:	2000      	movs	r0, #0
	*c = *data->rx_data;
    4dce:	6952      	ldr	r2, [r2, #20]
    4dd0:	7812      	ldrb	r2, [r2, #0]
    4dd2:	700a      	strb	r2, [r1, #0]
    4dd4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    4dd8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ddc:	2201      	movs	r2, #1
    4dde:	601a      	str	r2, [r3, #0]
	return 0;
    4de0:	4770      	bx	lr
		return -1;
    4de2:	f04f 30ff 	mov.w	r0, #4294967295
}
    4de6:	4770      	bx	lr

00004de8 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    4de8:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    4dea:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4dec:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4df0:	b940      	cbnz	r0, 4e04 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    4df2:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4df4:	079b      	lsls	r3, r3, #30
    4df6:	d406      	bmi.n	4e06 <is_tx_ready.isra.0+0x1e>
    4df8:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    4dfc:	3800      	subs	r0, #0
    4dfe:	bf18      	it	ne
    4e00:	2001      	movne	r0, #1
    4e02:	4770      	bx	lr
    4e04:	2001      	movs	r0, #1
}
    4e06:	4770      	bx	lr

00004e08 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    4e08:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    4e0a:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    4e0c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    4e10:	05c9      	lsls	r1, r1, #23
    4e12:	d518      	bpl.n	4e46 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e14:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    4e18:	b1a9      	cbz	r1, 4e46 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    4e1a:	f04f 0020 	mov.w	r0, #32
    4e1e:	f3ef 8111 	mrs	r1, BASEPRI
    4e22:	f380 8812 	msr	BASEPRI_MAX, r0
    4e26:	f3bf 8f6f 	isb	sy
    4e2a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4e2e:	b130      	cbz	r0, 4e3e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e30:	2000      	movs	r0, #0
    4e32:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    4e36:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e3a:	2001      	movs	r0, #1
    4e3c:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    4e3e:	f381 8811 	msr	BASEPRI, r1
    4e42:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4e46:	6852      	ldr	r2, [r2, #4]
    4e48:	06d2      	lsls	r2, r2, #27
    4e4a:	d515      	bpl.n	4e78 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    4e4c:	f04f 0120 	mov.w	r1, #32
    4e50:	f3ef 8211 	mrs	r2, BASEPRI
    4e54:	f381 8812 	msr	BASEPRI_MAX, r1
    4e58:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e5c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    4e60:	b111      	cbz	r1, 4e68 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4e62:	2100      	movs	r1, #0
    4e64:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    4e68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    4e6c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    4e70:	f382 8811 	msr	BASEPRI, r2
    4e74:	f3bf 8f6f 	isb	sy
}
    4e78:	4770      	bx	lr

00004e7a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    4e7a:	4770      	bx	lr

00004e7c <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4e7c:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4e7e:	f100 0350 	add.w	r3, r0, #80	; 0x50
    4e82:	009b      	lsls	r3, r3, #2
    4e84:	b29b      	uxth	r3, r3
    4e86:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    4e8a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    4e8e:	601a      	str	r2, [r3, #0]
    4e90:	681b      	ldr	r3, [r3, #0]
}
    4e92:	4770      	bx	lr

00004e94 <sys_clock_cycle_get_32>:
{
    4e94:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    4e96:	f7fd fd13 	bl	28c0 <z_nrf_rtc_timer_read>
}
    4e9a:	bd08      	pop	{r3, pc}

00004e9c <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    4e9c:	2000      	movs	r0, #0
{
    4e9e:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    4ea0:	f7fc fd7c 	bl	199c <sys_arch_reboot>

00004ea4 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    4ea4:	f7ff bb32 	b.w	450c <nrf_cc3xx_platform_init_no_rng>

00004ea8 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    4ea8:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    4eaa:	f7fc f9b5 	bl	1218 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    4eae:	f7fc fa9b 	bl	13e8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    4eb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    4eb6:	f7ff bb29 	b.w	450c <nrf_cc3xx_platform_init_no_rng>

00004eba <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4eba:	4700      	bx	r0

00004ebc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4ebc:	f000 baee 	b.w	549c <z_impl_k_busy_wait>

00004ec0 <clock_stop>:
{
    4ec0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    4ec2:	2803      	cmp	r0, #3
    4ec4:	f200 80a7 	bhi.w	5016 <clock_stop+0x156>
    4ec8:	e8df f000 	tbb	[pc, r0]
    4ecc:	35271902 	.word	0x35271902
    4ed0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4ed4:	2202      	movs	r2, #2
    4ed6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4eda:	2200      	movs	r2, #0
    4edc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4ee0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ee4:	2201      	movs	r2, #1
    4ee6:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4ee8:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4eea:	2301      	movs	r3, #1
    4eec:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    4ef0:	2803      	cmp	r0, #3
    4ef2:	f200 8090 	bhi.w	5016 <clock_stop+0x156>
    4ef6:	e8df f000 	tbb	[pc, r0]
    4efa:	692c      	.short	0x692c
    4efc:	9a78      	.short	0x9a78
    p_reg->INTENCLR = mask;
    4efe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4f02:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f04:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    4f06:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f0a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    4f0e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4f12:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f16:	605a      	str	r2, [r3, #4]
    4f18:	e7e7      	b.n	4eea <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    4f1a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
    4f22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f26:	2200      	movs	r2, #0
    4f28:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    4f2c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f30:	2201      	movs	r2, #1
    4f32:	625a      	str	r2, [r3, #36]	; 0x24
    4f34:	e7d8      	b.n	4ee8 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    4f36:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
    4f3e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f42:	2200      	movs	r2, #0
    4f44:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4f48:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f4c:	2201      	movs	r2, #1
    4f4e:	61da      	str	r2, [r3, #28]
    4f50:	e7ca      	b.n	4ee8 <clock_stop+0x28>
    switch (domain)
    4f52:	f242 7510 	movw	r5, #10000	; 0x2710
    4f56:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    4f5a:	b36c      	cbz	r4, 4fb8 <clock_stop+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4f5c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4f60:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4f64:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4f66:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4f6a:	03d9      	lsls	r1, r3, #15
    4f6c:	d553      	bpl.n	5016 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4f6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4f72:	2801      	cmp	r0, #1
    4f74:	d14f      	bne.n	5016 <clock_stop+0x156>
    4f76:	f7ff ffa1 	bl	4ebc <nrfx_busy_wait>
    4f7a:	3d01      	subs	r5, #1
    4f7c:	d1ed      	bne.n	4f5a <clock_stop+0x9a>
    4f7e:	e04a      	b.n	5016 <clock_stop+0x156>
    4f80:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4f84:	2801      	cmp	r0, #1
    4f86:	d146      	bne.n	5016 <clock_stop+0x156>
    4f88:	f7ff ff98 	bl	4ebc <nrfx_busy_wait>
    4f8c:	3d01      	subs	r5, #1
    4f8e:	d152      	bne.n	5036 <clock_stop+0x176>
    4f90:	e041      	b.n	5016 <clock_stop+0x156>
    4f92:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4f96:	2801      	cmp	r0, #1
    4f98:	d13d      	bne.n	5016 <clock_stop+0x156>
    4f9a:	f7ff ff8f 	bl	4ebc <nrfx_busy_wait>
    4f9e:	3d01      	subs	r5, #1
    4fa0:	d039      	beq.n	5016 <clock_stop+0x156>
            if (p_clk_src != NULL)
    4fa2:	b1c4      	cbz	r4, 4fd6 <clock_stop+0x116>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4fa4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4fa8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4fac:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4fae:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4fb2:	03db      	lsls	r3, r3, #15
    4fb4:	d52f      	bpl.n	5016 <clock_stop+0x156>
    4fb6:	e7ec      	b.n	4f92 <clock_stop+0xd2>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4fb8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4fbc:	03da      	lsls	r2, r3, #15
    4fbe:	d52a      	bpl.n	5016 <clock_stop+0x156>
    4fc0:	2001      	movs	r0, #1
    4fc2:	f7ff ff7b 	bl	4ebc <nrfx_busy_wait>
    4fc6:	3d01      	subs	r5, #1
    4fc8:	d1f6      	bne.n	4fb8 <clock_stop+0xf8>
    4fca:	e024      	b.n	5016 <clock_stop+0x156>
    switch (domain)
    4fcc:	f242 7510 	movw	r5, #10000	; 0x2710
    4fd0:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    4fd4:	e7e5      	b.n	4fa2 <clock_stop+0xe2>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4fd6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4fda:	03d8      	lsls	r0, r3, #15
    4fdc:	d51b      	bpl.n	5016 <clock_stop+0x156>
    4fde:	2001      	movs	r0, #1
    4fe0:	f7ff ff6c 	bl	4ebc <nrfx_busy_wait>
    4fe4:	3d01      	subs	r5, #1
    4fe6:	d1f6      	bne.n	4fd6 <clock_stop+0x116>
    4fe8:	e015      	b.n	5016 <clock_stop+0x156>
    switch (domain)
    4fea:	f242 7510 	movw	r5, #10000	; 0x2710
    4fee:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    4ff2:	b194      	cbz	r4, 501a <clock_stop+0x15a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    4ff4:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    4ff8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4ffc:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    4ffe:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    5002:	03d9      	lsls	r1, r3, #15
    5004:	d507      	bpl.n	5016 <clock_stop+0x156>
    5006:	f89d 0007 	ldrb.w	r0, [sp, #7]
    500a:	2801      	cmp	r0, #1
    500c:	d103      	bne.n	5016 <clock_stop+0x156>
    500e:	f7ff ff55 	bl	4ebc <nrfx_busy_wait>
    5012:	3d01      	subs	r5, #1
    5014:	d1ed      	bne.n	4ff2 <clock_stop+0x132>
}
    5016:	b002      	add	sp, #8
    5018:	bd70      	pop	{r4, r5, r6, pc}
    501a:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    501e:	03da      	lsls	r2, r3, #15
    5020:	d5f9      	bpl.n	5016 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5022:	2001      	movs	r0, #1
    5024:	f7ff ff4a 	bl	4ebc <nrfx_busy_wait>
    5028:	3d01      	subs	r5, #1
    502a:	d1f6      	bne.n	501a <clock_stop+0x15a>
    502c:	e7f3      	b.n	5016 <clock_stop+0x156>
    switch (domain)
    502e:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    5032:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    5036:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    503a:	03db      	lsls	r3, r3, #15
    503c:	d5eb      	bpl.n	5016 <clock_stop+0x156>
    503e:	2c00      	cmp	r4, #0
    5040:	d19e      	bne.n	4f80 <clock_stop+0xc0>
    5042:	2001      	movs	r0, #1
    5044:	e7a0      	b.n	4f88 <clock_stop+0xc8>

00005046 <nrfx_clock_enable>:
{
    5046:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5048:	2005      	movs	r0, #5
    504a:	f7fc fa31 	bl	14b0 <arch_irq_is_enabled>
    504e:	b910      	cbnz	r0, 5056 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5050:	2005      	movs	r0, #5
    5052:	f7fc fa0b 	bl	146c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5056:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    505a:	2201      	movs	r2, #1
    505c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    5060:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    5064:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    5068:	bd08      	pop	{r3, pc}

0000506a <nrfx_clock_start>:
{
    506a:	b508      	push	{r3, lr}
    switch (domain)
    506c:	2803      	cmp	r0, #3
    506e:	d819      	bhi.n	50a4 <nrfx_clock_start+0x3a>
    5070:	e8df f000 	tbb	[pc, r0]
    5074:	4c3e3202 	.word	0x4c3e3202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5078:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    507c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5080:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5084:	03c9      	lsls	r1, r1, #15
    5086:	d40e      	bmi.n	50a6 <nrfx_clock_start+0x3c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    5088:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    508c:	07db      	lsls	r3, r3, #31
    508e:	d513      	bpl.n	50b8 <nrfx_clock_start+0x4e>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5090:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    5094:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    5098:	3b01      	subs	r3, #1
    509a:	2b01      	cmp	r3, #1
    509c:	d809      	bhi.n	50b2 <nrfx_clock_start+0x48>
    p_reg->INTENSET = mask;
    509e:	2302      	movs	r3, #2
    50a0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    50a4:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    50a6:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    50aa:	2b02      	cmp	r3, #2
    50ac:	d005      	beq.n	50ba <nrfx_clock_start+0x50>
    50ae:	2b01      	cmp	r3, #1
    50b0:	d002      	beq.n	50b8 <nrfx_clock_start+0x4e>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    50b2:	2000      	movs	r0, #0
    50b4:	f7ff ff04 	bl	4ec0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    50b8:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    50ba:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    50be:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    50c2:	2300      	movs	r3, #0
    50c4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    50c8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    50cc:	2302      	movs	r3, #2
    50ce:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    50d2:	2301      	movs	r3, #1
    50d4:	6093      	str	r3, [r2, #8]
}
    50d6:	e7e5      	b.n	50a4 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    50d8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    50dc:	2200      	movs	r2, #0
    50de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    50e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    50e6:	2201      	movs	r2, #1
    50e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    50ec:	601a      	str	r2, [r3, #0]
}
    50ee:	e7d9      	b.n	50a4 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    50f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    50f4:	2200      	movs	r2, #0
    50f6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    50fa:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    50fe:	f44f 7200 	mov.w	r2, #512	; 0x200
    5102:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5106:	2201      	movs	r2, #1
    5108:	621a      	str	r2, [r3, #32]
}
    510a:	e7cb      	b.n	50a4 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    510c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5110:	2200      	movs	r2, #0
    5112:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    5116:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    511a:	f44f 7280 	mov.w	r2, #256	; 0x100
    511e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5122:	2201      	movs	r2, #1
    5124:	619a      	str	r2, [r3, #24]
}
    5126:	e7bd      	b.n	50a4 <nrfx_clock_start+0x3a>

00005128 <nrfx_clock_stop>:
    clock_stop(domain);
    5128:	f7ff beca 	b.w	4ec0 <clock_stop>

0000512c <nrf_gpio_reconfigure>:
{
    512c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    512e:	4616      	mov	r6, r2
    5130:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    5134:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5136:	a801      	add	r0, sp, #4
{
    5138:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    513a:	f7fd ff09 	bl	2f50 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    513e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5140:	f1b6 0c00 	subs.w	ip, r6, #0
    5144:	bf18      	it	ne
    5146:	f04f 0c01 	movne.w	ip, #1
    514a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    514e:	1e0b      	subs	r3, r1, #0
    5150:	bf18      	it	ne
    5152:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5154:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    5156:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    515a:	bf14      	ite	ne
    515c:	f04f 0c0c 	movne.w	ip, #12
    5160:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    5164:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5166:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    516a:	bf14      	ite	ne
    516c:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    5170:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    5174:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5176:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    517a:	bf14      	ite	ne
    517c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    5180:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5184:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    5188:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    518c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5190:	b101      	cbz	r1, 5194 <nrf_gpio_reconfigure+0x68>
    5192:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5194:	b10e      	cbz	r6, 519a <nrf_gpio_reconfigure+0x6e>
    5196:	7836      	ldrb	r6, [r6, #0]
    5198:	0076      	lsls	r6, r6, #1
    519a:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    519c:	b10d      	cbz	r5, 51a2 <nrf_gpio_reconfigure+0x76>
    519e:	782d      	ldrb	r5, [r5, #0]
    51a0:	00ad      	lsls	r5, r5, #2
    51a2:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    51a4:	b10c      	cbz	r4, 51aa <nrf_gpio_reconfigure+0x7e>
    51a6:	7824      	ldrb	r4, [r4, #0]
    51a8:	0224      	lsls	r4, r4, #8
    51aa:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    51ac:	b10f      	cbz	r7, 51b2 <nrf_gpio_reconfigure+0x86>
    51ae:	783f      	ldrb	r7, [r7, #0]
    51b0:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    51b2:	430c      	orrs	r4, r1
    51b4:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    51b6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    51ba:	b003      	add	sp, #12
    51bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000051be <nrf_gpio_cfg_sense_set>:
{
    51be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    51c0:	f10d 030f 	add.w	r3, sp, #15
    51c4:	9301      	str	r3, [sp, #4]
    51c6:	2300      	movs	r3, #0
{
    51c8:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    51cc:	461a      	mov	r2, r3
    51ce:	4619      	mov	r1, r3
    51d0:	9300      	str	r3, [sp, #0]
    51d2:	f7ff ffab 	bl	512c <nrf_gpio_reconfigure>
}
    51d6:	b005      	add	sp, #20
    51d8:	f85d fb04 	ldr.w	pc, [sp], #4

000051dc <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    51dc:	4770      	bx	lr

000051de <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    51de:	b140      	cbz	r0, 51f2 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    51e0:	68c3      	ldr	r3, [r0, #12]
    51e2:	7858      	ldrb	r0, [r3, #1]
    51e4:	f010 0001 	ands.w	r0, r0, #1
    51e8:	bf1e      	ittt	ne
    51ea:	7818      	ldrbne	r0, [r3, #0]
    51ec:	fab0 f080 	clzne	r0, r0
    51f0:	0940      	lsrne	r0, r0, #5
}
    51f2:	4770      	bx	lr

000051f4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    51f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51f6:	4605      	mov	r5, r0
    51f8:	460e      	mov	r6, r1
	__asm__ volatile(
    51fa:	f04f 0320 	mov.w	r3, #32
    51fe:	f3ef 8711 	mrs	r7, BASEPRI
    5202:	f383 8812 	msr	BASEPRI_MAX, r3
    5206:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    520a:	f7fe ffb9 	bl	4180 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    520e:	4631      	mov	r1, r6
    5210:	4604      	mov	r4, r0
    5212:	4628      	mov	r0, r5
    5214:	f7ff fe42 	bl	4e9c <k_sys_fatal_error_handler>
	__asm__ volatile(
    5218:	f387 8811 	msr	BASEPRI, r7
    521c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5220:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5222:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5226:	f7fc bc03 	b.w	1a30 <z_impl_k_thread_abort>

0000522a <z_early_memset>:
	(void) memset(dst, c, n);
    522a:	f7ff bcb1 	b.w	4b90 <memset>

0000522e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    522e:	f7ff bca4 	b.w	4b7a <memcpy>

00005232 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5232:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    5236:	4313      	orrs	r3, r2
    5238:	f013 0303 	ands.w	r3, r3, #3
    523c:	d10c      	bne.n	5258 <create_free_list+0x26>
	slab->free_list = NULL;
    523e:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5240:	6881      	ldr	r1, [r0, #8]
    5242:	4299      	cmp	r1, r3
    5244:	d801      	bhi.n	524a <create_free_list+0x18>
	return 0;
    5246:	2000      	movs	r0, #0
    5248:	4770      	bx	lr
		*(char **)p = slab->free_list;
    524a:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    524c:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    524e:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    5250:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    5252:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
    5254:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    5256:	e7f3      	b.n	5240 <create_free_list+0xe>
		return -EINVAL;
    5258:	f06f 0015 	mvn.w	r0, #21
}
    525c:	4770      	bx	lr

0000525e <k_mem_slab_init>:
{
    525e:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    5260:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    5264:	2300      	movs	r3, #0
	slab->buffer = buffer;
    5266:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    5268:	6183      	str	r3, [r0, #24]
{
    526a:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    526c:	f7ff ffe1 	bl	5232 <create_free_list>
	if (rc < 0) {
    5270:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    5272:	bfa8      	it	ge
    5274:	e9c4 4400 	strdge	r4, r4, [r4]
}
    5278:	bd10      	pop	{r4, pc}

0000527a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    527a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    527c:	4604      	mov	r4, r0
    527e:	460d      	mov	r5, r1
	__asm__ volatile(
    5280:	f04f 0320 	mov.w	r3, #32
    5284:	f3ef 8611 	mrs	r6, BASEPRI
    5288:	f383 8812 	msr	BASEPRI_MAX, r3
    528c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5290:	6947      	ldr	r7, [r0, #20]
    5292:	b977      	cbnz	r7, 52b2 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    5294:	f000 f8a6 	bl	53e4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    5298:	b158      	cbz	r0, 52b2 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    529a:	682a      	ldr	r2, [r5, #0]
    529c:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    529e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    52a0:	f000 f86a 	bl	5378 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    52a4:	4631      	mov	r1, r6
    52a6:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    52aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    52ae:	f7fe be31 	b.w	3f14 <z_reschedule>
	**(char ***) mem = slab->free_list;
    52b2:	682b      	ldr	r3, [r5, #0]
    52b4:	6962      	ldr	r2, [r4, #20]
    52b6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    52b8:	682b      	ldr	r3, [r5, #0]
    52ba:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    52bc:	69a3      	ldr	r3, [r4, #24]
    52be:	3b01      	subs	r3, #1
    52c0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    52c2:	f386 8811 	msr	BASEPRI, r6
    52c6:	f3bf 8f6f 	isb	sy
}
    52ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000052cc <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    52cc:	f3ef 8005 	mrs	r0, IPSR
}
    52d0:	3800      	subs	r0, #0
    52d2:	bf18      	it	ne
    52d4:	2001      	movne	r0, #1
    52d6:	4770      	bx	lr

000052d8 <z_pm_save_idle_exit>:
{
    52d8:	b508      	push	{r3, lr}
	pm_system_resume();
    52da:	f7fb fe9d 	bl	1018 <pm_system_resume>
}
    52de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    52e2:	f7ff bdca 	b.w	4e7a <sys_clock_idle_exit>

000052e6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    52e6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    52ea:	428b      	cmp	r3, r1
    52ec:	d001      	beq.n	52f2 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    52ee:	f7fe bdcb 	b.w	3e88 <z_set_prio>
}
    52f2:	2000      	movs	r0, #0
    52f4:	4770      	bx	lr

000052f6 <z_impl_k_mutex_init>:
{
    52f6:	4603      	mov	r3, r0
	mutex->owner = NULL;
    52f8:	2000      	movs	r0, #0
    52fa:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    52fe:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    5302:	4770      	bx	lr

00005304 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    5304:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    5308:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    530a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    530c:	2300      	movs	r3, #0
	node->prev = NULL;
    530e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    5312:	4770      	bx	lr

00005314 <unpend_thread_no_timeout>:
{
    5314:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    5316:	f7ff fff5 	bl	5304 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    531a:	7b43      	ldrb	r3, [r0, #13]
    531c:	f023 0302 	bic.w	r3, r3, #2
    5320:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    5322:	2300      	movs	r3, #0
    5324:	6083      	str	r3, [r0, #8]
}
    5326:	bd08      	pop	{r3, pc}

00005328 <add_to_waitq_locked>:
{
    5328:	b538      	push	{r3, r4, r5, lr}
    532a:	4604      	mov	r4, r0
    532c:	460d      	mov	r5, r1
	unready_thread(thread);
    532e:	f7fe fd2d 	bl	3d8c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    5332:	7b63      	ldrb	r3, [r4, #13]
    5334:	f043 0302 	orr.w	r3, r3, #2
    5338:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    533a:	b1e5      	cbz	r5, 5376 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    533c:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    533e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5340:	429d      	cmp	r5, r3
    5342:	d109      	bne.n	5358 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    5344:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    5346:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    534a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    534c:	606c      	str	r4, [r5, #4]
}
    534e:	e012      	b.n	5376 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    5350:	686a      	ldr	r2, [r5, #4]
    5352:	4293      	cmp	r3, r2
    5354:	d0f6      	beq.n	5344 <add_to_waitq_locked+0x1c>
    5356:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5358:	2b00      	cmp	r3, #0
    535a:	d0f3      	beq.n	5344 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    535c:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5360:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    5364:	428a      	cmp	r2, r1
    5366:	d0f3      	beq.n	5350 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5368:	4291      	cmp	r1, r2
    536a:	ddf1      	ble.n	5350 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    536c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    536e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5372:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5374:	605c      	str	r4, [r3, #4]
}
    5376:	bd38      	pop	{r3, r4, r5, pc}

00005378 <z_ready_thread>:
{
    5378:	b510      	push	{r4, lr}
	__asm__ volatile(
    537a:	f04f 0320 	mov.w	r3, #32
    537e:	f3ef 8411 	mrs	r4, BASEPRI
    5382:	f383 8812 	msr	BASEPRI_MAX, r3
    5386:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    538a:	f7fe fccb 	bl	3d24 <ready_thread>
	__asm__ volatile(
    538e:	f384 8811 	msr	BASEPRI, r4
    5392:	f3bf 8f6f 	isb	sy
}
    5396:	bd10      	pop	{r4, pc}

00005398 <z_sched_wake_thread>:
{
    5398:	b538      	push	{r3, r4, r5, lr}
    539a:	4604      	mov	r4, r0
	__asm__ volatile(
    539c:	f04f 0320 	mov.w	r3, #32
    53a0:	f3ef 8511 	mrs	r5, BASEPRI
    53a4:	f383 8812 	msr	BASEPRI_MAX, r3
    53a8:	f3bf 8f6f 	isb	sy
		if (!killed) {
    53ac:	7b43      	ldrb	r3, [r0, #13]
    53ae:	f013 0f28 	tst.w	r3, #40	; 0x28
    53b2:	d10b      	bne.n	53cc <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    53b4:	6883      	ldr	r3, [r0, #8]
    53b6:	b10b      	cbz	r3, 53bc <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    53b8:	f7ff ffac 	bl	5314 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    53bc:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    53be:	b951      	cbnz	r1, 53d6 <z_sched_wake_thread+0x3e>
    53c0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
    53c4:	4620      	mov	r0, r4
    53c6:	7363      	strb	r3, [r4, #13]
    53c8:	f7fe fcac 	bl	3d24 <ready_thread>
	__asm__ volatile(
    53cc:	f385 8811 	msr	BASEPRI, r5
    53d0:	f3bf 8f6f 	isb	sy
}
    53d4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    53d6:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    53da:	e7f3      	b.n	53c4 <z_sched_wake_thread+0x2c>

000053dc <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    53dc:	2101      	movs	r1, #1
    53de:	3818      	subs	r0, #24
    53e0:	f7ff bfda 	b.w	5398 <z_sched_wake_thread>

000053e4 <z_unpend_first_thread>:
{
    53e4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    53e6:	f04f 0320 	mov.w	r3, #32
    53ea:	f3ef 8511 	mrs	r5, BASEPRI
    53ee:	f383 8812 	msr	BASEPRI_MAX, r3
    53f2:	f3bf 8f6f 	isb	sy
	return list->head == list;
    53f6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53f8:	42a0      	cmp	r0, r4
    53fa:	d00d      	beq.n	5418 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    53fc:	b134      	cbz	r4, 540c <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    53fe:	4620      	mov	r0, r4
    5400:	f7ff ff88 	bl	5314 <unpend_thread_no_timeout>
    5404:	f104 0018 	add.w	r0, r4, #24
    5408:	f000 f81e 	bl	5448 <z_abort_timeout>
	__asm__ volatile(
    540c:	f385 8811 	msr	BASEPRI, r5
    5410:	f3bf 8f6f 	isb	sy
}
    5414:	4620      	mov	r0, r4
    5416:	bd38      	pop	{r3, r4, r5, pc}
    5418:	2400      	movs	r4, #0
    541a:	e7f7      	b.n	540c <z_unpend_first_thread+0x28>

0000541c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    541c:	4603      	mov	r3, r0
    541e:	b920      	cbnz	r0, 542a <z_reschedule_irqlock+0xe>
    5420:	f3ef 8205 	mrs	r2, IPSR
    5424:	b90a      	cbnz	r2, 542a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    5426:	f7fc b887 	b.w	1538 <arch_swap>
    542a:	f383 8811 	msr	BASEPRI, r3
    542e:	f3bf 8f6f 	isb	sy
}
    5432:	4770      	bx	lr

00005434 <z_reschedule_unlocked>:
	__asm__ volatile(
    5434:	f04f 0320 	mov.w	r3, #32
    5438:	f3ef 8011 	mrs	r0, BASEPRI
    543c:	f383 8812 	msr	BASEPRI_MAX, r3
    5440:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    5444:	f7ff bfea 	b.w	541c <z_reschedule_irqlock>

00005448 <z_abort_timeout>:
{
    5448:	b510      	push	{r4, lr}
    544a:	f04f 0220 	mov.w	r2, #32
    544e:	f3ef 8411 	mrs	r4, BASEPRI
    5452:	f382 8812 	msr	BASEPRI_MAX, r2
    5456:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    545a:	6803      	ldr	r3, [r0, #0]
    545c:	b13b      	cbz	r3, 546e <z_abort_timeout+0x26>
			remove_timeout(to);
    545e:	f7fe ff39 	bl	42d4 <remove_timeout>
			ret = 0;
    5462:	2000      	movs	r0, #0
	__asm__ volatile(
    5464:	f384 8811 	msr	BASEPRI, r4
    5468:	f3bf 8f6f 	isb	sy
}
    546c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    546e:	f06f 0015 	mvn.w	r0, #21
    5472:	e7f7      	b.n	5464 <z_abort_timeout+0x1c>

00005474 <z_get_next_timeout_expiry>:
{
    5474:	b510      	push	{r4, lr}
	__asm__ volatile(
    5476:	f04f 0320 	mov.w	r3, #32
    547a:	f3ef 8411 	mrs	r4, BASEPRI
    547e:	f383 8812 	msr	BASEPRI_MAX, r3
    5482:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    5486:	f7fe ff05 	bl	4294 <next_timeout>
	__asm__ volatile(
    548a:	f384 8811 	msr	BASEPRI, r4
    548e:	f3bf 8f6f 	isb	sy
}
    5492:	bd10      	pop	{r4, pc}

00005494 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    5494:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    5496:	f7ff f819 	bl	44cc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    549a:	bd08      	pop	{r3, pc}

0000549c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    549c:	b108      	cbz	r0, 54a2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    549e:	f7fb bd6b 	b.w	f78 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    54a2:	4770      	bx	lr

000054a4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    54a4:	4770      	bx	lr
	...
