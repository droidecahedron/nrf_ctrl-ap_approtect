
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	c8 90 00 20 7d 96 00 00 f1 c5 00 00 51 96 00 00     ... }.......Q...
    8010:	51 96 00 00 51 96 00 00 51 96 00 00 51 96 00 00     Q...Q...Q...Q...
	...
    802c:	f5 92 00 00 51 96 00 00 00 00 00 00 95 92 00 00     ....Q...........
    803c:	51 96 00 00                                         Q...

00008040 <_irq_vector_table>:
    8040:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    8050:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    8060:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    8070:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    8080:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    8090:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    80a0:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    80b0:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    80c0:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    80d0:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    80e0:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    80f0:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    8100:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    8110:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    8120:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    8130:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    8140:	79 93 00 00 79 93 00 00 79 93 00 00 79 93 00 00     y...y...y...y...
    8150:	79 93 00 00                                         y...

Disassembly of section text:

00008154 <__aeabi_uldivmod>:
    8154:	b953      	cbnz	r3, 816c <__aeabi_uldivmod+0x18>
    8156:	b94a      	cbnz	r2, 816c <__aeabi_uldivmod+0x18>
    8158:	2900      	cmp	r1, #0
    815a:	bf08      	it	eq
    815c:	2800      	cmpeq	r0, #0
    815e:	bf1c      	itt	ne
    8160:	f04f 31ff 	movne.w	r1, #4294967295
    8164:	f04f 30ff 	movne.w	r0, #4294967295
    8168:	f000 b80c 	b.w	8184 <__aeabi_idiv0>
    816c:	f1ad 0c08 	sub.w	ip, sp, #8
    8170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8174:	f000 f808 	bl	8188 <__udivmoddi4>
    8178:	f8dd e004 	ldr.w	lr, [sp, #4]
    817c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8180:	b004      	add	sp, #16
    8182:	4770      	bx	lr

00008184 <__aeabi_idiv0>:
    8184:	4770      	bx	lr
    8186:	bf00      	nop

00008188 <__udivmoddi4>:
    8188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    818c:	4686      	mov	lr, r0
    818e:	468c      	mov	ip, r1
    8190:	4608      	mov	r0, r1
    8192:	9e08      	ldr	r6, [sp, #32]
    8194:	4615      	mov	r5, r2
    8196:	4674      	mov	r4, lr
    8198:	4619      	mov	r1, r3
    819a:	2b00      	cmp	r3, #0
    819c:	f040 80c1 	bne.w	8322 <__udivmoddi4+0x19a>
    81a0:	4285      	cmp	r5, r0
    81a2:	fab2 f282 	clz	r2, r2
    81a6:	d945      	bls.n	8234 <__udivmoddi4+0xac>
    81a8:	b14a      	cbz	r2, 81be <__udivmoddi4+0x36>
    81aa:	f1c2 0320 	rsb	r3, r2, #32
    81ae:	fa00 fc02 	lsl.w	ip, r0, r2
    81b2:	4095      	lsls	r5, r2
    81b4:	4094      	lsls	r4, r2
    81b6:	fa2e f303 	lsr.w	r3, lr, r3
    81ba:	ea43 0c0c 	orr.w	ip, r3, ip
    81be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81c2:	b2a8      	uxth	r0, r5
    81c4:	0c23      	lsrs	r3, r4, #16
    81c6:	fbbc f8fe 	udiv	r8, ip, lr
    81ca:	fb0e cc18 	mls	ip, lr, r8, ip
    81ce:	fb08 f900 	mul.w	r9, r8, r0
    81d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    81d6:	4599      	cmp	r9, r3
    81d8:	d928      	bls.n	822c <__udivmoddi4+0xa4>
    81da:	18eb      	adds	r3, r5, r3
    81dc:	f108 37ff 	add.w	r7, r8, #4294967295
    81e0:	d204      	bcs.n	81ec <__udivmoddi4+0x64>
    81e2:	4599      	cmp	r9, r3
    81e4:	d902      	bls.n	81ec <__udivmoddi4+0x64>
    81e6:	f1a8 0702 	sub.w	r7, r8, #2
    81ea:	442b      	add	r3, r5
    81ec:	eba3 0309 	sub.w	r3, r3, r9
    81f0:	b2a4      	uxth	r4, r4
    81f2:	fbb3 fcfe 	udiv	ip, r3, lr
    81f6:	fb0e 331c 	mls	r3, lr, ip, r3
    81fa:	fb0c f000 	mul.w	r0, ip, r0
    81fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8202:	42a0      	cmp	r0, r4
    8204:	d914      	bls.n	8230 <__udivmoddi4+0xa8>
    8206:	192c      	adds	r4, r5, r4
    8208:	f10c 33ff 	add.w	r3, ip, #4294967295
    820c:	d204      	bcs.n	8218 <__udivmoddi4+0x90>
    820e:	42a0      	cmp	r0, r4
    8210:	d902      	bls.n	8218 <__udivmoddi4+0x90>
    8212:	f1ac 0302 	sub.w	r3, ip, #2
    8216:	442c      	add	r4, r5
    8218:	1a24      	subs	r4, r4, r0
    821a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    821e:	b11e      	cbz	r6, 8228 <__udivmoddi4+0xa0>
    8220:	40d4      	lsrs	r4, r2
    8222:	2300      	movs	r3, #0
    8224:	6034      	str	r4, [r6, #0]
    8226:	6073      	str	r3, [r6, #4]
    8228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    822c:	4647      	mov	r7, r8
    822e:	e7dd      	b.n	81ec <__udivmoddi4+0x64>
    8230:	4663      	mov	r3, ip
    8232:	e7f1      	b.n	8218 <__udivmoddi4+0x90>
    8234:	bb92      	cbnz	r2, 829c <__udivmoddi4+0x114>
    8236:	1b43      	subs	r3, r0, r5
    8238:	2101      	movs	r1, #1
    823a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    823e:	b2af      	uxth	r7, r5
    8240:	0c20      	lsrs	r0, r4, #16
    8242:	fbb3 fcfe 	udiv	ip, r3, lr
    8246:	fb0e 331c 	mls	r3, lr, ip, r3
    824a:	fb0c f807 	mul.w	r8, ip, r7
    824e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8252:	4598      	cmp	r8, r3
    8254:	d961      	bls.n	831a <__udivmoddi4+0x192>
    8256:	18eb      	adds	r3, r5, r3
    8258:	f10c 30ff 	add.w	r0, ip, #4294967295
    825c:	d204      	bcs.n	8268 <__udivmoddi4+0xe0>
    825e:	4598      	cmp	r8, r3
    8260:	d902      	bls.n	8268 <__udivmoddi4+0xe0>
    8262:	f1ac 0002 	sub.w	r0, ip, #2
    8266:	442b      	add	r3, r5
    8268:	eba3 0308 	sub.w	r3, r3, r8
    826c:	b2a4      	uxth	r4, r4
    826e:	fbb3 fcfe 	udiv	ip, r3, lr
    8272:	fb0e 331c 	mls	r3, lr, ip, r3
    8276:	fb0c f707 	mul.w	r7, ip, r7
    827a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    827e:	42a7      	cmp	r7, r4
    8280:	d94d      	bls.n	831e <__udivmoddi4+0x196>
    8282:	192c      	adds	r4, r5, r4
    8284:	f10c 33ff 	add.w	r3, ip, #4294967295
    8288:	d204      	bcs.n	8294 <__udivmoddi4+0x10c>
    828a:	42a7      	cmp	r7, r4
    828c:	d902      	bls.n	8294 <__udivmoddi4+0x10c>
    828e:	f1ac 0302 	sub.w	r3, ip, #2
    8292:	442c      	add	r4, r5
    8294:	1be4      	subs	r4, r4, r7
    8296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    829a:	e7c0      	b.n	821e <__udivmoddi4+0x96>
    829c:	f1c2 0320 	rsb	r3, r2, #32
    82a0:	4095      	lsls	r5, r2
    82a2:	4094      	lsls	r4, r2
    82a4:	fa20 f103 	lsr.w	r1, r0, r3
    82a8:	fa2e f303 	lsr.w	r3, lr, r3
    82ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82b0:	4090      	lsls	r0, r2
    82b2:	b2af      	uxth	r7, r5
    82b4:	4303      	orrs	r3, r0
    82b6:	fbb1 fcfe 	udiv	ip, r1, lr
    82ba:	fb0e 101c 	mls	r0, lr, ip, r1
    82be:	0c19      	lsrs	r1, r3, #16
    82c0:	fb0c f807 	mul.w	r8, ip, r7
    82c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    82c8:	4588      	cmp	r8, r1
    82ca:	d922      	bls.n	8312 <__udivmoddi4+0x18a>
    82cc:	1869      	adds	r1, r5, r1
    82ce:	f10c 30ff 	add.w	r0, ip, #4294967295
    82d2:	d204      	bcs.n	82de <__udivmoddi4+0x156>
    82d4:	4588      	cmp	r8, r1
    82d6:	d902      	bls.n	82de <__udivmoddi4+0x156>
    82d8:	f1ac 0002 	sub.w	r0, ip, #2
    82dc:	4429      	add	r1, r5
    82de:	eba1 0108 	sub.w	r1, r1, r8
    82e2:	b29b      	uxth	r3, r3
    82e4:	fbb1 fcfe 	udiv	ip, r1, lr
    82e8:	fb0e 111c 	mls	r1, lr, ip, r1
    82ec:	fb0c f707 	mul.w	r7, ip, r7
    82f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    82f4:	429f      	cmp	r7, r3
    82f6:	d90e      	bls.n	8316 <__udivmoddi4+0x18e>
    82f8:	18eb      	adds	r3, r5, r3
    82fa:	f10c 31ff 	add.w	r1, ip, #4294967295
    82fe:	d204      	bcs.n	830a <__udivmoddi4+0x182>
    8300:	429f      	cmp	r7, r3
    8302:	d902      	bls.n	830a <__udivmoddi4+0x182>
    8304:	f1ac 0102 	sub.w	r1, ip, #2
    8308:	442b      	add	r3, r5
    830a:	1bdb      	subs	r3, r3, r7
    830c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8310:	e793      	b.n	823a <__udivmoddi4+0xb2>
    8312:	4660      	mov	r0, ip
    8314:	e7e3      	b.n	82de <__udivmoddi4+0x156>
    8316:	4661      	mov	r1, ip
    8318:	e7f7      	b.n	830a <__udivmoddi4+0x182>
    831a:	4660      	mov	r0, ip
    831c:	e7a4      	b.n	8268 <__udivmoddi4+0xe0>
    831e:	4663      	mov	r3, ip
    8320:	e7b8      	b.n	8294 <__udivmoddi4+0x10c>
    8322:	4283      	cmp	r3, r0
    8324:	d906      	bls.n	8334 <__udivmoddi4+0x1ac>
    8326:	b916      	cbnz	r6, 832e <__udivmoddi4+0x1a6>
    8328:	2100      	movs	r1, #0
    832a:	4608      	mov	r0, r1
    832c:	e77c      	b.n	8228 <__udivmoddi4+0xa0>
    832e:	e9c6 e000 	strd	lr, r0, [r6]
    8332:	e7f9      	b.n	8328 <__udivmoddi4+0x1a0>
    8334:	fab3 f783 	clz	r7, r3
    8338:	b98f      	cbnz	r7, 835e <__udivmoddi4+0x1d6>
    833a:	4283      	cmp	r3, r0
    833c:	d301      	bcc.n	8342 <__udivmoddi4+0x1ba>
    833e:	4572      	cmp	r2, lr
    8340:	d808      	bhi.n	8354 <__udivmoddi4+0x1cc>
    8342:	ebbe 0402 	subs.w	r4, lr, r2
    8346:	eb60 0303 	sbc.w	r3, r0, r3
    834a:	2001      	movs	r0, #1
    834c:	469c      	mov	ip, r3
    834e:	b91e      	cbnz	r6, 8358 <__udivmoddi4+0x1d0>
    8350:	2100      	movs	r1, #0
    8352:	e769      	b.n	8228 <__udivmoddi4+0xa0>
    8354:	4638      	mov	r0, r7
    8356:	e7fa      	b.n	834e <__udivmoddi4+0x1c6>
    8358:	e9c6 4c00 	strd	r4, ip, [r6]
    835c:	e7f8      	b.n	8350 <__udivmoddi4+0x1c8>
    835e:	f1c7 0c20 	rsb	ip, r7, #32
    8362:	40bb      	lsls	r3, r7
    8364:	fa0e f507 	lsl.w	r5, lr, r7
    8368:	fa22 f40c 	lsr.w	r4, r2, ip
    836c:	fa2e f10c 	lsr.w	r1, lr, ip
    8370:	40ba      	lsls	r2, r7
    8372:	431c      	orrs	r4, r3
    8374:	fa20 f30c 	lsr.w	r3, r0, ip
    8378:	40b8      	lsls	r0, r7
    837a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    837e:	4301      	orrs	r1, r0
    8380:	fa1f fe84 	uxth.w	lr, r4
    8384:	fbb3 f8f9 	udiv	r8, r3, r9
    8388:	fb09 3018 	mls	r0, r9, r8, r3
    838c:	0c0b      	lsrs	r3, r1, #16
    838e:	fb08 fa0e 	mul.w	sl, r8, lr
    8392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8396:	459a      	cmp	sl, r3
    8398:	d940      	bls.n	841c <__udivmoddi4+0x294>
    839a:	18e3      	adds	r3, r4, r3
    839c:	f108 30ff 	add.w	r0, r8, #4294967295
    83a0:	d204      	bcs.n	83ac <__udivmoddi4+0x224>
    83a2:	459a      	cmp	sl, r3
    83a4:	d902      	bls.n	83ac <__udivmoddi4+0x224>
    83a6:	f1a8 0002 	sub.w	r0, r8, #2
    83aa:	4423      	add	r3, r4
    83ac:	eba3 030a 	sub.w	r3, r3, sl
    83b0:	b289      	uxth	r1, r1
    83b2:	fbb3 f8f9 	udiv	r8, r3, r9
    83b6:	fb09 3318 	mls	r3, r9, r8, r3
    83ba:	fb08 fe0e 	mul.w	lr, r8, lr
    83be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    83c2:	458e      	cmp	lr, r1
    83c4:	d92c      	bls.n	8420 <__udivmoddi4+0x298>
    83c6:	1861      	adds	r1, r4, r1
    83c8:	f108 33ff 	add.w	r3, r8, #4294967295
    83cc:	d204      	bcs.n	83d8 <__udivmoddi4+0x250>
    83ce:	458e      	cmp	lr, r1
    83d0:	d902      	bls.n	83d8 <__udivmoddi4+0x250>
    83d2:	f1a8 0302 	sub.w	r3, r8, #2
    83d6:	4421      	add	r1, r4
    83d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83dc:	eba1 010e 	sub.w	r1, r1, lr
    83e0:	fba0 9802 	umull	r9, r8, r0, r2
    83e4:	4541      	cmp	r1, r8
    83e6:	46ce      	mov	lr, r9
    83e8:	4643      	mov	r3, r8
    83ea:	d302      	bcc.n	83f2 <__udivmoddi4+0x26a>
    83ec:	d106      	bne.n	83fc <__udivmoddi4+0x274>
    83ee:	454d      	cmp	r5, r9
    83f0:	d204      	bcs.n	83fc <__udivmoddi4+0x274>
    83f2:	3801      	subs	r0, #1
    83f4:	ebb9 0e02 	subs.w	lr, r9, r2
    83f8:	eb68 0304 	sbc.w	r3, r8, r4
    83fc:	2e00      	cmp	r6, #0
    83fe:	d0a7      	beq.n	8350 <__udivmoddi4+0x1c8>
    8400:	ebb5 020e 	subs.w	r2, r5, lr
    8404:	eb61 0103 	sbc.w	r1, r1, r3
    8408:	fa01 fc0c 	lsl.w	ip, r1, ip
    840c:	fa22 f307 	lsr.w	r3, r2, r7
    8410:	40f9      	lsrs	r1, r7
    8412:	ea4c 0303 	orr.w	r3, ip, r3
    8416:	e9c6 3100 	strd	r3, r1, [r6]
    841a:	e799      	b.n	8350 <__udivmoddi4+0x1c8>
    841c:	4640      	mov	r0, r8
    841e:	e7c5      	b.n	83ac <__udivmoddi4+0x224>
    8420:	4643      	mov	r3, r8
    8422:	e7d9      	b.n	83d8 <__udivmoddi4+0x250>

00008424 <main>:
    NRF_NVMC_S->CONFIG = val;
    while (!NRF_NVMC_S->READY);
}

void main(void)
{
    8424:	b508      	push	{r3, lr}
    uint32_t read_val;

    printk("Start eraseprotect sample.\n");
    8426:	481f      	ldr	r0, [pc, #124]	; (84a4 <main+0x80>)
    8428:	f003 ff5e 	bl	c2e8 <printk>
    NRF_CTRLAP_S->ERASEPROTECT.DISABLE = 0x00000001;
    842c:	2201      	movs	r2, #1
    842e:	4b1e      	ldr	r3, [pc, #120]	; (84a8 <main+0x84>)
    8430:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    // Somehow, reading the value back does not work.
    // printk("NRF_CTRLAP_S->ERASEPROTECT.DISABLE: %08x\n",NRF_CTRLAP_S->ERASEPROTECT.DISABLE);

    if(NRF_UICR_S->ERASEPROTECT){
    8434:	4b1d      	ldr	r3, [pc, #116]	; (84ac <main+0x88>)
    8436:	6a1b      	ldr	r3, [r3, #32]
    8438:	b33b      	cbz	r3, 848a <main+0x66>
    while (!NRF_NVMC_S->READY);
    843a:	4b1d      	ldr	r3, [pc, #116]	; (84b0 <main+0x8c>)
    843c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    8440:	2a00      	cmp	r2, #0
    8442:	d0fb      	beq.n	843c <main+0x18>
    NRF_NVMC_S->CONFIG = val;
    8444:	2201      	movs	r2, #1
    8446:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    while (!NRF_NVMC_S->READY);
    844a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    844e:	2a00      	cmp	r2, #0
    8450:	d0fb      	beq.n	844a <main+0x26>
        config_nvmc(NVMC_CONFIG_WEN_Wen);
        NRF_UICR_S->ERASEPROTECT=0x00000000;
    8452:	2200      	movs	r2, #0
    8454:	4b15      	ldr	r3, [pc, #84]	; (84ac <main+0x88>)
    8456:	621a      	str	r2, [r3, #32]
    while (!NRF_NVMC_S->READY);
    8458:	4b15      	ldr	r3, [pc, #84]	; (84b0 <main+0x8c>)
    845a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    845e:	2a00      	cmp	r2, #0
    8460:	d0fb      	beq.n	845a <main+0x36>
    NRF_NVMC_S->CONFIG = val;
    8462:	2200      	movs	r2, #0
    8464:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    while (!NRF_NVMC_S->READY);
    8468:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    846c:	2a00      	cmp	r2, #0
    846e:	d0fb      	beq.n	8468 <main+0x44>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    8470:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8474:	490f      	ldr	r1, [pc, #60]	; (84b4 <main+0x90>)
    8476:	4b10      	ldr	r3, [pc, #64]	; (84b8 <main+0x94>)
    8478:	68ca      	ldr	r2, [r1, #12]
    847a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    847e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8480:	60cb      	str	r3, [r1, #12]
    8482:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    8486:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8488:	e7fd      	b.n	8486 <main+0x62>
        config_nvmc(NVMC_CONFIG_WEN_Ren);
        NVIC_SystemReset();
    }

    printk("Entering forever loop.\n");
    848a:	480c      	ldr	r0, [pc, #48]	; (84bc <main+0x98>)
    848c:	f003 ff2c 	bl	c2e8 <printk>
    printk("Disclaimer: This example does not lock netcore, and can be unlocked by recovering netcore!\n See README for more information.\n");
    8490:	480b      	ldr	r0, [pc, #44]	; (84c0 <main+0x9c>)
    8492:	f003 ff29 	bl	c2e8 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    8496:	2100      	movs	r1, #0
    8498:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    849c:	f003 fd42 	bl	bf24 <z_impl_k_sleep>
    while(1){
    84a0:	e7f9      	b.n	8496 <main+0x72>
    84a2:	bf00      	nop
    84a4:	0000d154 	.word	0x0000d154
    84a8:	50006000 	.word	0x50006000
    84ac:	00ff8000 	.word	0x00ff8000
    84b0:	50039000 	.word	0x50039000
    84b4:	e000ed00 	.word	0xe000ed00
    84b8:	05fa0004 	.word	0x05fa0004
    84bc:	0000d170 	.word	0x0000d170
    84c0:	0000d188 	.word	0x0000d188

000084c4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    84c4:	4b01      	ldr	r3, [pc, #4]	; (84cc <char_out+0x8>)
    84c6:	681b      	ldr	r3, [r3, #0]
    84c8:	4718      	bx	r3
    84ca:	bf00      	nop
    84cc:	20008000 	.word	0x20008000

000084d0 <__printk_hook_install>:
	_char_out = fn;
    84d0:	4b01      	ldr	r3, [pc, #4]	; (84d8 <__printk_hook_install+0x8>)
    84d2:	6018      	str	r0, [r3, #0]
}
    84d4:	4770      	bx	lr
    84d6:	bf00      	nop
    84d8:	20008000 	.word	0x20008000

000084dc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    84dc:	b507      	push	{r0, r1, r2, lr}
    84de:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    84e0:	2100      	movs	r1, #0
    84e2:	4602      	mov	r2, r0
    84e4:	9100      	str	r1, [sp, #0]
    84e6:	4803      	ldr	r0, [pc, #12]	; (84f4 <vprintk+0x18>)
    84e8:	f000 f914 	bl	8714 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    84ec:	b003      	add	sp, #12
    84ee:	f85d fb04 	ldr.w	pc, [sp], #4
    84f2:	bf00      	nop
    84f4:	000084c5 	.word	0x000084c5

000084f8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    84f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    84fc:	8b05      	ldrh	r5, [r0, #24]
{
    84fe:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    8500:	0728      	lsls	r0, r5, #28
{
    8502:	4690      	mov	r8, r2
	if (processing) {
    8504:	d411      	bmi.n	852a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    8506:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8508:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    850c:	f040 80cd 	bne.w	86aa <process_event+0x1b2>
			evt = process_recheck(mgr);
    8510:	4620      	mov	r0, r4
    8512:	f003 ff00 	bl	c316 <process_recheck>
		}

		if (evt == EVT_NOP) {
    8516:	b178      	cbz	r0, 8538 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    8518:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    851a:	8b21      	ldrh	r1, [r4, #24]
    851c:	2804      	cmp	r0, #4
    851e:	d811      	bhi.n	8544 <process_event+0x4c>
    8520:	e8df f000 	tbb	[pc, r0]
    8524:	856d10c3 	.word	0x856d10c3
    8528:	95          	.byte	0x95
    8529:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    852a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    852c:	bf0c      	ite	eq
    852e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8532:	f045 0520 	orrne.w	r5, r5, #32
    8536:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    8538:	f388 8811 	msr	BASEPRI, r8
    853c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    8540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8544:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    8548:	45aa      	cmp	sl, r5
    854a:	f000 80a6 	beq.w	869a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    854e:	2700      	movs	r7, #0
    8550:	46b9      	mov	r9, r7
    8552:	463e      	mov	r6, r7
    8554:	68a3      	ldr	r3, [r4, #8]
    8556:	2b00      	cmp	r3, #0
    8558:	f000 80bd 	beq.w	86d6 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    855c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    8560:	8321      	strh	r1, [r4, #24]
    8562:	f388 8811 	msr	BASEPRI, r8
    8566:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    856a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    856c:	2900      	cmp	r1, #0
    856e:	f000 80bb 	beq.w	86e8 <process_event+0x1f0>
	return node->next;
    8572:	680d      	ldr	r5, [r1, #0]
    8574:	2900      	cmp	r1, #0
    8576:	f000 80b7 	beq.w	86e8 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    857a:	4633      	mov	r3, r6
    857c:	4652      	mov	r2, sl
    857e:	4620      	mov	r0, r4
    8580:	f8d1 8004 	ldr.w	r8, [r1, #4]
    8584:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8586:	2d00      	cmp	r5, #0
    8588:	d076      	beq.n	8678 <process_event+0x180>
    858a:	682b      	ldr	r3, [r5, #0]
    858c:	4629      	mov	r1, r5
    858e:	461d      	mov	r5, r3
    8590:	e7f0      	b.n	8574 <process_event+0x7c>
    8592:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    8596:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    8598:	2a01      	cmp	r2, #1
    859a:	d81b      	bhi.n	85d4 <process_event+0xdc>
	list->head = NULL;
    859c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    859e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    85a2:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    85a4:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    85a6:	b289      	uxth	r1, r1
	list->tail = NULL;
    85a8:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    85ac:	d109      	bne.n	85c2 <process_event+0xca>
    85ae:	463b      	mov	r3, r7
    85b0:	e003      	b.n	85ba <process_event+0xc2>
				mgr->refs += 1U;
    85b2:	8b62      	ldrh	r2, [r4, #26]
    85b4:	3201      	adds	r2, #1
    85b6:	8362      	strh	r2, [r4, #26]
	return node->next;
    85b8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    85ba:	2b00      	cmp	r3, #0
    85bc:	d1f9      	bne.n	85b2 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    85be:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    85c2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    85c4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    85c6:	f003 fea6 	bl	c316 <process_recheck>
    85ca:	2800      	cmp	r0, #0
    85cc:	d07b      	beq.n	86c6 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    85ce:	f041 0120 	orr.w	r1, r1, #32
    85d2:	e077      	b.n	86c4 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    85d4:	2b04      	cmp	r3, #4
    85d6:	d10a      	bne.n	85ee <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    85d8:	f021 0107 	bic.w	r1, r1, #7
    85dc:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    85de:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    85e0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    85e2:	f003 fe98 	bl	c316 <process_recheck>
    85e6:	b110      	cbz	r0, 85ee <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    85e8:	f041 0120 	orr.w	r1, r1, #32
    85ec:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    85ee:	8b21      	ldrh	r1, [r4, #24]
    85f0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    85f4:	45aa      	cmp	sl, r5
    85f6:	d050      	beq.n	869a <process_event+0x1a2>
    85f8:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    85fa:	46b9      	mov	r9, r7
    85fc:	e7aa      	b.n	8554 <process_event+0x5c>
			transit = mgr->transitions->start;
    85fe:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8600:	f021 0107 	bic.w	r1, r1, #7
    8604:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    8608:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    860a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    860e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    8610:	d12d      	bne.n	866e <process_event+0x176>
		    || (transit != NULL)) {
    8612:	f1b9 0f00 	cmp.w	r9, #0
    8616:	d040      	beq.n	869a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    8618:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    861c:	8321      	strh	r1, [r4, #24]
    861e:	f388 8811 	msr	BASEPRI, r8
    8622:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    8626:	4620      	mov	r0, r4
    8628:	4939      	ldr	r1, [pc, #228]	; (8710 <process_event+0x218>)
    862a:	47c8      	blx	r9
    862c:	e029      	b.n	8682 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    862e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    8632:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8634:	f041 0104 	orr.w	r1, r1, #4
    8638:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    863a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    863c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    8640:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    8642:	d0e6      	beq.n	8612 <process_event+0x11a>
    8644:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8646:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    864a:	463e      	mov	r6, r7
    864c:	e782      	b.n	8554 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    864e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    8652:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8654:	f041 0105 	orr.w	r1, r1, #5
    8658:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    865a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    865c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    8660:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    8662:	d0d6      	beq.n	8612 <process_event+0x11a>
    8664:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8666:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    866a:	463e      	mov	r6, r7
    866c:	e772      	b.n	8554 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    866e:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8670:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    8674:	463e      	mov	r6, r7
    8676:	e76d      	b.n	8554 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8678:	462b      	mov	r3, r5
    867a:	e787      	b.n	858c <process_event+0x94>
			if (transit != NULL) {
    867c:	f1b9 0f00 	cmp.w	r9, #0
    8680:	d1d1      	bne.n	8626 <process_event+0x12e>
	__asm__ volatile(
    8682:	f04f 0320 	mov.w	r3, #32
    8686:	f3ef 8811 	mrs	r8, BASEPRI
    868a:	f383 8812 	msr	BASEPRI_MAX, r3
    868e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    8692:	8b23      	ldrh	r3, [r4, #24]
    8694:	f023 0308 	bic.w	r3, r3, #8
    8698:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    869a:	8b25      	ldrh	r5, [r4, #24]
    869c:	06ea      	lsls	r2, r5, #27
    869e:	d52e      	bpl.n	86fe <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    86a0:	f025 0310 	bic.w	r3, r5, #16
    86a4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    86a6:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    86aa:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    86ac:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    86ae:	2e00      	cmp	r6, #0
    86b0:	f6bf af6f 	bge.w	8592 <process_event+0x9a>
	list->head = NULL;
    86b4:	2300      	movs	r3, #0
		*clients = mgr->clients;
    86b6:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    86b8:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    86bc:	f021 0107 	bic.w	r1, r1, #7
    86c0:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    86c4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    86c6:	8b21      	ldrh	r1, [r4, #24]
    86c8:	f04f 0900 	mov.w	r9, #0
    86cc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    86d0:	45aa      	cmp	sl, r5
    86d2:	f47f af3f 	bne.w	8554 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    86d6:	2f00      	cmp	r7, #0
    86d8:	d09b      	beq.n	8612 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    86da:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    86de:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    86e0:	f388 8811 	msr	BASEPRI, r8
    86e4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    86e8:	2f00      	cmp	r7, #0
    86ea:	d0c7      	beq.n	867c <process_event+0x184>
	return node->next;
    86ec:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    86ee:	4639      	mov	r1, r7
    86f0:	4633      	mov	r3, r6
    86f2:	4652      	mov	r2, sl
    86f4:	4620      	mov	r0, r4
    86f6:	f003 fe3a 	bl	c36e <notify_one>
	list->head = node;
    86fa:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    86fc:	e7f4      	b.n	86e8 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    86fe:	06ab      	lsls	r3, r5, #26
    8700:	f57f af1a 	bpl.w	8538 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    8704:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    8708:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    870a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    870e:	e6ff      	b.n	8510 <process_event+0x18>
    8710:	0000c39b 	.word	0x0000c39b

00008714 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    8714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8718:	4681      	mov	r9, r0
    871a:	468b      	mov	fp, r1
    871c:	4617      	mov	r7, r2
    871e:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    8720:	2500      	movs	r5, #0
{
    8722:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    8724:	7838      	ldrb	r0, [r7, #0]
    8726:	b908      	cbnz	r0, 872c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    8728:	4628      	mov	r0, r5
    872a:	e357      	b.n	8ddc <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
    872c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    872e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    8730:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    8732:	d006      	beq.n	8742 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    8734:	4659      	mov	r1, fp
    8736:	47c8      	blx	r9
    8738:	2800      	cmp	r0, #0
    873a:	f2c0 834f 	blt.w	8ddc <z_cbvprintf_impl+0x6c8>
    873e:	3501      	adds	r5, #1
		if (bps == NULL) {
    8740:	e1fb      	b.n	8b3a <z_cbvprintf_impl+0x426>
		} state = {
    8742:	2218      	movs	r2, #24
    8744:	2100      	movs	r1, #0
    8746:	a80e      	add	r0, sp, #56	; 0x38
    8748:	f003 ffa0 	bl	c68c <memset>
	if (*sp == '%') {
    874c:	787b      	ldrb	r3, [r7, #1]
    874e:	2b25      	cmp	r3, #37	; 0x25
    8750:	d07d      	beq.n	884e <z_cbvprintf_impl+0x13a>
    8752:	2300      	movs	r3, #0
    8754:	4698      	mov	r8, r3
    8756:	469e      	mov	lr, r3
    8758:	469c      	mov	ip, r3
    875a:	461e      	mov	r6, r3
    875c:	1c78      	adds	r0, r7, #1
    875e:	4601      	mov	r1, r0
		switch (*sp) {
    8760:	f810 2b01 	ldrb.w	r2, [r0], #1
    8764:	2a2b      	cmp	r2, #43	; 0x2b
    8766:	f000 80a1 	beq.w	88ac <z_cbvprintf_impl+0x198>
    876a:	f200 8098 	bhi.w	889e <z_cbvprintf_impl+0x18a>
    876e:	2a20      	cmp	r2, #32
    8770:	f000 809f 	beq.w	88b2 <z_cbvprintf_impl+0x19e>
    8774:	2a23      	cmp	r2, #35	; 0x23
    8776:	f000 809f 	beq.w	88b8 <z_cbvprintf_impl+0x1a4>
    877a:	b12b      	cbz	r3, 8788 <z_cbvprintf_impl+0x74>
    877c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8784:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    8788:	f1b8 0f00 	cmp.w	r8, #0
    878c:	d005      	beq.n	879a <z_cbvprintf_impl+0x86>
    878e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8792:	f043 0320 	orr.w	r3, r3, #32
    8796:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    879a:	f1be 0f00 	cmp.w	lr, #0
    879e:	d005      	beq.n	87ac <z_cbvprintf_impl+0x98>
    87a0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    87a4:	f043 0310 	orr.w	r3, r3, #16
    87a8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    87ac:	f1bc 0f00 	cmp.w	ip, #0
    87b0:	d005      	beq.n	87be <z_cbvprintf_impl+0xaa>
    87b2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    87b6:	f043 0308 	orr.w	r3, r3, #8
    87ba:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    87be:	b12e      	cbz	r6, 87cc <z_cbvprintf_impl+0xb8>
    87c0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    87c4:	f043 0304 	orr.w	r3, r3, #4
    87c8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    87cc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    87d0:	f003 0044 	and.w	r0, r3, #68	; 0x44
    87d4:	2844      	cmp	r0, #68	; 0x44
    87d6:	d103      	bne.n	87e0 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    87d8:	f36f 1386 	bfc	r3, #6, #1
    87dc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    87e0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    87e4:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    87e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    87ea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    87ee:	d17f      	bne.n	88f0 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    87f0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    87f4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    87f6:	f042 0201 	orr.w	r2, r2, #1
    87fa:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    87fe:	781a      	ldrb	r2, [r3, #0]
    8800:	2a2e      	cmp	r2, #46	; 0x2e
    8802:	bf0c      	ite	eq
    8804:	2101      	moveq	r1, #1
    8806:	2100      	movne	r1, #0
    8808:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    880c:	f361 0241 	bfi	r2, r1, #1, #1
    8810:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    8814:	d178      	bne.n	8908 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    8816:	785a      	ldrb	r2, [r3, #1]
    8818:	2a2a      	cmp	r2, #42	; 0x2a
    881a:	d06e      	beq.n	88fa <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
    881c:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    881e:	f04f 0c0a 	mov.w	ip, #10
	++sp;
    8822:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    8824:	4619      	mov	r1, r3
    8826:	f811 0b01 	ldrb.w	r0, [r1], #1
    882a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    882e:	2e09      	cmp	r6, #9
    8830:	f240 8095 	bls.w	895e <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    8834:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    8838:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    883a:	f3c1 0040 	ubfx	r0, r1, #1, #1
    883e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    8842:	460a      	mov	r2, r1
    8844:	f360 0241 	bfi	r2, r0, #1, #1
    8848:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    884c:	e05c      	b.n	8908 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    884e:	1cba      	adds	r2, r7, #2
    8850:	9203      	str	r2, [sp, #12]
    8852:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    8856:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    885a:	07da      	lsls	r2, r3, #31
    885c:	f140 812e 	bpl.w	8abc <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    8860:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    8864:	f1b8 0f00 	cmp.w	r8, #0
    8868:	da07      	bge.n	887a <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    886a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
    886e:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    8872:	f042 0204 	orr.w	r2, r2, #4
    8876:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
    887a:	075e      	lsls	r6, r3, #29
    887c:	f140 8127 	bpl.w	8ace <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    8880:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    8884:	f1ba 0f00 	cmp.w	sl, #0
    8888:	f280 8126 	bge.w	8ad8 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    888c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    8890:	f36f 0341 	bfc	r3, #1, #1
    8894:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    8898:	f04f 3aff 	mov.w	sl, #4294967295
    889c:	e11c      	b.n	8ad8 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    889e:	2a2d      	cmp	r2, #45	; 0x2d
    88a0:	d00d      	beq.n	88be <z_cbvprintf_impl+0x1aa>
    88a2:	2a30      	cmp	r2, #48	; 0x30
    88a4:	f47f af69 	bne.w	877a <z_cbvprintf_impl+0x66>
    88a8:	2301      	movs	r3, #1
	} while (loop);
    88aa:	e758      	b.n	875e <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    88ac:	f04f 0c01 	mov.w	ip, #1
    88b0:	e755      	b.n	875e <z_cbvprintf_impl+0x4a>
    88b2:	f04f 0e01 	mov.w	lr, #1
    88b6:	e752      	b.n	875e <z_cbvprintf_impl+0x4a>
    88b8:	f04f 0801 	mov.w	r8, #1
    88bc:	e74f      	b.n	875e <z_cbvprintf_impl+0x4a>
    88be:	2601      	movs	r6, #1
    88c0:	e74d      	b.n	875e <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    88c2:	4603      	mov	r3, r0
    88c4:	fb0e 6202 	mla	r2, lr, r2, r6
    88c8:	3a30      	subs	r2, #48	; 0x30
    88ca:	4618      	mov	r0, r3
    88cc:	f810 6b01 	ldrb.w	r6, [r0], #1
    88d0:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    88d4:	f1bc 0f09 	cmp.w	ip, #9
    88d8:	d9f3      	bls.n	88c2 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    88da:	4299      	cmp	r1, r3
    88dc:	d08f      	beq.n	87fe <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    88de:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    88e2:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    88e4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    88e6:	f362 0141 	bfi	r1, r2, #1, #1
    88ea:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    88ee:	e786      	b.n	87fe <z_cbvprintf_impl+0xea>
    88f0:	460b      	mov	r3, r1
	size_t val = 0;
    88f2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    88f4:	f04f 0e0a 	mov.w	lr, #10
    88f8:	e7e7      	b.n	88ca <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    88fa:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    88fe:	3302      	adds	r3, #2
		conv->prec_star = true;
    8900:	f042 0204 	orr.w	r2, r2, #4
    8904:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
    8908:	781a      	ldrb	r2, [r3, #0]
    890a:	2a6c      	cmp	r2, #108	; 0x6c
    890c:	d047      	beq.n	899e <z_cbvprintf_impl+0x28a>
    890e:	d82b      	bhi.n	8968 <z_cbvprintf_impl+0x254>
    8910:	2a68      	cmp	r2, #104	; 0x68
    8912:	d031      	beq.n	8978 <z_cbvprintf_impl+0x264>
    8914:	2a6a      	cmp	r2, #106	; 0x6a
    8916:	d04b      	beq.n	89b0 <z_cbvprintf_impl+0x29c>
    8918:	2a4c      	cmp	r2, #76	; 0x4c
    891a:	d051      	beq.n	89c0 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    891c:	461a      	mov	r2, r3
    891e:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    8922:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    8924:	9203      	str	r2, [sp, #12]
    8926:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
    892a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
    892e:	f200 80be 	bhi.w	8aae <z_cbvprintf_impl+0x39a>
    8932:	2b6d      	cmp	r3, #109	; 0x6d
    8934:	d851      	bhi.n	89da <z_cbvprintf_impl+0x2c6>
    8936:	2b69      	cmp	r3, #105	; 0x69
    8938:	f200 80b9 	bhi.w	8aae <z_cbvprintf_impl+0x39a>
    893c:	2b57      	cmp	r3, #87	; 0x57
    893e:	d867      	bhi.n	8a10 <z_cbvprintf_impl+0x2fc>
    8940:	2b41      	cmp	r3, #65	; 0x41
    8942:	d003      	beq.n	894c <z_cbvprintf_impl+0x238>
    8944:	3b45      	subs	r3, #69	; 0x45
    8946:	2b02      	cmp	r3, #2
    8948:	f200 80b1 	bhi.w	8aae <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    894c:	2204      	movs	r2, #4
    894e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8952:	f362 0302 	bfi	r3, r2, #0, #3
    8956:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    895a:	2301      	movs	r3, #1
			break;
    895c:	e073      	b.n	8a46 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    895e:	fb0c 0202 	mla	r2, ip, r2, r0
    8962:	460b      	mov	r3, r1
    8964:	3a30      	subs	r2, #48	; 0x30
    8966:	e75d      	b.n	8824 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    8968:	2a74      	cmp	r2, #116	; 0x74
    896a:	d025      	beq.n	89b8 <z_cbvprintf_impl+0x2a4>
    896c:	2a7a      	cmp	r2, #122	; 0x7a
    896e:	d1d5      	bne.n	891c <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    8970:	2106      	movs	r1, #6
    8972:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    8976:	e00c      	b.n	8992 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    8978:	785a      	ldrb	r2, [r3, #1]
    897a:	2a68      	cmp	r2, #104	; 0x68
    897c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    8980:	d106      	bne.n	8990 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    8982:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    8984:	f361 02c6 	bfi	r2, r1, #3, #4
    8988:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    898c:	3302      	adds	r3, #2
    898e:	e7c5      	b.n	891c <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    8990:	2102      	movs	r1, #2
    8992:	f361 02c6 	bfi	r2, r1, #3, #4
    8996:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    899a:	3301      	adds	r3, #1
    899c:	e7be      	b.n	891c <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    899e:	785a      	ldrb	r2, [r3, #1]
    89a0:	2a6c      	cmp	r2, #108	; 0x6c
    89a2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    89a6:	d101      	bne.n	89ac <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    89a8:	2104      	movs	r1, #4
    89aa:	e7eb      	b.n	8984 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    89ac:	2103      	movs	r1, #3
    89ae:	e7f0      	b.n	8992 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    89b0:	2105      	movs	r1, #5
    89b2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    89b6:	e7ec      	b.n	8992 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    89b8:	2107      	movs	r1, #7
    89ba:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    89be:	e7e8      	b.n	8992 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    89c0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    89c4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    89c8:	f022 0202 	bic.w	r2, r2, #2
    89cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    89d0:	f042 0202 	orr.w	r2, r2, #2
    89d4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    89d8:	e7df      	b.n	899a <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    89da:	3b6e      	subs	r3, #110	; 0x6e
    89dc:	b2d9      	uxtb	r1, r3
    89de:	2301      	movs	r3, #1
    89e0:	408b      	lsls	r3, r1
    89e2:	f240 4182 	movw	r1, #1154	; 0x482
    89e6:	420b      	tst	r3, r1
    89e8:	d137      	bne.n	8a5a <z_cbvprintf_impl+0x346>
    89ea:	f013 0f24 	tst.w	r3, #36	; 0x24
    89ee:	d151      	bne.n	8a94 <z_cbvprintf_impl+0x380>
    89f0:	07d8      	lsls	r0, r3, #31
    89f2:	d55c      	bpl.n	8aae <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    89f4:	2103      	movs	r1, #3
    89f6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    89fa:	f361 0302 	bfi	r3, r1, #0, #3
    89fe:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    8a02:	f002 0378 	and.w	r3, r2, #120	; 0x78
    8a06:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    8a0a:	424b      	negs	r3, r1
    8a0c:	414b      	adcs	r3, r1
    8a0e:	e01a      	b.n	8a46 <z_cbvprintf_impl+0x332>
    8a10:	2001      	movs	r0, #1
	switch (conv->specifier) {
    8a12:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    8a16:	b2c9      	uxtb	r1, r1
    8a18:	fa00 f101 	lsl.w	r1, r0, r1
    8a1c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    8a20:	d194      	bne.n	894c <z_cbvprintf_impl+0x238>
    8a22:	f640 0601 	movw	r6, #2049	; 0x801
    8a26:	4231      	tst	r1, r6
    8a28:	d11d      	bne.n	8a66 <z_cbvprintf_impl+0x352>
    8a2a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    8a2e:	d03e      	beq.n	8aae <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    8a30:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8a34:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    8a38:	f002 0278 	and.w	r2, r2, #120	; 0x78
    8a3c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    8a3e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    8a42:	d034      	beq.n	8aae <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    8a44:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    8a46:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    8a4a:	f3c2 0140 	ubfx	r1, r2, #1, #1
    8a4e:	430b      	orrs	r3, r1
    8a50:	f363 0241 	bfi	r2, r3, #1, #1
    8a54:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    8a58:	e6fd      	b.n	8856 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    8a5a:	2102      	movs	r1, #2
    8a5c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8a60:	f361 0302 	bfi	r3, r1, #0, #3
    8a64:	e7e8      	b.n	8a38 <z_cbvprintf_impl+0x324>
    8a66:	2002      	movs	r0, #2
    8a68:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    8a6c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    8a70:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    8a74:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    8a76:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    8a7a:	bf02      	ittt	eq
    8a7c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    8a80:	f041 0101 	orreq.w	r1, r1, #1
    8a84:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    8a88:	2b63      	cmp	r3, #99	; 0x63
    8a8a:	d1db      	bne.n	8a44 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    8a8c:	1e13      	subs	r3, r2, #0
    8a8e:	bf18      	it	ne
    8a90:	2301      	movne	r3, #1
    8a92:	e7d8      	b.n	8a46 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    8a94:	2103      	movs	r1, #3
    8a96:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    8a9a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    8a9e:	f361 0302 	bfi	r3, r1, #0, #3
    8aa2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    8aa6:	bf14      	ite	ne
    8aa8:	2301      	movne	r3, #1
    8aaa:	2300      	moveq	r3, #0
    8aac:	e7cb      	b.n	8a46 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    8aae:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8ab2:	f043 0301 	orr.w	r3, r3, #1
    8ab6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    8aba:	e7c3      	b.n	8a44 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    8abc:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    8ac0:	2a00      	cmp	r2, #0
		int width = -1;
    8ac2:	bfac      	ite	ge
    8ac4:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    8ac8:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
    8acc:	e6d5      	b.n	887a <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    8ace:	0798      	lsls	r0, r3, #30
    8ad0:	f57f aee2 	bpl.w	8898 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    8ad4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
    8ad8:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    8ada:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    8ade:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
    8ae2:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
    8ae6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    8aea:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    8aec:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    8af0:	d133      	bne.n	8b5a <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    8af2:	1ecb      	subs	r3, r1, #3
    8af4:	2b04      	cmp	r3, #4
    8af6:	d804      	bhi.n	8b02 <z_cbvprintf_impl+0x3ee>
    8af8:	e8df f003 	tbb	[pc, r3]
    8afc:	21464621 	.word	0x21464621
    8b00:	21          	.byte	0x21
    8b01:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    8b02:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    8b04:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    8b06:	ea4f 72e3 	mov.w	r2, r3, asr #31
    8b0a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    8b0e:	d11c      	bne.n	8b4a <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    8b10:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    8b14:	17da      	asrs	r2, r3, #31
    8b16:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    8b1a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    8b1c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    8b20:	f013 0603 	ands.w	r6, r3, #3
    8b24:	d050      	beq.n	8bc8 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    8b26:	463a      	mov	r2, r7
    8b28:	4659      	mov	r1, fp
    8b2a:	4648      	mov	r0, r9
    8b2c:	9b03      	ldr	r3, [sp, #12]
    8b2e:	f003 fd11 	bl	c554 <outs>
    8b32:	2800      	cmp	r0, #0
    8b34:	f2c0 8152 	blt.w	8ddc <z_cbvprintf_impl+0x6c8>
    8b38:	4405      	add	r5, r0
			continue;
    8b3a:	9f03      	ldr	r7, [sp, #12]
    8b3c:	e5f2      	b.n	8724 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    8b3e:	f854 3b04 	ldr.w	r3, [r4], #4
    8b42:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    8b44:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    8b48:	e7e8      	b.n	8b1c <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    8b4a:	2902      	cmp	r1, #2
    8b4c:	d1e5      	bne.n	8b1a <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    8b4e:	b21a      	sxth	r2, r3
    8b50:	f343 33c0 	sbfx	r3, r3, #15, #1
    8b54:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    8b58:	e7df      	b.n	8b1a <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    8b5a:	2b02      	cmp	r3, #2
    8b5c:	d124      	bne.n	8ba8 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    8b5e:	1ecb      	subs	r3, r1, #3
    8b60:	2b04      	cmp	r3, #4
    8b62:	d804      	bhi.n	8b6e <z_cbvprintf_impl+0x45a>
    8b64:	e8df f003 	tbb	[pc, r3]
    8b68:	18101018 	.word	0x18101018
    8b6c:	18          	.byte	0x18
    8b6d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    8b6e:	2901      	cmp	r1, #1
    8b70:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    8b74:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    8b78:	d014      	beq.n	8ba4 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    8b7a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    8b7c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    8b80:	d1cc      	bne.n	8b1c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    8b82:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    8b84:	930e      	str	r3, [sp, #56]	; 0x38
    8b86:	e7c9      	b.n	8b1c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    8b88:	3407      	adds	r4, #7
    8b8a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    8b8e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    8b92:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    8b96:	e7c1      	b.n	8b1c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    8b98:	f854 3b04 	ldr.w	r3, [r4], #4
    8b9c:	930e      	str	r3, [sp, #56]	; 0x38
    8b9e:	2300      	movs	r3, #0
    8ba0:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    8ba2:	e7bb      	b.n	8b1c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    8ba4:	b2db      	uxtb	r3, r3
    8ba6:	e7cd      	b.n	8b44 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    8ba8:	2b04      	cmp	r3, #4
    8baa:	d108      	bne.n	8bbe <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    8bac:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    8bae:	f024 0407 	bic.w	r4, r4, #7
    8bb2:	e9d4 2300 	ldrd	r2, r3, [r4]
    8bb6:	3408      	adds	r4, #8
    8bb8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    8bbc:	e7ae      	b.n	8b1c <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    8bbe:	2b03      	cmp	r3, #3
    8bc0:	d1ac      	bne.n	8b1c <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    8bc2:	f854 3b04 	ldr.w	r3, [r4], #4
    8bc6:	e7dd      	b.n	8b84 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    8bc8:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    8bcc:	2878      	cmp	r0, #120	; 0x78
    8bce:	d8b4      	bhi.n	8b3a <z_cbvprintf_impl+0x426>
    8bd0:	2862      	cmp	r0, #98	; 0x62
    8bd2:	d81c      	bhi.n	8c0e <z_cbvprintf_impl+0x4fa>
    8bd4:	2825      	cmp	r0, #37	; 0x25
    8bd6:	f43f adad 	beq.w	8734 <z_cbvprintf_impl+0x20>
    8bda:	2858      	cmp	r0, #88	; 0x58
    8bdc:	d1ad      	bne.n	8b3a <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    8bde:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    8be2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    8be6:	9300      	str	r3, [sp, #0]
    8be8:	aa10      	add	r2, sp, #64	; 0x40
    8bea:	ab08      	add	r3, sp, #32
    8bec:	f003 fc6c 	bl	c4c8 <encode_uint>
			if (precision >= 0) {
    8bf0:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    8bf4:	4607      	mov	r7, r0
			if (precision >= 0) {
    8bf6:	f280 8099 	bge.w	8d2c <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    8bfa:	2f00      	cmp	r7, #0
    8bfc:	d09d      	beq.n	8b3a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    8bfe:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    8c02:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    8c04:	2e00      	cmp	r6, #0
    8c06:	f000 80c0 	beq.w	8d8a <z_cbvprintf_impl+0x676>
			nj_len += 1U;
    8c0a:	3001      	adds	r0, #1
    8c0c:	e0bd      	b.n	8d8a <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
    8c0e:	3863      	subs	r0, #99	; 0x63
    8c10:	2815      	cmp	r0, #21
    8c12:	d892      	bhi.n	8b3a <z_cbvprintf_impl+0x426>
    8c14:	a201      	add	r2, pc, #4	; (adr r2, 8c1c <z_cbvprintf_impl+0x508>)
    8c16:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    8c1a:	bf00      	nop
    8c1c:	00008cf1 	.word	0x00008cf1
    8c20:	00008d03 	.word	0x00008d03
    8c24:	00008b3b 	.word	0x00008b3b
    8c28:	00008b3b 	.word	0x00008b3b
    8c2c:	00008b3b 	.word	0x00008b3b
    8c30:	00008b3b 	.word	0x00008b3b
    8c34:	00008d03 	.word	0x00008d03
    8c38:	00008b3b 	.word	0x00008b3b
    8c3c:	00008b3b 	.word	0x00008b3b
    8c40:	00008b3b 	.word	0x00008b3b
    8c44:	00008b3b 	.word	0x00008b3b
    8c48:	00008d8f 	.word	0x00008d8f
    8c4c:	00008d27 	.word	0x00008d27
    8c50:	00008d4d 	.word	0x00008d4d
    8c54:	00008b3b 	.word	0x00008b3b
    8c58:	00008b3b 	.word	0x00008b3b
    8c5c:	00008c75 	.word	0x00008c75
    8c60:	00008b3b 	.word	0x00008b3b
    8c64:	00008d27 	.word	0x00008d27
    8c68:	00008b3b 	.word	0x00008b3b
    8c6c:	00008b3b 	.word	0x00008b3b
    8c70:	00008d27 	.word	0x00008d27
			if (precision >= 0) {
    8c74:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    8c78:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    8c7a:	db35      	blt.n	8ce8 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    8c7c:	4651      	mov	r1, sl
    8c7e:	4638      	mov	r0, r7
    8c80:	f003 fcf0 	bl	c664 <strnlen>
			bpe = bps + len;
    8c84:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    8c88:	2f00      	cmp	r7, #0
    8c8a:	f43f af56 	beq.w	8b3a <z_cbvprintf_impl+0x426>
		char sign = 0;
    8c8e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    8c90:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8c94:	f013 0210 	ands.w	r2, r3, #16
    8c98:	9205      	str	r2, [sp, #20]
    8c9a:	f000 8092 	beq.w	8dc2 <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
    8c9e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    8ca0:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    8ca2:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    8ca4:	bf48      	it	mi
    8ca6:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    8ca8:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    8caa:	bf48      	it	mi
    8cac:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    8cae:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
    8cb2:	9204      	str	r2, [sp, #16]
		if (width > 0) {
    8cb4:	f340 809f 	ble.w	8df6 <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
    8cb8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    8cbc:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    8cc0:	f3c2 0380 	ubfx	r3, r2, #2, #1
    8cc4:	0750      	lsls	r0, r2, #29
    8cc6:	9306      	str	r3, [sp, #24]
    8cc8:	f100 8095 	bmi.w	8df6 <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
    8ccc:	0651      	lsls	r1, r2, #25
    8cce:	f140 8088 	bpl.w	8de2 <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
    8cd2:	b13e      	cbz	r6, 8ce4 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    8cd4:	4659      	mov	r1, fp
    8cd6:	4630      	mov	r0, r6
    8cd8:	47c8      	blx	r9
    8cda:	2800      	cmp	r0, #0
    8cdc:	db7e      	blt.n	8ddc <z_cbvprintf_impl+0x6c8>
    8cde:	9b06      	ldr	r3, [sp, #24]
    8ce0:	3501      	adds	r5, #1
    8ce2:	461e      	mov	r6, r3
					pad = '0';
    8ce4:	2230      	movs	r2, #48	; 0x30
    8ce6:	e07d      	b.n	8de4 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
    8ce8:	4638      	mov	r0, r7
    8cea:	f003 fcb4 	bl	c656 <strlen>
    8cee:	e7c9      	b.n	8c84 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    8cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
    8cf2:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    8cf4:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    8cf6:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
    8cfa:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    8cfc:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
    8d00:	e7c6      	b.n	8c90 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    8d02:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    8d04:	bf5a      	itte	pl
    8d06:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    8d0a:	015e      	lslpl	r6, r3, #5
				sign = '+';
    8d0c:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    8d0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
    8d12:	2b00      	cmp	r3, #0
    8d14:	f6bf af63 	bge.w	8bde <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    8d18:	4252      	negs	r2, r2
    8d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    8d1e:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    8d20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    8d24:	e75b      	b.n	8bde <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    8d26:	2600      	movs	r6, #0
    8d28:	e759      	b.n	8bde <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    8d2a:	2600      	movs	r6, #0
				conv->flag_zero = false;
    8d2c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    8d30:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    8d34:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    8d36:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    8d3a:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    8d3c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    8d40:	f67f af5b 	bls.w	8bfa <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    8d44:	ebaa 0303 	sub.w	r3, sl, r3
    8d48:	9311      	str	r3, [sp, #68]	; 0x44
    8d4a:	e756      	b.n	8bfa <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    8d4c:	980e      	ldr	r0, [sp, #56]	; 0x38
    8d4e:	b390      	cbz	r0, 8db6 <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    8d50:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    8d54:	9300      	str	r3, [sp, #0]
    8d56:	2100      	movs	r1, #0
    8d58:	ab08      	add	r3, sp, #32
    8d5a:	aa10      	add	r2, sp, #64	; 0x40
    8d5c:	f003 fbb4 	bl	c4c8 <encode_uint>
				conv->altform_0c = true;
    8d60:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    8d64:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
    8d68:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8d6c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    8d70:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    8d74:	4607      	mov	r7, r0
				conv->altform_0c = true;
    8d76:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    8d7a:	dad6      	bge.n	8d2a <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
    8d7c:	2800      	cmp	r0, #0
    8d7e:	f43f aedc 	beq.w	8b3a <z_cbvprintf_impl+0x426>
		char sign = 0;
    8d82:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    8d84:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    8d88:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
    8d8a:	469a      	mov	sl, r3
    8d8c:	e780      	b.n	8c90 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    8d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    8d90:	2907      	cmp	r1, #7
    8d92:	f63f aed2 	bhi.w	8b3a <z_cbvprintf_impl+0x426>
    8d96:	e8df f001 	tbb	[pc, r1]
    8d9a:	040c      	.short	0x040c
    8d9c:	08080c06 	.word	0x08080c06
    8da0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    8da2:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    8da4:	e6c9      	b.n	8b3a <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    8da6:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    8da8:	e6c7      	b.n	8b3a <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    8daa:	17ea      	asrs	r2, r5, #31
    8dac:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    8db0:	e6c3      	b.n	8b3a <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    8db2:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    8db4:	e6c1      	b.n	8b3a <z_cbvprintf_impl+0x426>
    8db6:	4f2f      	ldr	r7, [pc, #188]	; (8e74 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    8db8:	4606      	mov	r6, r0
			bpe = bps + 5;
    8dba:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    8dbe:	2005      	movs	r0, #5
    8dc0:	e766      	b.n	8c90 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    8dc2:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    8dc4:	bf48      	it	mi
    8dc6:	3001      	addmi	r0, #1
    8dc8:	e76a      	b.n	8ca0 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
    8dca:	4610      	mov	r0, r2
    8dcc:	9307      	str	r3, [sp, #28]
    8dce:	9206      	str	r2, [sp, #24]
    8dd0:	4659      	mov	r1, fp
    8dd2:	47c8      	blx	r9
    8dd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    8dd8:	2800      	cmp	r0, #0
    8dda:	da04      	bge.n	8de6 <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
    8ddc:	b015      	add	sp, #84	; 0x54
    8dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    8de2:	2220      	movs	r2, #32
					pad = '0';
    8de4:	4643      	mov	r3, r8
				while (width-- > 0) {
    8de6:	4619      	mov	r1, r3
    8de8:	2900      	cmp	r1, #0
    8dea:	f103 33ff 	add.w	r3, r3, #4294967295
    8dee:	dcec      	bgt.n	8dca <z_cbvprintf_impl+0x6b6>
    8df0:	4445      	add	r5, r8
    8df2:	4698      	mov	r8, r3
    8df4:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    8df6:	b12e      	cbz	r6, 8e04 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
    8df8:	4659      	mov	r1, fp
    8dfa:	4630      	mov	r0, r6
    8dfc:	47c8      	blx	r9
    8dfe:	2800      	cmp	r0, #0
    8e00:	dbec      	blt.n	8ddc <z_cbvprintf_impl+0x6c8>
    8e02:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    8e04:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    8e08:	06da      	lsls	r2, r3, #27
    8e0a:	d401      	bmi.n	8e10 <z_cbvprintf_impl+0x6fc>
    8e0c:	071b      	lsls	r3, r3, #28
    8e0e:	d505      	bpl.n	8e1c <z_cbvprintf_impl+0x708>
				OUTC('0');
    8e10:	4659      	mov	r1, fp
    8e12:	2030      	movs	r0, #48	; 0x30
    8e14:	47c8      	blx	r9
    8e16:	2800      	cmp	r0, #0
    8e18:	dbe0      	blt.n	8ddc <z_cbvprintf_impl+0x6c8>
    8e1a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    8e1c:	9b05      	ldr	r3, [sp, #20]
    8e1e:	b133      	cbz	r3, 8e2e <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
    8e20:	4659      	mov	r1, fp
    8e22:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    8e26:	47c8      	blx	r9
    8e28:	2800      	cmp	r0, #0
    8e2a:	dbd7      	blt.n	8ddc <z_cbvprintf_impl+0x6c8>
    8e2c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    8e2e:	9e04      	ldr	r6, [sp, #16]
    8e30:	442e      	add	r6, r5
    8e32:	e005      	b.n	8e40 <z_cbvprintf_impl+0x72c>
				OUTC('0');
    8e34:	4659      	mov	r1, fp
    8e36:	2030      	movs	r0, #48	; 0x30
    8e38:	47c8      	blx	r9
    8e3a:	2800      	cmp	r0, #0
    8e3c:	dbce      	blt.n	8ddc <z_cbvprintf_impl+0x6c8>
    8e3e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    8e40:	1b73      	subs	r3, r6, r5
    8e42:	2b00      	cmp	r3, #0
    8e44:	dcf6      	bgt.n	8e34 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
    8e46:	4653      	mov	r3, sl
    8e48:	463a      	mov	r2, r7
    8e4a:	4659      	mov	r1, fp
    8e4c:	4648      	mov	r0, r9
    8e4e:	f003 fb81 	bl	c554 <outs>
    8e52:	2800      	cmp	r0, #0
    8e54:	dbc2      	blt.n	8ddc <z_cbvprintf_impl+0x6c8>
    8e56:	4405      	add	r5, r0
		while (width > 0) {
    8e58:	44a8      	add	r8, r5
    8e5a:	eba8 0305 	sub.w	r3, r8, r5
    8e5e:	2b00      	cmp	r3, #0
    8e60:	f77f ae6b 	ble.w	8b3a <z_cbvprintf_impl+0x426>
			OUTC(' ');
    8e64:	4659      	mov	r1, fp
    8e66:	2020      	movs	r0, #32
    8e68:	47c8      	blx	r9
    8e6a:	2800      	cmp	r0, #0
    8e6c:	dbb6      	blt.n	8ddc <z_cbvprintf_impl+0x6c8>
    8e6e:	3501      	adds	r5, #1
			--width;
    8e70:	e7f3      	b.n	8e5a <z_cbvprintf_impl+0x746>
    8e72:	bf00      	nop
    8e74:	0000d217 	.word	0x0000d217

00008e78 <z_arm_on_enter_cpu_idle>:
		DIV_ROUND_UP(200 * CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				 1000000);
	static uint32_t timestamps[5];
	static bool timestamps_filled;
	static uint8_t current;
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    8e78:	2305      	movs	r3, #5

	return true;
}

bool z_arm_on_enter_cpu_idle(void)
{
    8e7a:	b570      	push	{r4, r5, r6, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    8e7c:	4d14      	ldr	r5, [pc, #80]	; (8ed0 <z_arm_on_enter_cpu_idle+0x58>)
    8e7e:	4e15      	ldr	r6, [pc, #84]	; (8ed4 <z_arm_on_enter_cpu_idle+0x5c>)
    8e80:	782c      	ldrb	r4, [r5, #0]
    8e82:	3401      	adds	r4, #1
    8e84:	fbb4 f3f3 	udiv	r3, r4, r3
    8e88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8e8c:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    8e8e:	f003 fd91 	bl	c9b4 <sys_clock_cycle_get_32>
	if (timestamps_filled &&
    8e92:	4a11      	ldr	r2, [pc, #68]	; (8ed8 <z_arm_on_enter_cpu_idle+0x60>)
    8e94:	7813      	ldrb	r3, [r2, #0]
    8e96:	b123      	cbz	r3, 8ea2 <z_arm_on_enter_cpu_idle+0x2a>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
    8e98:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    8e9c:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
    8e9e:	2807      	cmp	r0, #7
    8ea0:	d913      	bls.n	8eca <z_arm_on_enter_cpu_idle+0x52>
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8ea2:	4b0e      	ldr	r3, [pc, #56]	; (8edc <z_arm_on_enter_cpu_idle+0x64>)
    8ea4:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
    8ea8:	b141      	cbz	r1, 8ebc <z_arm_on_enter_cpu_idle+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8eaa:	2100      	movs	r1, #0
    8eac:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    8eb0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    8eb4:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
    8eb6:	b90c      	cbnz	r4, 8ebc <z_arm_on_enter_cpu_idle+0x44>
			timestamps_filled = true;
    8eb8:	2301      	movs	r3, #1
    8eba:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
    8ebc:	782c      	ldrb	r4, [r5, #0]
    8ebe:	f003 fd79 	bl	c9b4 <sys_clock_cycle_get_32>
    8ec2:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	return true;
    8ec6:	2001      	movs	r0, #1
		suppress_message = true;
	}
#endif

	return ok_to_sleep;
}
    8ec8:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    8eca:	2000      	movs	r0, #0
    8ecc:	e7fc      	b.n	8ec8 <z_arm_on_enter_cpu_idle+0x50>
    8ece:	bf00      	nop
    8ed0:	2000837d 	.word	0x2000837d
    8ed4:	20008218 	.word	0x20008218
    8ed8:	2000837c 	.word	0x2000837c
    8edc:	40005000 	.word	0x40005000

00008ee0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    8ee0:	b148      	cbz	r0, 8ef6 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    8ee2:	4b05      	ldr	r3, [pc, #20]	; (8ef8 <arch_busy_wait+0x18>)
    8ee4:	4a05      	ldr	r2, [pc, #20]	; (8efc <arch_busy_wait+0x1c>)
    8ee6:	681b      	ldr	r3, [r3, #0]
    8ee8:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    8eec:	4358      	muls	r0, r3
    8eee:	4b04      	ldr	r3, [pc, #16]	; (8f00 <arch_busy_wait+0x20>)
    8ef0:	f043 0301 	orr.w	r3, r3, #1
    8ef4:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    8ef6:	4770      	bx	lr
    8ef8:	20008028 	.word	0x20008028
    8efc:	000f4240 	.word	0x000f4240
    8f00:	0000d020 	.word	0x0000d020

00008f04 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8f04:	f003 bd62 	b.w	c9cc <SystemInit>

00008f08 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    8f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8f0c:	4605      	mov	r5, r0
	__asm__ volatile(
    8f0e:	f04f 0320 	mov.w	r3, #32
    8f12:	f3ef 8611 	mrs	r6, BASEPRI
    8f16:	f383 8812 	msr	BASEPRI_MAX, r3
    8f1a:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    8f1e:	f04f 090c 	mov.w	r9, #12
	return list->head;
    8f22:	4b0d      	ldr	r3, [pc, #52]	; (8f58 <pm_state_notify+0x50>)
    8f24:	4f0d      	ldr	r7, [pc, #52]	; (8f5c <pm_state_notify+0x54>)
    8f26:	681c      	ldr	r4, [r3, #0]
    8f28:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8f60 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    8f2c:	b92c      	cbnz	r4, 8f3a <pm_state_notify+0x32>
	__asm__ volatile(
    8f2e:	f386 8811 	msr	BASEPRI, r6
    8f32:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    8f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    8f3a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    8f3e:	2d00      	cmp	r5, #0
    8f40:	bf18      	it	ne
    8f42:	4613      	movne	r3, r2
		if (callback) {
    8f44:	b12b      	cbz	r3, 8f52 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    8f46:	f898 2010 	ldrb.w	r2, [r8, #16]
    8f4a:	fb09 f202 	mul.w	r2, r9, r2
    8f4e:	5cb8      	ldrb	r0, [r7, r2]
    8f50:	4798      	blx	r3
	return node->next;
    8f52:	6824      	ldr	r4, [r4, #0]
    8f54:	e7ea      	b.n	8f2c <pm_state_notify+0x24>
    8f56:	bf00      	nop
    8f58:	20008244 	.word	0x20008244
    8f5c:	20008238 	.word	0x20008238
    8f60:	20008348 	.word	0x20008348

00008f64 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    8f64:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    8f66:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    8f68:	4b16      	ldr	r3, [pc, #88]	; (8fc4 <pm_system_resume+0x60>)
    8f6a:	7c1c      	ldrb	r4, [r3, #16]
    8f6c:	f004 031f 	and.w	r3, r4, #31
    8f70:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8f72:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8f74:	4b14      	ldr	r3, [pc, #80]	; (8fc8 <pm_system_resume+0x64>)
    8f76:	0961      	lsrs	r1, r4, #5
    8f78:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    8f7c:	e8d3 1fef 	ldaex	r1, [r3]
    8f80:	ea01 0500 	and.w	r5, r1, r0
    8f84:	e8c3 5fe6 	stlex	r6, r5, [r3]
    8f88:	2e00      	cmp	r6, #0
    8f8a:	d1f7      	bne.n	8f7c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    8f8c:	420a      	tst	r2, r1
    8f8e:	d013      	beq.n	8fb8 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    8f90:	4b0e      	ldr	r3, [pc, #56]	; (8fcc <pm_system_resume+0x68>)
    8f92:	4d0f      	ldr	r5, [pc, #60]	; (8fd0 <pm_system_resume+0x6c>)
    8f94:	b18b      	cbz	r3, 8fba <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    8f96:	230c      	movs	r3, #12
    8f98:	4363      	muls	r3, r4
    8f9a:	18ea      	adds	r2, r5, r3
    8f9c:	7851      	ldrb	r1, [r2, #1]
    8f9e:	5ce8      	ldrb	r0, [r5, r3]
    8fa0:	f003 fb16 	bl	c5d0 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    8fa4:	2000      	movs	r0, #0
    8fa6:	f7ff ffaf 	bl	8f08 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    8faa:	230c      	movs	r3, #12
    8fac:	435c      	muls	r4, r3
    8fae:	2300      	movs	r3, #0
    8fb0:	192a      	adds	r2, r5, r4
    8fb2:	512b      	str	r3, [r5, r4]
    8fb4:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    8fb8:	bd70      	pop	{r4, r5, r6, pc}
    8fba:	f383 8811 	msr	BASEPRI, r3
    8fbe:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    8fc2:	e7ef      	b.n	8fa4 <pm_system_resume+0x40>
    8fc4:	20008348 	.word	0x20008348
    8fc8:	2000824c 	.word	0x2000824c
    8fcc:	0000c5d1 	.word	0x0000c5d1
    8fd0:	20008238 	.word	0x20008238

00008fd4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    8fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    8fd8:	4b32      	ldr	r3, [pc, #200]	; (90a4 <pm_system_suspend+0xd0>)
{
    8fda:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    8fdc:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    8fde:	f04f 0320 	mov.w	r3, #32
    8fe2:	f3ef 8811 	mrs	r8, BASEPRI
    8fe6:	f383 8812 	msr	BASEPRI_MAX, r3
    8fea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    8fee:	240c      	movs	r4, #12
    8ff0:	436c      	muls	r4, r5
    8ff2:	4b2d      	ldr	r3, [pc, #180]	; (90a8 <pm_system_suspend+0xd4>)
    8ff4:	4e2d      	ldr	r6, [pc, #180]	; (90ac <pm_system_suspend+0xd8>)
    8ff6:	5d19      	ldrb	r1, [r3, r4]
    8ff8:	191a      	adds	r2, r3, r4
    8ffa:	2900      	cmp	r1, #0
    8ffc:	d047      	beq.n	908e <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    8ffe:	ca07      	ldmia	r2, {r0, r1, r2}
    9000:	eb06 0c04 	add.w	ip, r6, r4
    9004:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    9008:	2200      	movs	r2, #0
    900a:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    900c:	f388 8811 	msr	BASEPRI, r8
    9010:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    9014:	230c      	movs	r3, #12
    9016:	436b      	muls	r3, r5
    9018:	5cf0      	ldrb	r0, [r6, r3]
    901a:	18f2      	adds	r2, r6, r3
    901c:	b3a8      	cbz	r0, 908a <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    901e:	1c7b      	adds	r3, r7, #1
    9020:	d010      	beq.n	9044 <pm_system_suspend+0x70>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    9022:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    9026:	2100      	movs	r1, #0
    9028:	f8d2 c008 	ldr.w	ip, [r2, #8]
    902c:	4c20      	ldr	r4, [pc, #128]	; (90b0 <pm_system_suspend+0xdc>)
    902e:	2300      	movs	r3, #0
    9030:	fbec 4100 	umlal	r4, r1, ip, r0
    9034:	4a1f      	ldr	r2, [pc, #124]	; (90b4 <pm_system_suspend+0xe0>)
    9036:	4620      	mov	r0, r4
    9038:	f7ff f88c 	bl	8154 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    903c:	2101      	movs	r1, #1
    903e:	1a38      	subs	r0, r7, r0
    9040:	f001 fc36 	bl	a8b0 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    9044:	f002 feb4 	bl	bdb0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    9048:	2001      	movs	r0, #1
    904a:	f7ff ff5d 	bl	8f08 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    904e:	4b1a      	ldr	r3, [pc, #104]	; (90b8 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9050:	096a      	lsrs	r2, r5, #5
    9052:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    9056:	2201      	movs	r2, #1
    9058:	f005 011f 	and.w	r1, r5, #31
    905c:	408a      	lsls	r2, r1
    905e:	e8d3 0fef 	ldaex	r0, [r3]
    9062:	4310      	orrs	r0, r2
    9064:	e8c3 0fe1 	stlex	r1, r0, [r3]
    9068:	2900      	cmp	r1, #0
    906a:	d1f8      	bne.n	905e <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    906c:	4b13      	ldr	r3, [pc, #76]	; (90bc <pm_system_suspend+0xe8>)
    906e:	b13b      	cbz	r3, 9080 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    9070:	230c      	movs	r3, #12
    9072:	fb03 f005 	mul.w	r0, r3, r5
    9076:	1833      	adds	r3, r6, r0
    9078:	7859      	ldrb	r1, [r3, #1]
    907a:	5c30      	ldrb	r0, [r6, r0]
    907c:	f003 fa9c 	bl	c5b8 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    9080:	f7ff ff70 	bl	8f64 <pm_system_resume>
	k_sched_unlock();
    9084:	f002 fea8 	bl	bdd8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    9088:	2001      	movs	r0, #1
}
    908a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    908e:	4601      	mov	r1, r0
    9090:	4628      	mov	r0, r5
    9092:	f000 f815 	bl	90c0 <pm_policy_next_state>
		if (info != NULL) {
    9096:	2800      	cmp	r0, #0
    9098:	d0b8      	beq.n	900c <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    909a:	c807      	ldmia	r0, {r0, r1, r2}
    909c:	4434      	add	r4, r6
    909e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    90a2:	e7b3      	b.n	900c <pm_system_suspend+0x38>
    90a4:	20008348 	.word	0x20008348
    90a8:	2000822c 	.word	0x2000822c
    90ac:	20008238 	.word	0x20008238
    90b0:	000f423f 	.word	0x000f423f
    90b4:	000f4240 	.word	0x000f4240
    90b8:	2000824c 	.word	0x2000824c
    90bc:	0000c5b9 	.word	0x0000c5b9

000090c0 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    90c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90c4:	b085      	sub	sp, #20
    90c6:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    90c8:	a903      	add	r1, sp, #12
    90ca:	f000 f843 	bl	9154 <pm_state_cpu_get_all>
    90ce:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    90d2:	4604      	mov	r4, r0
    90d4:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    90d8:	4b1b      	ldr	r3, [pc, #108]	; (9148 <pm_policy_next_state+0x88>)
    90da:	9d03      	ldr	r5, [sp, #12]
    90dc:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    90e0:	1e43      	subs	r3, r0, #1
    90e2:	b21b      	sxth	r3, r3
    90e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    90e8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 914c <pm_policy_next_state+0x8c>
    90ec:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    90f0:	b924      	cbnz	r4, 90fc <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    90f2:	46a1      	mov	r9, r4
}
    90f4:	4648      	mov	r0, r9
    90f6:	b005      	add	sp, #20
    90f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90fc:	46c4      	mov	ip, r8
    90fe:	4659      	mov	r1, fp
    9100:	6868      	ldr	r0, [r5, #4]
    9102:	2300      	movs	r3, #0
    9104:	fbe0 c107 	umlal	ip, r1, r0, r7
    9108:	4a11      	ldr	r2, [pc, #68]	; (9150 <pm_policy_next_state+0x90>)
    910a:	4660      	mov	r0, ip
    910c:	f7ff f822 	bl	8154 <__aeabi_uldivmod>
    9110:	46c4      	mov	ip, r8
    9112:	4659      	mov	r1, fp
    9114:	9001      	str	r0, [sp, #4]
    9116:	68a8      	ldr	r0, [r5, #8]
    9118:	2300      	movs	r3, #0
    911a:	fbe0 c107 	umlal	ip, r1, r0, r7
    911e:	4a0c      	ldr	r2, [pc, #48]	; (9150 <pm_policy_next_state+0x90>)
    9120:	4660      	mov	r0, ip
    9122:	f7ff f817 	bl	8154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    9126:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    912a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    912c:	d001      	beq.n	9132 <pm_policy_next_state+0x72>
    912e:	4582      	cmp	sl, r0
    9130:	d905      	bls.n	913e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    9132:	1c73      	adds	r3, r6, #1
    9134:	d0de      	beq.n	90f4 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    9136:	9b01      	ldr	r3, [sp, #4]
    9138:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    913a:	42b0      	cmp	r0, r6
    913c:	d9da      	bls.n	90f4 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    913e:	3c01      	subs	r4, #1
    9140:	b2a4      	uxth	r4, r4
    9142:	3d0c      	subs	r5, #12
    9144:	e7d4      	b.n	90f0 <pm_policy_next_state+0x30>
    9146:	bf00      	nop
    9148:	20008004 	.word	0x20008004
    914c:	000f423f 	.word	0x000f423f
    9150:	000f4240 	.word	0x000f4240

00009154 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    9154:	b908      	cbnz	r0, 915a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    9156:	4b02      	ldr	r3, [pc, #8]	; (9160 <pm_state_cpu_get_all+0xc>)
    9158:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    915a:	2000      	movs	r0, #0
    915c:	4770      	bx	lr
    915e:	bf00      	nop
    9160:	0000d028 	.word	0x0000d028

00009164 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    9164:	4901      	ldr	r1, [pc, #4]	; (916c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    9166:	2210      	movs	r2, #16
	str	r2, [r1]
    9168:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    916a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    916c:	e000ed10 	.word	0xe000ed10

00009170 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    9170:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    9172:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    9174:	f380 8811 	msr	BASEPRI, r0
	isb
    9178:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    917c:	b501      	push	{r0, lr}
    917e:	f7ff fe7b 	bl	8e78 <z_arm_on_enter_cpu_idle>
    9182:	2800      	cmp	r0, #0
    9184:	d002      	beq.n	918c <_skip_0>
    9186:	f3bf 8f4f 	dsb	sy
    918a:	bf30      	wfi

0000918c <_skip_0>:
    918c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    9190:	b662      	cpsie	i
	isb
    9192:	f3bf 8f6f 	isb	sy

	bx	lr
    9196:	4770      	bx	lr

00009198 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    9198:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    919a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    919c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    91a0:	b501      	push	{r0, lr}
    91a2:	f7ff fe69 	bl	8e78 <z_arm_on_enter_cpu_idle>
    91a6:	2800      	cmp	r0, #0
    91a8:	d002      	beq.n	91b0 <_skip_1>
    91aa:	f3bf 8f4f 	dsb	sy
    91ae:	bf20      	wfe

000091b0 <_skip_1>:
    91b0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    91b4:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    91b8:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    91ba:	4770      	bx	lr

000091bc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    91bc:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
    91be:	2800      	cmp	r0, #0
    91c0:	db07      	blt.n	91d2 <arch_irq_enable+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    91c2:	2301      	movs	r3, #1
    91c4:	0941      	lsrs	r1, r0, #5
    91c6:	4a03      	ldr	r2, [pc, #12]	; (91d4 <arch_irq_enable+0x18>)
    91c8:	f000 001f 	and.w	r0, r0, #31
    91cc:	4083      	lsls	r3, r0
    91ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    91d2:	4770      	bx	lr
    91d4:	e000e100 	.word	0xe000e100

000091d8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    91d8:	4b05      	ldr	r3, [pc, #20]	; (91f0 <arch_irq_is_enabled+0x18>)
    91da:	0942      	lsrs	r2, r0, #5
    91dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    91e0:	2301      	movs	r3, #1
    91e2:	f000 001f 	and.w	r0, r0, #31
    91e6:	fa03 f000 	lsl.w	r0, r3, r0
}
    91ea:	4010      	ands	r0, r2
    91ec:	4770      	bx	lr
    91ee:	bf00      	nop
    91f0:	e000e100 	.word	0xe000e100

000091f4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    91f4:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
    91f6:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    91f8:	f101 0101 	add.w	r1, r1, #1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    91fc:	bfac      	ite	ge
    91fe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9202:	4b06      	ldrlt	r3, [pc, #24]	; (921c <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9204:	ea4f 1141 	mov.w	r1, r1, lsl #5
    9208:	b2c9      	uxtb	r1, r1
    920a:	bfab      	itete	ge
    920c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9210:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9214:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9218:	5419      	strblt	r1, [r3, r0]
}
    921a:	4770      	bx	lr
    921c:	e000ed14 	.word	0xe000ed14

00009220 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    9220:	bf30      	wfi
    b z_SysNmiOnReset
    9222:	f7ff bffd 	b.w	9220 <z_SysNmiOnReset>
    9226:	bf00      	nop

00009228 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    9228:	4a0b      	ldr	r2, [pc, #44]	; (9258 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    922a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    922c:	4b0b      	ldr	r3, [pc, #44]	; (925c <z_arm_prep_c+0x34>)
    922e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    9232:	609a      	str	r2, [r3, #8]
    9234:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9238:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    923c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    9240:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    9244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    9248:	f002 f956 	bl	b4f8 <z_bss_zero>
	z_data_copy();
    924c:	f002 feea 	bl	c024 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    9250:	f000 fa08 	bl	9664 <z_arm_interrupt_init>
	z_cstart();
    9254:	f002 f990 	bl	b578 <z_cstart>
    9258:	00008000 	.word	0x00008000
    925c:	e000ed00 	.word	0xe000ed00

00009260 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    9260:	4a09      	ldr	r2, [pc, #36]	; (9288 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    9262:	490a      	ldr	r1, [pc, #40]	; (928c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    9264:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    9266:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    9268:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    926a:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    926c:	4908      	ldr	r1, [pc, #32]	; (9290 <arch_swap+0x30>)
    926e:	684b      	ldr	r3, [r1, #4]
    9270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    9274:	604b      	str	r3, [r1, #4]
    9276:	2300      	movs	r3, #0
    9278:	f383 8811 	msr	BASEPRI, r3
    927c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    9280:	6893      	ldr	r3, [r2, #8]
}
    9282:	6f98      	ldr	r0, [r3, #120]	; 0x78
    9284:	4770      	bx	lr
    9286:	bf00      	nop
    9288:	20008348 	.word	0x20008348
    928c:	0000d138 	.word	0x0000d138
    9290:	e000ed00 	.word	0xe000ed00

00009294 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    9294:	4915      	ldr	r1, [pc, #84]	; (92ec <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    9296:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    9298:	f882 e07d 	strb.w	lr, [r2, #125]	; 0x7d
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    929c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    92a0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    92a2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    92a6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    92aa:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    92ac:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    92b0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    92b4:	4f0e      	ldr	r7, [pc, #56]	; (92f0 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    92b6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    92ba:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    92bc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    92be:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    92c0:	f992 e07d 	ldrsb.w	lr, [r2, #125]	; 0x7d

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    92c4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    92c6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    92c8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    92ca:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    92ce:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    92d2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    92d6:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    92da:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    92de:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    92e0:	f003 f98d 	bl	c5fe <configure_builtin_stack_guard>
    pop {r2, lr}
    92e4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    92e8:	4770      	bx	lr
    92ea:	0000      	.short	0x0000
    ldr r1, =_kernel
    92ec:	20008348 	.word	0x20008348
    ldr v4, =_SCS_ICSR
    92f0:	e000ed04 	.word	0xe000ed04

000092f4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    92f4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    92f8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    92fa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    92fe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    9302:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    9304:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    9308:	2902      	cmp	r1, #2
    beq _oops
    930a:	d0ff      	beq.n	930c <_oops>

0000930c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    930c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    930e:	f003 f967 	bl	c5e0 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    9312:	bd01      	pop	{r0, pc}

00009314 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    9314:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    9318:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    931a:	490c      	ldr	r1, [pc, #48]	; (934c <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
    931c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    9320:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    9322:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    9326:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    932a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    932c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    9330:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    9334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    9338:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    933c:	2300      	movs	r3, #0
    933e:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    9340:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    9344:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    9346:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    9348:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    934a:	4770      	bx	lr
    934c:	0000c303 	.word	0x0000c303

00009350 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    9350:	4b08      	ldr	r3, [pc, #32]	; (9374 <arch_switch_to_main_thread+0x24>)
    9352:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    9354:	6e43      	ldr	r3, [r0, #100]	; 0x64
    9356:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    935a:	4610      	mov	r0, r2
    935c:	f381 8809 	msr	PSP, r1
    9360:	2100      	movs	r1, #0
    9362:	b663      	cpsie	if
    9364:	f381 8811 	msr	BASEPRI, r1
    9368:	f3bf 8f6f 	isb	sy
    936c:	2200      	movs	r2, #0
    936e:	2300      	movs	r3, #0
    9370:	f002 ffc7 	bl	c302 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    9374:	20008348 	.word	0x20008348

00009378 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    9378:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    937a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    937c:	4a0b      	ldr	r2, [pc, #44]	; (93ac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    937e:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    9380:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    9382:	bf1e      	ittt	ne
	movne	r1, #0
    9384:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    9386:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    9388:	f003 fbaf 	blne	caea <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    938c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    938e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    9392:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    9396:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    939a:	4905      	ldr	r1, [pc, #20]	; (93b0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    939c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    939e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    93a0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    93a2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    93a6:	4903      	ldr	r1, [pc, #12]	; (93b4 <_isr_wrapper+0x3c>)
	bx r1
    93a8:	4708      	bx	r1
    93aa:	0000      	.short	0x0000
	ldr r2, =_kernel
    93ac:	20008348 	.word	0x20008348
	ldr r1, =_sw_isr_table
    93b0:	0000cd74 	.word	0x0000cd74
	ldr r1, =z_arm_int_exit
    93b4:	000093b9 	.word	0x000093b9

000093b8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    93b8:	4b04      	ldr	r3, [pc, #16]	; (93cc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    93ba:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    93bc:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    93be:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    93c0:	d003      	beq.n	93ca <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    93c2:	4903      	ldr	r1, [pc, #12]	; (93d0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    93c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    93c8:	600a      	str	r2, [r1, #0]

000093ca <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    93ca:	4770      	bx	lr
	ldr r3, =_kernel
    93cc:	20008348 	.word	0x20008348
	ldr r1, =_SCS_ICSR
    93d0:	e000ed04 	.word	0xe000ed04

000093d4 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    93d4:	4b15      	ldr	r3, [pc, #84]	; (942c <usage_fault.constprop.0+0x58>)
    93d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    93d8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    93dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    93de:	bf14      	ite	ne
    93e0:	201e      	movne	r0, #30
    93e2:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    93e4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    93e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    93ea:	bf18      	it	ne
    93ec:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    93ee:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    93f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    93f4:	bf18      	it	ne
    93f6:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    93f8:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    93fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    93fe:	bf18      	it	ne
    9400:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    9402:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    9406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    9408:	bf18      	it	ne
    940a:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    940c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    9410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    9412:	bf18      	it	ne
    9414:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    9416:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    941a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    941c:	bf18      	it	ne
    941e:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    9420:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    9424:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    9428:	629a      	str	r2, [r3, #40]	; 0x28
}
    942a:	4770      	bx	lr
    942c:	e000ed00 	.word	0xe000ed00

00009430 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    9430:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    9432:	4b19      	ldr	r3, [pc, #100]	; (9498 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    9434:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    9436:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    9438:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    943a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    943e:	bf14      	ite	ne
    9440:	2017      	movne	r0, #23
    9442:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    9444:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    9448:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    944a:	bf18      	it	ne
    944c:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    944e:	05a4      	lsls	r4, r4, #22
    9450:	d509      	bpl.n	9466 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    9452:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    9454:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9456:	0400      	lsls	r0, r0, #16
    9458:	d504      	bpl.n	9464 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    945a:	b11a      	cbz	r2, 9464 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    945c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    945e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    9462:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    9464:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    9466:	4b0c      	ldr	r3, [pc, #48]	; (9498 <bus_fault.constprop.0+0x68>)
    9468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    946a:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    946e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    9470:	bf18      	it	ne
    9472:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    9474:	05d2      	lsls	r2, r2, #23
    9476:	d40c      	bmi.n	9492 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    9478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    947a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    947e:	bf18      	it	ne
    9480:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    9482:	4a05      	ldr	r2, [pc, #20]	; (9498 <bus_fault.constprop.0+0x68>)
    9484:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9486:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    948a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    948c:	2300      	movs	r3, #0
    948e:	700b      	strb	r3, [r1, #0]
}
    9490:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    9492:	201b      	movs	r0, #27
    9494:	e7f5      	b.n	9482 <bus_fault.constprop.0+0x52>
    9496:	bf00      	nop
    9498:	e000ed00 	.word	0xe000ed00

0000949c <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    949c:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    949e:	4b1c      	ldr	r3, [pc, #112]	; (9510 <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    94a0:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    94a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    94a4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    94a6:	f010 0f10 	tst.w	r0, #16
    94aa:	bf14      	ite	ne
    94ac:	2011      	movne	r0, #17
    94ae:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    94b0:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    94b4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    94b6:	bf18      	it	ne
    94b8:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    94ba:	07a4      	lsls	r4, r4, #30
    94bc:	d509      	bpl.n	94d2 <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    94be:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    94c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    94c2:	0600      	lsls	r0, r0, #24
    94c4:	d504      	bpl.n	94d0 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    94c6:	b11a      	cbz	r2, 94d0 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    94c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    94ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    94ce:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    94d0:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    94d2:	4b0f      	ldr	r3, [pc, #60]	; (9510 <mem_manage_fault.constprop.0+0x74>)
    94d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    94d6:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    94da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    94dc:	bf18      	it	ne
    94de:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    94e0:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    94e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    94e6:	bf18      	it	ne
    94e8:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    94ea:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    94ec:	bf58      	it	pl
    94ee:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    94f0:	4b07      	ldr	r3, [pc, #28]	; (9510 <mem_manage_fault.constprop.0+0x74>)
    94f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    94f4:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    94f6:	bf42      	ittt	mi
    94f8:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    94fa:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    94fe:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    9500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9502:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    9506:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    9508:	2300      	movs	r3, #0
    950a:	700b      	strb	r3, [r1, #0]
}
    950c:	bd10      	pop	{r4, pc}
    950e:	bf00      	nop
    9510:	e000ed00 	.word	0xe000ed00

00009514 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    9514:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    9516:	4b47      	ldr	r3, [pc, #284]	; (9634 <z_arm_fault+0x120>)
{
    9518:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    951a:	685b      	ldr	r3, [r3, #4]
    951c:	2600      	movs	r6, #0
{
    951e:	b08a      	sub	sp, #40	; 0x28
    9520:	f3c3 0308 	ubfx	r3, r3, #0, #9
    9524:	f386 8811 	msr	BASEPRI, r6
    9528:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    952c:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    9530:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    9534:	d116      	bne.n	9564 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    9536:	07d0      	lsls	r0, r2, #31
    9538:	d414      	bmi.n	9564 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    953a:	0654      	lsls	r4, r2, #25
    953c:	d403      	bmi.n	9546 <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    953e:	0710      	lsls	r0, r2, #28
    9540:	d404      	bmi.n	954c <z_arm_fault+0x38>
			*nested_exc = true;
    9542:	2601      	movs	r6, #1
    9544:	e004      	b.n	9550 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    9546:	f012 0204 	ands.w	r2, r2, #4
    954a:	d000      	beq.n	954e <z_arm_fault+0x3a>
			ptr_esf = (z_arch_esf_t *)psp;
    954c:	460d      	mov	r5, r1
	*nested_exc = false;
    954e:	2600      	movs	r6, #0
	*recoverable = false;
    9550:	2200      	movs	r2, #0
	switch (fault) {
    9552:	3b03      	subs	r3, #3
	*recoverable = false;
    9554:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    9558:	2b03      	cmp	r3, #3
    955a:	d805      	bhi.n	9568 <z_arm_fault+0x54>
    955c:	e8df f003 	tbb	[pc, r3]
    9560:	59605c1e 	.word	0x59605c1e
		return NULL;
    9564:	4635      	mov	r5, r6
    9566:	e7f3      	b.n	9550 <z_arm_fault+0x3c>
    9568:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    956a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    956e:	b99b      	cbnz	r3, 9598 <z_arm_fault+0x84>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    9570:	2220      	movs	r2, #32
    9572:	4629      	mov	r1, r5
    9574:	a802      	add	r0, sp, #8
    9576:	f003 f87e 	bl	c676 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    957a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    957c:	2e00      	cmp	r6, #0
    957e:	d053      	beq.n	9628 <z_arm_fault+0x114>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    9580:	f3c3 0208 	ubfx	r2, r3, #0, #9
    9584:	b922      	cbnz	r2, 9590 <z_arm_fault+0x7c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    9586:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    958a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    958e:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    9590:	4620      	mov	r0, r4
    9592:	a902      	add	r1, sp, #8
    9594:	f003 f822 	bl	c5dc <z_arm_fatal_error>
}
    9598:	b00a      	add	sp, #40	; 0x28
    959a:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    959c:	4b25      	ldr	r3, [pc, #148]	; (9634 <z_arm_fault+0x120>)
    959e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95a0:	0791      	lsls	r1, r2, #30
    95a2:	d4e1      	bmi.n	9568 <z_arm_fault+0x54>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    95a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95a6:	2a00      	cmp	r2, #0
    95a8:	dbde      	blt.n	9568 <z_arm_fault+0x54>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    95aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95ac:	0052      	lsls	r2, r2, #1
    95ae:	d5db      	bpl.n	9568 <z_arm_fault+0x54>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    95b0:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    95b2:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    95b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    95b8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    95ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    95be:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    95c2:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    95c4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    95c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    95cc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    95ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    95d2:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    95d6:	f64d 7202 	movw	r2, #57090	; 0xdf02
    95da:	4291      	cmp	r1, r2
    95dc:	d101      	bne.n	95e2 <z_arm_fault+0xce>
			reason = esf->basic.r0;
    95de:	682c      	ldr	r4, [r5, #0]
    95e0:	e7c3      	b.n	956a <z_arm_fault+0x56>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    95e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    95e4:	b2d2      	uxtb	r2, r2
    95e6:	b132      	cbz	r2, 95f6 <z_arm_fault+0xe2>
			reason = mem_manage_fault(esf, 1, recoverable);
    95e8:	2001      	movs	r0, #1
    95ea:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    95ee:	f7ff ff55 	bl	949c <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    95f2:	4604      	mov	r4, r0
		break;
    95f4:	e7b9      	b.n	956a <z_arm_fault+0x56>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    95f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    95f8:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    95fc:	d005      	beq.n	960a <z_arm_fault+0xf6>
			reason = bus_fault(esf, 1, recoverable);
    95fe:	2001      	movs	r0, #1
    9600:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    9604:	f7ff ff14 	bl	9430 <bus_fault.constprop.0>
    9608:	e7f3      	b.n	95f2 <z_arm_fault+0xde>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    960a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    960c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    9610:	d3aa      	bcc.n	9568 <z_arm_fault+0x54>
		reason = usage_fault(esf);
    9612:	f7ff fedf 	bl	93d4 <usage_fault.constprop.0>
    9616:	e7ec      	b.n	95f2 <z_arm_fault+0xde>
		reason = mem_manage_fault(esf, 0, recoverable);
    9618:	2000      	movs	r0, #0
    961a:	f10d 0107 	add.w	r1, sp, #7
    961e:	e7e6      	b.n	95ee <z_arm_fault+0xda>
		reason = bus_fault(esf, 0, recoverable);
    9620:	2000      	movs	r0, #0
    9622:	f10d 0107 	add.w	r1, sp, #7
    9626:	e7ed      	b.n	9604 <z_arm_fault+0xf0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    9628:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    962c:	f023 0301 	bic.w	r3, r3, #1
    9630:	e7ad      	b.n	958e <z_arm_fault+0x7a>
    9632:	bf00      	nop
    9634:	e000ed00 	.word	0xe000ed00

00009638 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    9638:	4b04      	ldr	r3, [pc, #16]	; (964c <z_arm_fault_init+0x14>)
    963a:	695a      	ldr	r2, [r3, #20]
    963c:	f042 0210 	orr.w	r2, r2, #16
    9640:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    9642:	695a      	ldr	r2, [r3, #20]
    9644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    9648:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    964a:	4770      	bx	lr
    964c:	e000ed00 	.word	0xe000ed00

00009650 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    9650:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    9654:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    9658:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    965a:	4672      	mov	r2, lr
	bl z_arm_fault
    965c:	f7ff ff5a 	bl	9514 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    9660:	bd01      	pop	{r0, pc}
    9662:	bf00      	nop

00009664 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    9664:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9666:	2120      	movs	r1, #32
    9668:	4803      	ldr	r0, [pc, #12]	; (9678 <z_arm_interrupt_init+0x14>)
    966a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    966c:	3301      	adds	r3, #1
    966e:	2b45      	cmp	r3, #69	; 0x45
    9670:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    9674:	d1f9      	bne.n	966a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    9676:	4770      	bx	lr
    9678:	e000e100 	.word	0xe000e100

0000967c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    967c:	2000      	movs	r0, #0
    msr CONTROL, r0
    967e:	f380 8814 	msr	CONTROL, r0
    isb
    9682:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    9686:	2000      	movs	r0, #0
    msr MSPLIM, r0
    9688:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    968c:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    9690:	f7ff fc38 	bl	8f04 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    9694:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    9696:	490e      	ldr	r1, [pc, #56]	; (96d0 <__start+0x54>)
    str r0, [r1]
    9698:	6008      	str	r0, [r1, #0]
    dsb
    969a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    969e:	480d      	ldr	r0, [pc, #52]	; (96d4 <__start+0x58>)
    msr msp, r0
    96a0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    96a4:	f000 f83e 	bl	9724 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    96a8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    96aa:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    96ae:	480a      	ldr	r0, [pc, #40]	; (96d8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    96b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    96b4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    96b6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    96ba:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    96be:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    96c0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    96c2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    96c6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    96ca:	f7ff fdad 	bl	9228 <z_arm_prep_c>
    96ce:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    96d0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    96d4:	200090c8 	.word	0x200090c8
    ldr r0, =z_interrupt_stacks
    96d8:	20008388 	.word	0x20008388

000096dc <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    96dc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    96e0:	4905      	ldr	r1, [pc, #20]	; (96f8 <sys_arch_reboot+0x1c>)
    96e2:	4b06      	ldr	r3, [pc, #24]	; (96fc <sys_arch_reboot+0x20>)
    96e4:	68ca      	ldr	r2, [r1, #12]
    96e6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    96ea:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    96ec:	60cb      	str	r3, [r1, #12]
    96ee:	f3bf 8f4f 	dsb	sy
    __NOP();
    96f2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    96f4:	e7fd      	b.n	96f2 <sys_arch_reboot+0x16>
    96f6:	bf00      	nop
    96f8:	e000ed00 	.word	0xe000ed00
    96fc:	05fa0004 	.word	0x05fa0004

00009700 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    9700:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    9702:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    9704:	4906      	ldr	r1, [pc, #24]	; (9720 <z_arm_clear_arm_mpu_config+0x20>)
    9706:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    970a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    970e:	4293      	cmp	r3, r2
    9710:	db00      	blt.n	9714 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    9712:	4770      	bx	lr
  mpu->RNR = rnr;
    9714:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    9718:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    971c:	3301      	adds	r3, #1
    971e:	e7f6      	b.n	970e <z_arm_clear_arm_mpu_config+0xe>
    9720:	e000ed00 	.word	0xe000ed00

00009724 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    9724:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    9726:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    9728:	2400      	movs	r4, #0
    972a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    972e:	f7ff ffe7 	bl	9700 <z_arm_clear_arm_mpu_config>
    9732:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    9734:	f04f 30ff 	mov.w	r0, #4294967295
    9738:	4a0c      	ldr	r2, [pc, #48]	; (976c <z_arm_init_arch_hw_at_boot+0x48>)
    973a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    973e:	3301      	adds	r3, #1
    9740:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    9742:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    9746:	d1f8      	bne.n	973a <z_arm_init_arch_hw_at_boot+0x16>
    9748:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    974a:	f04f 30ff 	mov.w	r0, #4294967295
    974e:	4a07      	ldr	r2, [pc, #28]	; (976c <z_arm_init_arch_hw_at_boot+0x48>)
    9750:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    9754:	3301      	adds	r3, #1
    9756:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    9758:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    975c:	d1f8      	bne.n	9750 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    975e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    9760:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9764:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    9768:	bd10      	pop	{r4, pc}
    976a:	bf00      	nop
    976c:	e000e100 	.word	0xe000e100

00009770 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    9770:	4b08      	ldr	r3, [pc, #32]	; (9794 <z_impl_k_thread_abort+0x24>)
    9772:	689b      	ldr	r3, [r3, #8]
    9774:	4283      	cmp	r3, r0
    9776:	d10b      	bne.n	9790 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9778:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    977c:	b143      	cbz	r3, 9790 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    977e:	4b06      	ldr	r3, [pc, #24]	; (9798 <z_impl_k_thread_abort+0x28>)
    9780:	685a      	ldr	r2, [r3, #4]
    9782:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    9786:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    9788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    978a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    978e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    9790:	f002 bbe8 	b.w	bf64 <z_thread_abort>
    9794:	20008348 	.word	0x20008348
    9798:	e000ed00 	.word	0xe000ed00

0000979c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    979c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    979e:	4c09      	ldr	r4, [pc, #36]	; (97c4 <z_arm_configure_static_mpu_regions+0x28>)
    97a0:	4a09      	ldr	r2, [pc, #36]	; (97c8 <z_arm_configure_static_mpu_regions+0x2c>)
    97a2:	4623      	mov	r3, r4
    97a4:	2101      	movs	r1, #1
    97a6:	4809      	ldr	r0, [pc, #36]	; (97cc <z_arm_configure_static_mpu_regions+0x30>)
    97a8:	f000 f8ea 	bl	9980 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    97ac:	2300      	movs	r3, #0
    97ae:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    97b0:	4b07      	ldr	r3, [pc, #28]	; (97d0 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    97b2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    97b4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    97b6:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    97b8:	9301      	str	r3, [sp, #4]
    97ba:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    97bc:	f000 f8ea 	bl	9994 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    97c0:	b004      	add	sp, #16
    97c2:	bd10      	pop	{r4, pc}
    97c4:	20080000 	.word	0x20080000
    97c8:	20008000 	.word	0x20008000
    97cc:	0000d028 	.word	0x0000d028
    97d0:	200080d8 	.word	0x200080d8

000097d4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    97d4:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    97d6:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    97d8:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    97da:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    97de:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    97e2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    97e4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    97e6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    97e8:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    97ec:	4905      	ldr	r1, [pc, #20]	; (9804 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    97ee:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    97f2:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    97f6:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    97fa:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    97fe:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    9802:	bd10      	pop	{r4, pc}
    9804:	e000ed00 	.word	0xe000ed00

00009808 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    9808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    980c:	460f      	mov	r7, r1
    980e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    9810:	4606      	mov	r6, r0
    9812:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    9816:	4d4e      	ldr	r5, [pc, #312]	; (9950 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    9818:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    981a:	45b8      	cmp	r8, r7
    981c:	f280 8094 	bge.w	9948 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    9820:	f8d6 9004 	ldr.w	r9, [r6, #4]
    9824:	f1b9 0f00 	cmp.w	r9, #0
    9828:	d036      	beq.n	9898 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    982a:	f1b9 0f1f 	cmp.w	r9, #31
    982e:	f240 8089 	bls.w	9944 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    9832:	f019 0f1f 	tst.w	r9, #31
    9836:	f040 8085 	bne.w	9944 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    983a:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    983e:	f01a 0f1f 	tst.w	sl, #31
    9842:	d17f      	bne.n	9944 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    9844:	4650      	mov	r0, sl
    9846:	f002 fee0 	bl	c60a <arm_cmse_mpu_region_get>
    984a:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    984c:	eb09 000a 	add.w	r0, r9, sl
    9850:	3801      	subs	r0, #1
    9852:	f002 feda 	bl	c60a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    9856:	4583      	cmp	fp, r0
    9858:	d174      	bne.n	9944 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    985a:	f11b 0f16 	cmn.w	fp, #22
    985e:	d071      	beq.n	9944 <mpu_configure_regions_and_partition.constprop.0+0x13c>
    9860:	455c      	cmp	r4, fp
    9862:	dd6f      	ble.n	9944 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    9864:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    9868:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    986c:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    9870:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    9874:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    9878:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    987c:	e9d6 3200 	ldrd	r3, r2, [r6]
    9880:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    9882:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    9884:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    9888:	d11e      	bne.n	98c8 <mpu_configure_regions_and_partition.constprop.0+0xc0>
    988a:	45ca      	cmp	sl, r9
    988c:	d108      	bne.n	98a0 <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    988e:	4631      	mov	r1, r6
    9890:	fa5f f08b 	uxtb.w	r0, fp
    9894:	f002 fec2 	bl	c61c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    9898:	f108 0801 	add.w	r8, r8, #1
    989c:	360c      	adds	r6, #12
    989e:	e7bc      	b.n	981a <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    98a0:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    98a2:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    98a6:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    98aa:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    98ae:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    98b2:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    98b4:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    98b8:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    98ba:	f002 feaf 	bl	c61c <mpu_configure_region>

			if (reg_index == -EINVAL) {
    98be:	f110 0f16 	cmn.w	r0, #22
    98c2:	d03f      	beq.n	9944 <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    98c4:	1c44      	adds	r4, r0, #1
    98c6:	e7e7      	b.n	9898 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    98c8:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    98cc:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    98d0:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    98d2:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    98d6:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    98da:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    98dc:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    98de:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    98e0:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    98e2:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    98e6:	d0e8      	beq.n	98ba <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    98e8:	f002 fe98 	bl	c61c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    98ec:	f110 0f16 	cmn.w	r0, #22
    98f0:	d028      	beq.n	9944 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    98f2:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    98f6:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    98fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    98fe:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = mpu_get_rbar() &
    9902:	f362 0304 	bfi	r3, r2, #0, #5
    9906:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    990a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    990e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    9912:	085b      	lsrs	r3, r3, #1
    9914:	f363 1247 	bfi	r2, r3, #5, #3
    9918:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    991c:	e9d6 3200 	ldrd	r3, r2, [r6]
    9920:	4413      	add	r3, r2
    9922:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    9924:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    9928:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    992a:	4453      	add	r3, sl
    992c:	eba3 0309 	sub.w	r3, r3, r9
    9930:	b2c8      	uxtb	r0, r1
    9932:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    9936:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    9938:	9303      	str	r3, [sp, #12]
    993a:	d803      	bhi.n	9944 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    993c:	4669      	mov	r1, sp
    993e:	f7ff ff49 	bl	97d4 <region_init>
    9942:	e7bf      	b.n	98c4 <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    9944:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    9948:	4620      	mov	r0, r4
    994a:	b005      	add	sp, #20
    994c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9950:	e000ed00 	.word	0xe000ed00

00009954 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    9954:	2205      	movs	r2, #5
    9956:	4b04      	ldr	r3, [pc, #16]	; (9968 <arm_core_mpu_enable+0x14>)
    9958:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    995c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9960:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    9964:	4770      	bx	lr
    9966:	bf00      	nop
    9968:	e000ed00 	.word	0xe000ed00

0000996c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    996c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    9970:	2200      	movs	r2, #0
    9972:	4b02      	ldr	r3, [pc, #8]	; (997c <arm_core_mpu_disable+0x10>)
    9974:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    9978:	4770      	bx	lr
    997a:	bf00      	nop
    997c:	e000ed00 	.word	0xe000ed00

00009980 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    9980:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    9982:	4c03      	ldr	r4, [pc, #12]	; (9990 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    9984:	7822      	ldrb	r2, [r4, #0]
    9986:	f7ff ff3f 	bl	9808 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    998a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    998c:	bd10      	pop	{r4, pc}
    998e:	bf00      	nop
    9990:	2000837e 	.word	0x2000837e

00009994 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    9994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9998:	4d29      	ldr	r5, [pc, #164]	; (9a40 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    999a:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    999c:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    999e:	f04f 0800 	mov.w	r8, #0
    99a2:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    99a4:	4f27      	ldr	r7, [pc, #156]	; (9a44 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    99a6:	45d0      	cmp	r8, sl
    99a8:	da1b      	bge.n	99e2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    99aa:	f8d6 9004 	ldr.w	r9, [r6, #4]
    99ae:	f1b9 0f00 	cmp.w	r9, #0
    99b2:	d03f      	beq.n	9a34 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    99b4:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    99b6:	4608      	mov	r0, r1
    99b8:	9101      	str	r1, [sp, #4]
    99ba:	f002 fe26 	bl	c60a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    99be:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    99c0:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    99c2:	eb09 0001 	add.w	r0, r9, r1
    99c6:	3801      	subs	r0, #1
    99c8:	f002 fe1f 	bl	c60a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    99cc:	4284      	cmp	r4, r0
    99ce:	f04f 0214 	mov.w	r2, #20
    99d2:	4b1d      	ldr	r3, [pc, #116]	; (9a48 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    99d4:	d008      	beq.n	99e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    99d6:	fb02 f308 	mul.w	r3, r2, r8
    99da:	f06f 0215 	mvn.w	r2, #21
    99de:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    99e2:	b003      	add	sp, #12
    99e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    99e8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    99ec:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    99ee:	d0f8      	beq.n	99e2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    99f0:	7819      	ldrb	r1, [r3, #0]
    99f2:	42a1      	cmp	r1, r4
    99f4:	ddf5      	ble.n	99e2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    99f6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    99fa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    99fe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    9a02:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    9a06:	f100 0108 	add.w	r1, r0, #8
    9a0a:	7b00      	ldrb	r0, [r0, #12]
    9a0c:	f364 0004 	bfi	r0, r4, #0, #5
    9a10:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    9a12:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    9a16:	790c      	ldrb	r4, [r1, #4]
    9a18:	0840      	lsrs	r0, r0, #1
    9a1a:	f360 1447 	bfi	r4, r0, #5, #3
    9a1e:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    9a20:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    9a24:	f021 011f 	bic.w	r1, r1, #31
    9a28:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    9a2a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    9a2e:	f021 011f 	bic.w	r1, r1, #31
    9a32:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    9a34:	f108 0801 	add.w	r8, r8, #1
    9a38:	3514      	adds	r5, #20
    9a3a:	360c      	adds	r6, #12
    9a3c:	e7b3      	b.n	99a6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    9a3e:	bf00      	nop
    9a40:	20008250 	.word	0x20008250
    9a44:	e000ed00 	.word	0xe000ed00
    9a48:	2000837e 	.word	0x2000837e

00009a4c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    9a4c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    9a4e:	4d0e      	ldr	r5, [pc, #56]	; (9a88 <z_arm_mpu_init+0x3c>)
    9a50:	682c      	ldr	r4, [r5, #0]
    9a52:	2c08      	cmp	r4, #8
    9a54:	d815      	bhi.n	9a82 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9a56:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    9a58:	f7ff ff88 	bl	996c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    9a5c:	4b0b      	ldr	r3, [pc, #44]	; (9a8c <z_arm_mpu_init+0x40>)
    9a5e:	4a0c      	ldr	r2, [pc, #48]	; (9a90 <z_arm_mpu_init+0x44>)
    9a60:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9a64:	4284      	cmp	r4, r0
    9a66:	d105      	bne.n	9a74 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    9a68:	4b0a      	ldr	r3, [pc, #40]	; (9a94 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    9a6a:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    9a6c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    9a6e:	f7ff ff71 	bl	9954 <arm_core_mpu_enable>
}
    9a72:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    9a74:	6869      	ldr	r1, [r5, #4]
    9a76:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    9a7a:	f7ff feab 	bl	97d4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9a7e:	3001      	adds	r0, #1
    9a80:	e7f0      	b.n	9a64 <z_arm_mpu_init+0x18>
		return -1;
    9a82:	f04f 30ff 	mov.w	r0, #4294967295
    9a86:	e7f4      	b.n	9a72 <z_arm_mpu_init+0x26>
    9a88:	0000d034 	.word	0x0000d034
    9a8c:	e000ed00 	.word	0xe000ed00
    9a90:	0044ffaa 	.word	0x0044ffaa
    9a94:	2000837e 	.word	0x2000837e

00009a98 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    9a98:	4b01      	ldr	r3, [pc, #4]	; (9aa0 <__stdout_hook_install+0x8>)
    9a9a:	6018      	str	r0, [r3, #0]
}
    9a9c:	4770      	bx	lr
    9a9e:	bf00      	nop
    9aa0:	20008008 	.word	0x20008008

00009aa4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    9aa4:	4b08      	ldr	r3, [pc, #32]	; (9ac8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    9aa6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    9aa8:	1ac3      	subs	r3, r0, r3
{
    9aaa:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9aac:	4907      	ldr	r1, [pc, #28]	; (9acc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    9aae:	109b      	asrs	r3, r3, #2
{
    9ab0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9ab2:	4359      	muls	r1, r3
    9ab4:	2240      	movs	r2, #64	; 0x40
    9ab6:	4806      	ldr	r0, [pc, #24]	; (9ad0 <onoff_stop+0x2c>)
    9ab8:	f002 fe10 	bl	c6dc <stop>
	notify(mgr, res);
    9abc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9abe:	4601      	mov	r1, r0
	notify(mgr, res);
    9ac0:	4620      	mov	r0, r4
}
    9ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    9ac6:	4718      	bx	r3
    9ac8:	20008278 	.word	0x20008278
    9acc:	b6db6db7 	.word	0xb6db6db7
    9ad0:	0000ccfc 	.word	0x0000ccfc

00009ad4 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9ad4:	2340      	movs	r3, #64	; 0x40
{
    9ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    9ad8:	4c0b      	ldr	r4, [pc, #44]	; (9b08 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9ada:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    9adc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9ade:	460b      	mov	r3, r1
{
    9ae0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9ae2:	490a      	ldr	r1, [pc, #40]	; (9b0c <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    9ae4:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9ae6:	4361      	muls	r1, r4
{
    9ae8:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9aea:	4a09      	ldr	r2, [pc, #36]	; (9b10 <onoff_start+0x3c>)
    9aec:	4809      	ldr	r0, [pc, #36]	; (9b14 <onoff_start+0x40>)
    9aee:	f002 fe22 	bl	c736 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    9af2:	1e01      	subs	r1, r0, #0
    9af4:	da05      	bge.n	9b02 <onoff_start+0x2e>
		notify(mgr, err);
    9af6:	4630      	mov	r0, r6
    9af8:	462b      	mov	r3, r5
	}
}
    9afa:	b002      	add	sp, #8
    9afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    9b00:	4718      	bx	r3
}
    9b02:	b002      	add	sp, #8
    9b04:	bd70      	pop	{r4, r5, r6, pc}
    9b06:	bf00      	nop
    9b08:	20008278 	.word	0x20008278
    9b0c:	b6db6db7 	.word	0xb6db6db7
    9b10:	0000c7a3 	.word	0x0000c7a3
    9b14:	0000ccfc 	.word	0x0000ccfc

00009b18 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    9b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9b1c:	2200      	movs	r2, #0
    9b1e:	2101      	movs	r1, #1
{
    9b20:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9b22:	2005      	movs	r0, #5
    9b24:	f7ff fb66 	bl	91f4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    9b28:	4811      	ldr	r0, [pc, #68]	; (9b70 <clk_init+0x58>)
    9b2a:	f001 f861 	bl	abf0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    9b2e:	4b11      	ldr	r3, [pc, #68]	; (9b74 <clk_init+0x5c>)
    9b30:	4298      	cmp	r0, r3
    9b32:	d119      	bne.n	9b68 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    9b34:	f001 f86c 	bl	ac10 <nrfx_clock_enable>
    9b38:	2400      	movs	r4, #0
	return &data->mgr[type];
    9b3a:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9b3e:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    9b40:	f8df 8034 	ldr.w	r8, [pc, #52]	; 9b78 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    9b44:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    9b46:	4641      	mov	r1, r8
    9b48:	fb09 5004 	mla	r0, r9, r4, r5
    9b4c:	f002 fc33 	bl	c3b6 <onoff_manager_init>
		if (err < 0) {
    9b50:	2800      	cmp	r0, #0
    9b52:	db07      	blt.n	9b64 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9b54:	2301      	movs	r3, #1
    9b56:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    9b5a:	441c      	add	r4, r3
    9b5c:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9b5e:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    9b60:	d1f0      	bne.n	9b44 <clk_init+0x2c>
	}

	return 0;
    9b62:	2000      	movs	r0, #0
}
    9b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    9b68:	f06f 0004 	mvn.w	r0, #4
    9b6c:	e7fa      	b.n	9b64 <clk_init+0x4c>
    9b6e:	bf00      	nop
    9b70:	00009bb1 	.word	0x00009bb1
    9b74:	0bad0000 	.word	0x0bad0000
    9b78:	0000d05c 	.word	0x0000d05c

00009b7c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    9b7c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    9b7e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    9b80:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    9b82:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    9b84:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    9b86:	4808      	ldr	r0, [pc, #32]	; (9ba8 <clkstarted_handle.constprop.0+0x2c>)
    9b88:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    9b8a:	3378      	adds	r3, #120	; 0x78
    9b8c:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    9b8e:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
    9b92:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    9b94:	f002 fd8f 	bl	c6b6 <set_on_state>
	if (callback) {
    9b98:	b12d      	cbz	r5, 9ba6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    9b9a:	4632      	mov	r2, r6
    9b9c:	462b      	mov	r3, r5
}
    9b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    9ba2:	4802      	ldr	r0, [pc, #8]	; (9bac <clkstarted_handle.constprop.0+0x30>)
    9ba4:	4718      	bx	r3
}
    9ba6:	bd70      	pop	{r4, r5, r6, pc}
    9ba8:	20008278 	.word	0x20008278
    9bac:	0000ccfc 	.word	0x0000ccfc

00009bb0 <clock_event_handler>:
	switch (event) {
    9bb0:	2805      	cmp	r0, #5
    9bb2:	d811      	bhi.n	9bd8 <clock_event_handler+0x28>
    9bb4:	e8df f000 	tbb	[pc, r0]
    9bb8:	10100e03 	.word	0x10100e03
    9bbc:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    9bbe:	4b07      	ldr	r3, [pc, #28]	; (9bdc <clock_event_handler+0x2c>)
    9bc0:	6f98      	ldr	r0, [r3, #120]	; 0x78
    9bc2:	f010 0007 	ands.w	r0, r0, #7
    9bc6:	d107      	bne.n	9bd8 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    9bc8:	f7ff bfd8 	b.w	9b7c <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    9bcc:	2002      	movs	r0, #2
    9bce:	e7fb      	b.n	9bc8 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    9bd0:	2003      	movs	r0, #3
    9bd2:	e7f9      	b.n	9bc8 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    9bd4:	2001      	movs	r0, #1
    9bd6:	e7f7      	b.n	9bc8 <clock_event_handler+0x18>
}
    9bd8:	4770      	bx	lr
    9bda:	bf00      	nop
    9bdc:	20008278 	.word	0x20008278

00009be0 <generic_hfclk_start>:
{
    9be0:	b508      	push	{r3, lr}
	__asm__ volatile(
    9be2:	f04f 0320 	mov.w	r3, #32
    9be6:	f3ef 8111 	mrs	r1, BASEPRI
    9bea:	f383 8812 	msr	BASEPRI_MAX, r3
    9bee:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    9bf2:	4a11      	ldr	r2, [pc, #68]	; (9c38 <generic_hfclk_start+0x58>)
    9bf4:	6813      	ldr	r3, [r2, #0]
    9bf6:	f043 0002 	orr.w	r0, r3, #2
    9bfa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    9bfc:	07da      	lsls	r2, r3, #31
    9bfe:	d408      	bmi.n	9c12 <generic_hfclk_start+0x32>
	__asm__ volatile(
    9c00:	f381 8811 	msr	BASEPRI, r1
    9c04:	f3bf 8f6f 	isb	sy
}
    9c08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    9c0c:	2001      	movs	r0, #1
    9c0e:	f001 b813 	b.w	ac38 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    9c12:	4b0a      	ldr	r3, [pc, #40]	; (9c3c <generic_hfclk_start+0x5c>)
    9c14:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9c18:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    9c1c:	07d3      	lsls	r3, r2, #31
    9c1e:	d5ef      	bpl.n	9c00 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    9c20:	4807      	ldr	r0, [pc, #28]	; (9c40 <generic_hfclk_start+0x60>)
    9c22:	f002 fd48 	bl	c6b6 <set_on_state>
    9c26:	f381 8811 	msr	BASEPRI, r1
    9c2a:	f3bf 8f6f 	isb	sy
}
    9c2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    9c32:	2000      	movs	r0, #0
    9c34:	f7ff bfa2 	b.w	9b7c <clkstarted_handle.constprop.0>
    9c38:	20008318 	.word	0x20008318
    9c3c:	40005000 	.word	0x40005000
    9c40:	200082f0 	.word	0x200082f0

00009c44 <api_blocking_start>:
{
    9c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    9c46:	2200      	movs	r2, #0
    9c48:	2301      	movs	r3, #1
    9c4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    9c4e:	466b      	mov	r3, sp
    9c50:	4a08      	ldr	r2, [pc, #32]	; (9c74 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    9c52:	f8cd d000 	str.w	sp, [sp]
    9c56:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    9c5a:	f002 fd9b 	bl	c794 <api_start>
	if (err < 0) {
    9c5e:	2800      	cmp	r0, #0
    9c60:	db05      	blt.n	9c6e <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    9c62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9c66:	2300      	movs	r3, #0
    9c68:	4668      	mov	r0, sp
    9c6a:	f001 fe71 	bl	b950 <z_impl_k_sem_take>
}
    9c6e:	b005      	add	sp, #20
    9c70:	f85d fb04 	ldr.w	pc, [sp], #4
    9c74:	0000c7d9 	.word	0x0000c7d9

00009c78 <generic_hfclk_stop>:
{
    9c78:	b510      	push	{r4, lr}
	__asm__ volatile(
    9c7a:	f04f 0320 	mov.w	r3, #32
    9c7e:	f3ef 8411 	mrs	r4, BASEPRI
    9c82:	f383 8812 	msr	BASEPRI_MAX, r3
    9c86:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    9c8a:	4a07      	ldr	r2, [pc, #28]	; (9ca8 <generic_hfclk_stop+0x30>)
    9c8c:	6813      	ldr	r3, [r2, #0]
    9c8e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    9c92:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    9c94:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    9c96:	d402      	bmi.n	9c9e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    9c98:	2001      	movs	r0, #1
    9c9a:	f002 fe9b 	bl	c9d4 <nrfx_clock_stop>
	__asm__ volatile(
    9c9e:	f384 8811 	msr	BASEPRI, r4
    9ca2:	f3bf 8f6f 	isb	sy
}
    9ca6:	bd10      	pop	{r4, pc}
    9ca8:	20008318 	.word	0x20008318

00009cac <z_nrf_clock_control_lf_on>:
{
    9cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9cb0:	2201      	movs	r2, #1
    9cb2:	4607      	mov	r7, r0
    9cb4:	4935      	ldr	r1, [pc, #212]	; (9d8c <z_nrf_clock_control_lf_on+0xe0>)
    9cb6:	e8d1 3fef 	ldaex	r3, [r1]
    9cba:	e8c1 2fe0 	stlex	r0, r2, [r1]
    9cbe:	2800      	cmp	r0, #0
    9cc0:	d1f9      	bne.n	9cb6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    9cc2:	b933      	cbnz	r3, 9cd2 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    9cc4:	4932      	ldr	r1, [pc, #200]	; (9d90 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
    9cc6:	4833      	ldr	r0, [pc, #204]	; (9d94 <z_nrf_clock_control_lf_on+0xe8>)
    9cc8:	604b      	str	r3, [r1, #4]
    9cca:	60cb      	str	r3, [r1, #12]
    9ccc:	608a      	str	r2, [r1, #8]
    9cce:	f002 fb85 	bl	c3dc <onoff_request>
	switch (start_mode) {
    9cd2:	1e7b      	subs	r3, r7, #1
    9cd4:	2b01      	cmp	r3, #1
    9cd6:	d828      	bhi.n	9d2a <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    9cd8:	2f01      	cmp	r7, #1
    9cda:	d106      	bne.n	9cea <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    9cdc:	4b2e      	ldr	r3, [pc, #184]	; (9d98 <z_nrf_clock_control_lf_on+0xec>)
    9cde:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    9ce2:	f003 0303 	and.w	r3, r3, #3
    9ce6:	2b02      	cmp	r3, #2
    9ce8:	d01f      	beq.n	9d2a <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    9cea:	f002 fef8 	bl	cade <k_is_in_isr>
    9cee:	4605      	mov	r5, r0
    9cf0:	b9e8      	cbnz	r0, 9d2e <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    9cf2:	4b2a      	ldr	r3, [pc, #168]	; (9d9c <z_nrf_clock_control_lf_on+0xf0>)
    9cf4:	781b      	ldrb	r3, [r3, #0]
    9cf6:	b1d3      	cbz	r3, 9d2e <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
    9cf8:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    9cfa:	4606      	mov	r6, r0
    9cfc:	4b26      	ldr	r3, [pc, #152]	; (9d98 <z_nrf_clock_control_lf_on+0xec>)
    9cfe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9d02:	4c25      	ldr	r4, [pc, #148]	; (9d98 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9d04:	f8df 8098 	ldr.w	r8, [pc, #152]	; 9da0 <z_nrf_clock_control_lf_on+0xf4>
    9d08:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9d0c:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    9d10:	03d2      	lsls	r2, r2, #15
    9d12:	d516      	bpl.n	9d42 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    9d14:	f003 0303 	and.w	r3, r3, #3
    9d18:	2b02      	cmp	r3, #2
    9d1a:	d001      	beq.n	9d20 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    9d1c:	2f01      	cmp	r7, #1
    9d1e:	d110      	bne.n	9d42 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    9d20:	b375      	cbz	r5, 9d80 <z_nrf_clock_control_lf_on+0xd4>
    9d22:	f386 8811 	msr	BASEPRI, r6
    9d26:	f3bf 8f6f 	isb	sy
}
    9d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    9d2e:	f04f 0320 	mov.w	r3, #32
    9d32:	f3ef 8611 	mrs	r6, BASEPRI
    9d36:	f383 8812 	msr	BASEPRI_MAX, r3
    9d3a:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    9d3e:	2501      	movs	r5, #1
    9d40:	e7df      	b.n	9d02 <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    9d42:	b1c5      	cbz	r5, 9d76 <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    9d44:	4630      	mov	r0, r6
    9d46:	f7ff fa27 	bl	9198 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    9d4a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    9d4e:	b2db      	uxtb	r3, r3
    9d50:	2b01      	cmp	r3, #1
    9d52:	d1d9      	bne.n	9d08 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9d54:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    9d58:	2a00      	cmp	r2, #0
    9d5a:	d0d5      	beq.n	9d08 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9d5c:	2200      	movs	r2, #0
    9d5e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    9d62:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    9d66:	2202      	movs	r2, #2
    9d68:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    9d6c:	2220      	movs	r2, #32
    9d6e:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9d72:	60a3      	str	r3, [r4, #8]
}
    9d74:	e7c8      	b.n	9d08 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
    9d76:	2100      	movs	r1, #0
    9d78:	2021      	movs	r0, #33	; 0x21
    9d7a:	f002 f8d3 	bl	bf24 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    9d7e:	e7e4      	b.n	9d4a <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    9d80:	2202      	movs	r2, #2
    9d82:	4b05      	ldr	r3, [pc, #20]	; (9d98 <z_nrf_clock_control_lf_on+0xec>)
    9d84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9d88:	e7cf      	b.n	9d2a <z_nrf_clock_control_lf_on+0x7e>
    9d8a:	bf00      	nop
    9d8c:	20008274 	.word	0x20008274
    9d90:	20008264 	.word	0x20008264
    9d94:	20008294 	.word	0x20008294
    9d98:	40005000 	.word	0x40005000
    9d9c:	20008381 	.word	0x20008381
    9da0:	e000e100 	.word	0xe000e100

00009da4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    9da4:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    9da6:	4807      	ldr	r0, [pc, #28]	; (9dc4 <uart_console_init+0x20>)
    9da8:	f002 fe6f 	bl	ca8a <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    9dac:	b138      	cbz	r0, 9dbe <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    9dae:	4806      	ldr	r0, [pc, #24]	; (9dc8 <uart_console_init+0x24>)
    9db0:	f7ff fe72 	bl	9a98 <__stdout_hook_install>
	__printk_hook_install(console_out);
    9db4:	4804      	ldr	r0, [pc, #16]	; (9dc8 <uart_console_init+0x24>)
    9db6:	f7fe fb8b 	bl	84d0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    9dba:	2000      	movs	r0, #0
}
    9dbc:	bd08      	pop	{r3, pc}
		return -ENODEV;
    9dbe:	f06f 0012 	mvn.w	r0, #18
    9dc2:	e7fb      	b.n	9dbc <uart_console_init+0x18>
    9dc4:	0000cd5c 	.word	0x0000cd5c
    9dc8:	00009dcd 	.word	0x00009dcd

00009dcc <console_out>:
	if ('\n' == c) {
    9dcc:	280a      	cmp	r0, #10
{
    9dce:	b538      	push	{r3, r4, r5, lr}
    9dd0:	4604      	mov	r4, r0
    9dd2:	4d07      	ldr	r5, [pc, #28]	; (9df0 <console_out+0x24>)
	if ('\n' == c) {
    9dd4:	d104      	bne.n	9de0 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    9dd6:	68ab      	ldr	r3, [r5, #8]
    9dd8:	210d      	movs	r1, #13
    9dda:	4628      	mov	r0, r5
    9ddc:	685b      	ldr	r3, [r3, #4]
    9dde:	4798      	blx	r3
    9de0:	68ab      	ldr	r3, [r5, #8]
    9de2:	4803      	ldr	r0, [pc, #12]	; (9df0 <console_out+0x24>)
    9de4:	685b      	ldr	r3, [r3, #4]
    9de6:	b2e1      	uxtb	r1, r4
    9de8:	4798      	blx	r3
}
    9dea:	4620      	mov	r0, r4
    9dec:	bd38      	pop	{r3, r4, r5, pc}
    9dee:	bf00      	nop
    9df0:	0000cd5c 	.word	0x0000cd5c

00009df4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    9df4:	b530      	push	{r4, r5, lr}
	return port->config;
    9df6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    9df8:	f001 041f 	and.w	r4, r1, #31
    9dfc:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    9dfe:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    9e02:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    9e04:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    9e08:	d105      	bne.n	9e16 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    9e0a:	4620      	mov	r0, r4
    9e0c:	f001 fa0e 	bl	b22c <nrfx_gpiote_trigger_disable>

		return 0;
    9e10:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    9e12:	b005      	add	sp, #20
    9e14:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    9e16:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    9e18:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    9e1c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    9e20:	d114      	bne.n	9e4c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    9e22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    9e26:	bf0c      	ite	eq
    9e28:	2304      	moveq	r3, #4
    9e2a:	2305      	movne	r3, #5
    9e2c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    9e30:	2300      	movs	r3, #0
    9e32:	4620      	mov	r0, r4
    9e34:	4619      	mov	r1, r3
    9e36:	aa02      	add	r2, sp, #8
    9e38:	f001 f836 	bl	aea8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    9e3c:	4b1f      	ldr	r3, [pc, #124]	; (9ebc <gpio_nrfx_pin_interrupt_configure+0xc8>)
    9e3e:	4298      	cmp	r0, r3
    9e40:	d138      	bne.n	9eb4 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    9e42:	2101      	movs	r1, #1
    9e44:	4620      	mov	r0, r4
    9e46:	f001 f9ab 	bl	b1a0 <nrfx_gpiote_trigger_enable>
	return 0;
    9e4a:	e7e1      	b.n	9e10 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    9e4c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    9e50:	d025      	beq.n	9e9e <gpio_nrfx_pin_interrupt_configure+0xaa>
    9e52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    9e56:	bf14      	ite	ne
    9e58:	2301      	movne	r3, #1
    9e5a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    9e5c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    9e60:	6883      	ldr	r3, [r0, #8]
    9e62:	40cb      	lsrs	r3, r1
    9e64:	07d9      	lsls	r1, r3, #31
    9e66:	d4e3      	bmi.n	9e30 <gpio_nrfx_pin_interrupt_configure+0x3c>
    9e68:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    9e6c:	d1e0      	bne.n	9e30 <gpio_nrfx_pin_interrupt_configure+0x3c>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
    9e6e:	4a14      	ldr	r2, [pc, #80]	; (9ec0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    9e70:	4814      	ldr	r0, [pc, #80]	; (9ec4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    9e72:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
    9e74:	2901      	cmp	r1, #1
    9e76:	bf08      	it	eq
    9e78:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    9e7a:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    9e7e:	3380      	adds	r3, #128	; 0x80
    9e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    9e84:	07db      	lsls	r3, r3, #31
    9e86:	d4d3      	bmi.n	9e30 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    9e88:	f10d 0507 	add.w	r5, sp, #7
    9e8c:	4629      	mov	r1, r5
    9e8e:	4620      	mov	r0, r4
    9e90:	f001 f932 	bl	b0f8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    9e94:	4b0c      	ldr	r3, [pc, #48]	; (9ec8 <gpio_nrfx_pin_interrupt_configure+0xd4>)
    9e96:	4298      	cmp	r0, r3
    9e98:	d003      	beq.n	9ea2 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    9e9a:	9503      	str	r5, [sp, #12]
    9e9c:	e7c8      	b.n	9e30 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    9e9e:	2303      	movs	r3, #3
    9ea0:	e7dc      	b.n	9e5c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    9ea2:	4628      	mov	r0, r5
    9ea4:	f001 f976 	bl	b194 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    9ea8:	4b04      	ldr	r3, [pc, #16]	; (9ebc <gpio_nrfx_pin_interrupt_configure+0xc8>)
    9eaa:	4298      	cmp	r0, r3
    9eac:	d0f5      	beq.n	9e9a <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
    9eae:	f06f 000b 	mvn.w	r0, #11
    9eb2:	e7ae      	b.n	9e12 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    9eb4:	f06f 0015 	mvn.w	r0, #21
    9eb8:	e7ab      	b.n	9e12 <gpio_nrfx_pin_interrupt_configure+0x1e>
    9eba:	bf00      	nop
    9ebc:	0bad0000 	.word	0x0bad0000
    9ec0:	40842500 	.word	0x40842500
    9ec4:	40842800 	.word	0x40842800
    9ec8:	0bad0004 	.word	0x0bad0004

00009ecc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    9ecc:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    9ece:	f001 f951 	bl	b174 <nrfx_gpiote_is_init>
    9ed2:	4604      	mov	r4, r0
    9ed4:	b968      	cbnz	r0, 9ef2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    9ed6:	f001 f925 	bl	b124 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    9eda:	4b08      	ldr	r3, [pc, #32]	; (9efc <gpio_nrfx_init+0x30>)
    9edc:	4298      	cmp	r0, r3
    9ede:	d10a      	bne.n	9ef6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    9ee0:	4621      	mov	r1, r4
    9ee2:	4807      	ldr	r0, [pc, #28]	; (9f00 <gpio_nrfx_init+0x34>)
    9ee4:	f001 f902 	bl	b0ec <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    9ee8:	4622      	mov	r2, r4
    9eea:	2105      	movs	r1, #5
    9eec:	202f      	movs	r0, #47	; 0x2f
    9eee:	f7ff f981 	bl	91f4 <z_arm_irq_priority_set>
		return 0;
    9ef2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    9ef4:	bd10      	pop	{r4, pc}
		return -EIO;
    9ef6:	f06f 0004 	mvn.w	r0, #4
    9efa:	e7fb      	b.n	9ef4 <gpio_nrfx_init+0x28>
    9efc:	0bad0000 	.word	0x0bad0000
    9f00:	00009f05 	.word	0x00009f05

00009f04 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    9f04:	0942      	lsrs	r2, r0, #5
{
    9f06:	4603      	mov	r3, r0
    9f08:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    9f0a:	d002      	beq.n	9f12 <nrfx_gpio_handler+0xe>
    9f0c:	2a01      	cmp	r2, #1
    9f0e:	d017      	beq.n	9f40 <nrfx_gpio_handler+0x3c>
}
    9f10:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    9f12:	4e0d      	ldr	r6, [pc, #52]	; (9f48 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    9f14:	6932      	ldr	r2, [r6, #16]
    9f16:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    9f18:	2900      	cmp	r1, #0
    9f1a:	d0f9      	beq.n	9f10 <nrfx_gpio_handler+0xc>
    9f1c:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    9f1e:	f003 031f 	and.w	r3, r3, #31
    9f22:	680c      	ldr	r4, [r1, #0]
    9f24:	409d      	lsls	r5, r3
    9f26:	2900      	cmp	r1, #0
    9f28:	d0f2      	beq.n	9f10 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    9f2a:	688a      	ldr	r2, [r1, #8]
    9f2c:	402a      	ands	r2, r5
    9f2e:	d002      	beq.n	9f36 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    9f30:	4630      	mov	r0, r6
    9f32:	684b      	ldr	r3, [r1, #4]
    9f34:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    9f36:	b12c      	cbz	r4, 9f44 <nrfx_gpio_handler+0x40>
    9f38:	6823      	ldr	r3, [r4, #0]
    9f3a:	4621      	mov	r1, r4
    9f3c:	461c      	mov	r4, r3
    9f3e:	e7f2      	b.n	9f26 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    9f40:	4e02      	ldr	r6, [pc, #8]	; (9f4c <nrfx_gpio_handler+0x48>)
    9f42:	e7e7      	b.n	9f14 <nrfx_gpio_handler+0x10>
    9f44:	4623      	mov	r3, r4
    9f46:	e7f8      	b.n	9f3a <nrfx_gpio_handler+0x36>
    9f48:	0000cd2c 	.word	0x0000cd2c
    9f4c:	0000cd14 	.word	0x0000cd14

00009f50 <gpio_nrfx_pin_configure>:
{
    9f50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    9f54:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    9f56:	f001 051f 	and.w	r5, r1, #31
    9f5a:	7b3b      	ldrb	r3, [r7, #12]
{
    9f5c:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    9f5e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    9f62:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    9f64:	4628      	mov	r0, r5
    9f66:	f10d 0103 	add.w	r1, sp, #3
    9f6a:	f001 f8c5 	bl	b0f8 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    9f6e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    9f72:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    9f74:	d10b      	bne.n	9f8e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    9f76:	4628      	mov	r0, r5
    9f78:	f001 f980 	bl	b27c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    9f7c:	4b3c      	ldr	r3, [pc, #240]	; (a070 <gpio_nrfx_pin_configure+0x120>)
    9f7e:	4598      	cmp	r8, r3
    9f80:	d103      	bne.n	9f8a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    9f82:	f89d 0003 	ldrb.w	r0, [sp, #3]
    9f86:	f001 f8ff 	bl	b188 <nrfx_gpiote_channel_free>
		return 0;
    9f8a:	2000      	movs	r0, #0
    9f8c:	e00c      	b.n	9fa8 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    9f8e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    9f90:	4628      	mov	r0, r5
    9f92:	4619      	mov	r1, r3
    9f94:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    9f96:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    9f9a:	f000 ff85 	bl	aea8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    9f9e:	4b34      	ldr	r3, [pc, #208]	; (a070 <gpio_nrfx_pin_configure+0x120>)
    9fa0:	4298      	cmp	r0, r3
    9fa2:	d004      	beq.n	9fae <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    9fa4:	f06f 0015 	mvn.w	r0, #21
}
    9fa8:	b004      	add	sp, #16
    9faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    9fae:	4580      	cmp	r8, r0
    9fb0:	d103      	bne.n	9fba <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    9fb2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    9fb6:	f001 f8e7 	bl	b188 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    9fba:	03a3      	lsls	r3, r4, #14
    9fbc:	d549      	bpl.n	a052 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    9fbe:	f240 3306 	movw	r3, #774	; 0x306
    9fc2:	4023      	ands	r3, r4
    9fc4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    9fc8:	d019      	beq.n	9ffe <gpio_nrfx_pin_configure+0xae>
    9fca:	d80c      	bhi.n	9fe6 <gpio_nrfx_pin_configure+0x96>
    9fcc:	2b06      	cmp	r3, #6
    9fce:	d017      	beq.n	a000 <gpio_nrfx_pin_configure+0xb0>
    9fd0:	d804      	bhi.n	9fdc <gpio_nrfx_pin_configure+0x8c>
    9fd2:	b1ab      	cbz	r3, a000 <gpio_nrfx_pin_configure+0xb0>
    9fd4:	2b02      	cmp	r3, #2
    9fd6:	d1e5      	bne.n	9fa4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    9fd8:	2304      	movs	r3, #4
    9fda:	e011      	b.n	a000 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    9fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9fe0:	d1e0      	bne.n	9fa4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    9fe2:	2301      	movs	r3, #1
    9fe4:	e00c      	b.n	a000 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    9fe6:	f240 2202 	movw	r2, #514	; 0x202
    9fea:	4293      	cmp	r3, r2
    9fec:	d026      	beq.n	a03c <gpio_nrfx_pin_configure+0xec>
    9fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    9ff2:	d025      	beq.n	a040 <gpio_nrfx_pin_configure+0xf0>
    9ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9ff8:	d1d4      	bne.n	9fa4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    9ffa:	2302      	movs	r3, #2
    9ffc:	e000      	b.n	a000 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    9ffe:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    a000:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    a004:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    a008:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    a00c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    a00e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    a012:	bf4c      	ite	mi
    a014:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    a016:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    a01a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    a01c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    a020:	d510      	bpl.n	a044 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    a022:	2301      	movs	r3, #1
    a024:	687a      	ldr	r2, [r7, #4]
    a026:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    a028:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    a02a:	2200      	movs	r2, #0
    a02c:	4628      	mov	r0, r5
    a02e:	a901      	add	r1, sp, #4
    a030:	f000 ffe8 	bl	b004 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    a034:	4b0e      	ldr	r3, [pc, #56]	; (a070 <gpio_nrfx_pin_configure+0x120>)
    a036:	4298      	cmp	r0, r3
    a038:	d0a7      	beq.n	9f8a <gpio_nrfx_pin_configure+0x3a>
    a03a:	e7b3      	b.n	9fa4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    a03c:	2305      	movs	r3, #5
    a03e:	e7df      	b.n	a000 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a040:	2303      	movs	r3, #3
    a042:	e7dd      	b.n	a000 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    a044:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    a046:	bf41      	itttt	mi
    a048:	2301      	movmi	r3, #1
    a04a:	687a      	ldrmi	r2, [r7, #4]
    a04c:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    a04e:	60d3      	strmi	r3, [r2, #12]
}
    a050:	e7eb      	b.n	a02a <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    a052:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a054:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    a058:	bf4c      	ite	mi
    a05a:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    a05c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a060:	461a      	mov	r2, r3
    a062:	4628      	mov	r0, r5
    a064:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    a066:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a06a:	f000 ff1d 	bl	aea8 <nrfx_gpiote_input_configure>
    a06e:	e7e1      	b.n	a034 <gpio_nrfx_pin_configure+0xe4>
    a070:	0bad0000 	.word	0x0bad0000

0000a074 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a074:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    a078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
    a07c:	4e5b      	ldr	r6, [pc, #364]	; (a1ec <pinctrl_configure_pins+0x178>)
    a07e:	4f5c      	ldr	r7, [pc, #368]	; (a1f0 <pinctrl_configure_pins+0x17c>)
    a080:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    a084:	4281      	cmp	r1, r0
    a086:	d102      	bne.n	a08e <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    a088:	2000      	movs	r0, #0
}
    a08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    a08e:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    a090:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    a094:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    a098:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    a09a:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    a09e:	bf08      	it	eq
    a0a0:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    a0a4:	2c22      	cmp	r4, #34	; 0x22
    a0a6:	f200 809d 	bhi.w	a1e4 <pinctrl_configure_pins+0x170>
    a0aa:	e8df f004 	tbb	[pc, r4]
    a0ae:	2312      	.short	0x2312
    a0b0:	3e2b4228 	.word	0x3e2b4228
    a0b4:	9b9b9b42 	.word	0x9b9b9b42
    a0b8:	9b72459b 	.word	0x9b72459b
    a0bc:	9b9b9b9b 	.word	0x9b9b9b9b
    a0c0:	9b9b9b9b 	.word	0x9b9b9b9b
    a0c4:	83807d75 	.word	0x83807d75
    a0c8:	869b9b9b 	.word	0x869b9b9b
    a0cc:	95928f8c 	.word	0x95928f8c
    a0d0:	98          	.byte	0x98
    a0d1:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    a0d2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    a0d6:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
    a0da:	f1b8 0f01 	cmp.w	r8, #1
    a0de:	bf14      	ite	ne
    a0e0:	46b6      	movne	lr, r6
    a0e2:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
    a0e4:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a0e8:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
    a0ec:	f8ce 4008 	str.w	r4, [lr, #8]
    a0f0:	2401      	movs	r4, #1
    a0f2:	e002      	b.n	a0fa <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
    a0f4:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    a0f8:	2400      	movs	r4, #0
    a0fa:	46a6      	mov	lr, r4
    a0fc:	e023      	b.n	a146 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    a0fe:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    a102:	e7e8      	b.n	a0d6 <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    a104:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    a106:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
    a10a:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
    a10e:	f1b9 0f01 	cmp.w	r9, #1
    a112:	bf14      	ite	ne
    a114:	46b0      	movne	r8, r6
    a116:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
    a118:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a11c:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
    a120:	f8c8 e00c 	str.w	lr, [r8, #12]
    a124:	f04f 0e01 	mov.w	lr, #1
    a128:	e00d      	b.n	a146 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    a12a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    a12e:	2401      	movs	r4, #1
    a130:	e7eb      	b.n	a10a <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    a132:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    a136:	e7df      	b.n	a0f8 <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    a138:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    a13c:	2d00      	cmp	r5, #0
    a13e:	d1db      	bne.n	a0f8 <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    a140:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
    a142:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    a144:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    a146:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
    a14a:	f003 091f 	and.w	r9, r3, #31
    a14e:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    a152:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
    a156:	ea4f 1353 	mov.w	r3, r3, lsr #5
    a15a:	bf1c      	itt	ne
    a15c:	2401      	movne	r4, #1
    a15e:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
    a162:	2b01      	cmp	r3, #1
    a164:	bf0c      	ite	eq
    a166:	46b8      	moveq	r8, r7
    a168:	46b0      	movne	r8, r6
    a16a:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    a16e:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    a172:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
    a176:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    a17a:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a17c:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
    a180:	ea43 030e 	orr.w	r3, r3, lr
    a184:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    a188:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
    a18c:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    a190:	e778      	b.n	a084 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    a192:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    a196:	e7d1      	b.n	a13c <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    a198:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    a19c:	6804      	ldr	r4, [r0, #0]
    a19e:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    a1a2:	2c00      	cmp	r4, #0
    a1a4:	d0c3      	beq.n	a12e <pinctrl_configure_pins+0xba>
    a1a6:	e796      	b.n	a0d6 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    a1a8:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    a1ac:	e7f6      	b.n	a19c <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    a1ae:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    a1b2:	e7f3      	b.n	a19c <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    a1b4:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    a1b8:	e7f0      	b.n	a19c <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    a1ba:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    a1be:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    a1c0:	f04f 0e00 	mov.w	lr, #0
    a1c4:	e7bf      	b.n	a146 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    a1c6:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    a1ca:	e784      	b.n	a0d6 <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    a1cc:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    a1d0:	e7f5      	b.n	a1be <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    a1d2:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    a1d6:	e7f2      	b.n	a1be <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    a1d8:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    a1dc:	e7ef      	b.n	a1be <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    a1de:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    a1e2:	e7ec      	b.n	a1be <pinctrl_configure_pins+0x14a>
		switch (NRF_GET_FUN(pins[i])) {
    a1e4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a1e8:	e74f      	b.n	a08a <pinctrl_configure_pins+0x16>
    a1ea:	bf00      	nop
    a1ec:	40842500 	.word	0x40842500
    a1f0:	40842800 	.word	0x40842800

0000a1f4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    a1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    a1f6:	794b      	ldrb	r3, [r1, #5]
    a1f8:	2b01      	cmp	r3, #1
    a1fa:	d029      	beq.n	a250 <uarte_nrfx_configure+0x5c>
    a1fc:	2b03      	cmp	r3, #3
    a1fe:	d124      	bne.n	a24a <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    a200:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    a202:	798b      	ldrb	r3, [r1, #6]
    a204:	2b03      	cmp	r3, #3
    a206:	d120      	bne.n	a24a <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    a208:	79ce      	ldrb	r6, [r1, #7]
    a20a:	b10e      	cbz	r6, a210 <uarte_nrfx_configure+0x1c>
    a20c:	2e01      	cmp	r6, #1
    a20e:	d11c      	bne.n	a24a <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    a210:	790a      	ldrb	r2, [r1, #4]
    a212:	2a01      	cmp	r2, #1
    a214:	d01e      	beq.n	a254 <uarte_nrfx_configure+0x60>
    a216:	2a02      	cmp	r2, #2
    a218:	d020      	beq.n	a25c <uarte_nrfx_configure+0x68>
    a21a:	b9b2      	cbnz	r2, a24a <uarte_nrfx_configure+0x56>
    a21c:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    a21e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    a220:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    a222:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    a226:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
    a22a:	d06e      	beq.n	a30a <uarte_nrfx_configure+0x116>
    a22c:	d833      	bhi.n	a296 <uarte_nrfx_configure+0xa2>
    a22e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    a232:	d06d      	beq.n	a310 <uarte_nrfx_configure+0x11c>
    a234:	d81c      	bhi.n	a270 <uarte_nrfx_configure+0x7c>
    a236:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    a23a:	d06b      	beq.n	a314 <uarte_nrfx_configure+0x120>
    a23c:	d810      	bhi.n	a260 <uarte_nrfx_configure+0x6c>
    a23e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    a242:	d06a      	beq.n	a31a <uarte_nrfx_configure+0x126>
    a244:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    a248:	d06a      	beq.n	a320 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
    a24a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a24e:	e05b      	b.n	a308 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
    a250:	2700      	movs	r7, #0
    a252:	e7d6      	b.n	a202 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    a254:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    a258:	220e      	movs	r2, #14
    a25a:	e7e0      	b.n	a21e <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    a25c:	2400      	movs	r4, #0
    a25e:	e7fb      	b.n	a258 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
    a260:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    a264:	d05f      	beq.n	a326 <uarte_nrfx_configure+0x132>
    a266:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    a26a:	d1ee      	bne.n	a24a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    a26c:	4b38      	ldr	r3, [pc, #224]	; (a350 <uarte_nrfx_configure+0x15c>)
    a26e:	e03c      	b.n	a2ea <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    a270:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    a274:	d05a      	beq.n	a32c <uarte_nrfx_configure+0x138>
    a276:	d807      	bhi.n	a288 <uarte_nrfx_configure+0x94>
    a278:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    a27c:	d058      	beq.n	a330 <uarte_nrfx_configure+0x13c>
    a27e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    a282:	d1e2      	bne.n	a24a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    a284:	4b33      	ldr	r3, [pc, #204]	; (a354 <uarte_nrfx_configure+0x160>)
    a286:	e030      	b.n	a2ea <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    a288:	f647 2512 	movw	r5, #31250	; 0x7a12
    a28c:	42ab      	cmp	r3, r5
    a28e:	d1dc      	bne.n	a24a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    a290:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    a294:	e029      	b.n	a2ea <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    a296:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    a29a:	d04b      	beq.n	a334 <uarte_nrfx_configure+0x140>
    a29c:	d813      	bhi.n	a2c6 <uarte_nrfx_configure+0xd2>
    a29e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    a2a2:	d04a      	beq.n	a33a <uarte_nrfx_configure+0x146>
    a2a4:	d809      	bhi.n	a2ba <uarte_nrfx_configure+0xc6>
    a2a6:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    a2aa:	42ab      	cmp	r3, r5
    a2ac:	d047      	beq.n	a33e <uarte_nrfx_configure+0x14a>
    a2ae:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    a2b2:	d1ca      	bne.n	a24a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    a2b4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    a2b8:	e017      	b.n	a2ea <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    a2ba:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    a2be:	d1c4      	bne.n	a24a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    a2c0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    a2c4:	e011      	b.n	a2ea <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    a2c6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    a2ca:	d03b      	beq.n	a344 <uarte_nrfx_configure+0x150>
    a2cc:	d808      	bhi.n	a2e0 <uarte_nrfx_configure+0xec>
    a2ce:	4d22      	ldr	r5, [pc, #136]	; (a358 <uarte_nrfx_configure+0x164>)
    a2d0:	42ab      	cmp	r3, r5
    a2d2:	d03a      	beq.n	a34a <uarte_nrfx_configure+0x156>
    a2d4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    a2d8:	d1b7      	bne.n	a24a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    a2da:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    a2de:	e004      	b.n	a2ea <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    a2e0:	4d1e      	ldr	r5, [pc, #120]	; (a35c <uarte_nrfx_configure+0x168>)
    a2e2:	42ab      	cmp	r3, r5
    a2e4:	d1b1      	bne.n	a24a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    a2e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    a2ea:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    a2ec:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
    a2f0:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
    a2f2:	433a      	orrs	r2, r7
    a2f4:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    a2f6:	4334      	orrs	r4, r6
    a2f8:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    a2fa:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    a2fe:	1d2b      	adds	r3, r5, #4
    a300:	c903      	ldmia	r1, {r0, r1}
    a302:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    a306:	2000      	movs	r0, #0
}
    a308:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    a30a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    a30e:	e7ec      	b.n	a2ea <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    a310:	4b13      	ldr	r3, [pc, #76]	; (a360 <uarte_nrfx_configure+0x16c>)
    a312:	e7ea      	b.n	a2ea <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    a314:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    a318:	e7e7      	b.n	a2ea <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
    a31a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    a31e:	e7e4      	b.n	a2ea <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    a320:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    a324:	e7e1      	b.n	a2ea <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    a326:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    a32a:	e7de      	b.n	a2ea <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    a32c:	4b0d      	ldr	r3, [pc, #52]	; (a364 <uarte_nrfx_configure+0x170>)
    a32e:	e7dc      	b.n	a2ea <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    a330:	4b0d      	ldr	r3, [pc, #52]	; (a368 <uarte_nrfx_configure+0x174>)
    a332:	e7da      	b.n	a2ea <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    a334:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    a338:	e7d7      	b.n	a2ea <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    a33a:	4b0c      	ldr	r3, [pc, #48]	; (a36c <uarte_nrfx_configure+0x178>)
    a33c:	e7d5      	b.n	a2ea <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    a33e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    a342:	e7d2      	b.n	a2ea <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    a344:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    a348:	e7cf      	b.n	a2ea <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    a34a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    a34e:	e7cc      	b.n	a2ea <uarte_nrfx_configure+0xf6>
    a350:	0013b000 	.word	0x0013b000
    a354:	004ea000 	.word	0x004ea000
    a358:	0003d090 	.word	0x0003d090
    a35c:	000f4240 	.word	0x000f4240
    a360:	00275000 	.word	0x00275000
    a364:	0075c000 	.word	0x0075c000
    a368:	003af000 	.word	0x003af000
    a36c:	013a9000 	.word	0x013a9000

0000a370 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    a370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a374:	4680      	mov	r8, r0
    a376:	2200      	movs	r2, #0
    a378:	2101      	movs	r1, #1
    a37a:	2008      	movs	r0, #8
    a37c:	f7fe ff3a 	bl	91f4 <z_arm_irq_priority_set>
    a380:	2008      	movs	r0, #8
    a382:	f7fe ff1b 	bl	91bc <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    a386:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    a388:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    a38c:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    a390:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    a392:	aa01      	add	r2, sp, #4
    a394:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    a398:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    a39c:	f8d7 900c 	ldr.w	r9, [r7, #12]
    a3a0:	4648      	mov	r0, r9
    a3a2:	f002 fa7b 	bl	c89c <pinctrl_lookup_state>
	if (ret < 0) {
    a3a6:	1e05      	subs	r5, r0, #0
    a3a8:	db4d      	blt.n	a446 <uarte_0_init+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    a3aa:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    a3ac:	f8d9 2000 	ldr.w	r2, [r9]
    a3b0:	7919      	ldrb	r1, [r3, #4]
    a3b2:	6818      	ldr	r0, [r3, #0]
    a3b4:	f7ff fe5e 	bl	a074 <pinctrl_configure_pins>
	if (err < 0) {
    a3b8:	1e05      	subs	r5, r0, #0
    a3ba:	db44      	blt.n	a446 <uarte_0_init+0xd6>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    a3bc:	4640      	mov	r0, r8
    a3be:	1d31      	adds	r1, r6, #4
    a3c0:	f7ff ff18 	bl	a1f4 <uarte_nrfx_configure>
	if (err) {
    a3c4:	4605      	mov	r5, r0
    a3c6:	2800      	cmp	r0, #0
    a3c8:	d13d      	bne.n	a446 <uarte_0_init+0xd6>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    a3ca:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    a3cc:	0799      	lsls	r1, r3, #30
    a3ce:	d513      	bpl.n	a3f8 <uarte_0_init+0x88>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    a3d0:	f106 0018 	add.w	r0, r6, #24
    a3d4:	f000 fce2 	bl	ad9c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    a3d8:	4b1e      	ldr	r3, [pc, #120]	; (a454 <uarte_0_init+0xe4>)
    a3da:	4298      	cmp	r0, r3
    a3dc:	d137      	bne.n	a44e <uarte_0_init+0xde>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    a3de:	7e33      	ldrb	r3, [r6, #24]
    a3e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a3e4:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    a3e8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    a3ec:	2301      	movs	r3, #1
    a3ee:	7e32      	ldrb	r2, [r6, #24]
    a3f0:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    a3f2:	4a19      	ldr	r2, [pc, #100]	; (a458 <uarte_0_init+0xe8>)
    a3f4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a3f8:	2308      	movs	r3, #8
    a3fa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    a3fe:	7a3b      	ldrb	r3, [r7, #8]
    a400:	b953      	cbnz	r3, a418 <uarte_0_init+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a402:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    a406:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a40a:	6973      	ldr	r3, [r6, #20]
    a40c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    a410:	2301      	movs	r3, #1
    a412:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a416:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    a418:	687b      	ldr	r3, [r7, #4]
    a41a:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    a41c:	bf5c      	itt	pl
    a41e:	f44f 7380 	movpl.w	r3, #256	; 0x100
    a422:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a426:	687b      	ldr	r3, [r7, #4]
    a428:	06db      	lsls	r3, r3, #27
    a42a:	bf44      	itt	mi
    a42c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    a430:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a434:	6933      	ldr	r3, [r6, #16]
    a436:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a43a:	2300      	movs	r3, #0
    a43c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a440:	2301      	movs	r3, #1
    a442:	60a3      	str	r3, [r4, #8]
    a444:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    a446:	4628      	mov	r0, r5
    a448:	b003      	add	sp, #12
    a44a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    a44e:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    a452:	e7f8      	b.n	a446 <uarte_0_init+0xd6>
    a454:	0bad0000 	.word	0x0bad0000
    a458:	40017000 	.word	0x40017000

0000a45c <uarte_nrfx_poll_out>:
{
    a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a45e:	4604      	mov	r4, r0
    a460:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    a462:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    a464:	f002 fb3b 	bl	cade <k_is_in_isr>
    a468:	b9b0      	cbnz	r0, a498 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    a46a:	4b2e      	ldr	r3, [pc, #184]	; (a524 <uarte_nrfx_poll_out+0xc8>)
    a46c:	781b      	ldrb	r3, [r3, #0]
    a46e:	b19b      	cbz	r3, a498 <uarte_nrfx_poll_out+0x3c>
{
    a470:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    a472:	6860      	ldr	r0, [r4, #4]
    a474:	f002 fa48 	bl	c908 <is_tx_ready.isra.0>
    a478:	bb00      	cbnz	r0, a4bc <uarte_nrfx_poll_out+0x60>
    a47a:	2001      	movs	r0, #1
    a47c:	f002 faa8 	bl	c9d0 <nrfx_busy_wait>
    a480:	3e01      	subs	r6, #1
    a482:	d1f6      	bne.n	a472 <uarte_nrfx_poll_out+0x16>
    a484:	2100      	movs	r1, #0
    a486:	2021      	movs	r0, #33	; 0x21
    a488:	f001 fd4c 	bl	bf24 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    a48c:	e7f0      	b.n	a470 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    a48e:	f386 8811 	msr	BASEPRI, r6
    a492:	f3bf 8f6f 	isb	sy
}
    a496:	e7f5      	b.n	a484 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    a498:	f04f 0320 	mov.w	r3, #32
    a49c:	f3ef 8611 	mrs	r6, BASEPRI
    a4a0:	f383 8812 	msr	BASEPRI_MAX, r3
    a4a4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    a4a8:	6860      	ldr	r0, [r4, #4]
    a4aa:	4631      	mov	r1, r6
    a4ac:	f002 fa2c 	bl	c908 <is_tx_ready.isra.0>
    a4b0:	b990      	cbnz	r0, a4d8 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    a4b2:	f386 8811 	msr	BASEPRI, r6
    a4b6:	f3bf 8f6f 	isb	sy
}
    a4ba:	e7ed      	b.n	a498 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    a4bc:	f04f 0320 	mov.w	r3, #32
    a4c0:	f3ef 8611 	mrs	r6, BASEPRI
    a4c4:	f383 8812 	msr	BASEPRI_MAX, r3
    a4c8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    a4cc:	6860      	ldr	r0, [r4, #4]
    a4ce:	4631      	mov	r1, r6
    a4d0:	f002 fa1a 	bl	c908 <is_tx_ready.isra.0>
    a4d4:	2800      	cmp	r0, #0
    a4d6:	d0da      	beq.n	a48e <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    a4d8:	693b      	ldr	r3, [r7, #16]
    a4da:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    a4dc:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a4de:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    a4e0:	6813      	ldr	r3, [r2, #0]
    a4e2:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a4e6:	2001      	movs	r0, #1
    a4e8:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a4ec:	2000      	movs	r0, #0
    a4ee:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    a4f2:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    a4f6:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a4fa:	6852      	ldr	r2, [r2, #4]
    a4fc:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    a500:	06d2      	lsls	r2, r2, #27
    a502:	d508      	bpl.n	a516 <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a504:	2008      	movs	r0, #8
	return config->uarte_regs;
    a506:	6862      	ldr	r2, [r4, #4]
    a508:	6812      	ldr	r2, [r2, #0]
    a50a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    a50e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    a512:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a516:	2201      	movs	r2, #1
    a518:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    a51a:	f381 8811 	msr	BASEPRI, r1
    a51e:	f3bf 8f6f 	isb	sy
}
    a522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a524:	20008381 	.word	0x20008381

0000a528 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    a528:	2301      	movs	r3, #1
    a52a:	4083      	lsls	r3, r0
{
    a52c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    a52e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a530:	4a0b      	ldr	r2, [pc, #44]	; (a560 <compare_int_lock+0x38>)
    a532:	e8d2 1fef 	ldaex	r1, [r2]
    a536:	ea01 0504 	and.w	r5, r1, r4
    a53a:	e8c2 5fe6 	stlex	r6, r5, [r2]
    a53e:	2e00      	cmp	r6, #0
    a540:	d1f7      	bne.n	a532 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a542:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a546:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    a548:	4806      	ldr	r0, [pc, #24]	; (a564 <compare_int_lock+0x3c>)
    a54a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    a54e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a552:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    a556:	420b      	tst	r3, r1
}
    a558:	bf14      	ite	ne
    a55a:	2001      	movne	r0, #1
    a55c:	2000      	moveq	r0, #0
    a55e:	bd70      	pop	{r4, r5, r6, pc}
    a560:	20008338 	.word	0x20008338
    a564:	40015000 	.word	0x40015000

0000a568 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    a568:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    a56a:	490e      	ldr	r1, [pc, #56]	; (a5a4 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    a56c:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    a570:	e9d1 3400 	ldrd	r3, r4, [r1]
    a574:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    a576:	18c3      	adds	r3, r0, r3
    a578:	f144 0400 	adc.w	r4, r4, #0
    a57c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    a580:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    a584:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    a588:	d209      	bcs.n	a59e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    a58a:	4b07      	ldr	r3, [pc, #28]	; (a5a8 <sys_clock_timeout_handler+0x40>)
    a58c:	681b      	ldr	r3, [r3, #0]
    a58e:	0a1a      	lsrs	r2, r3, #8
    a590:	061b      	lsls	r3, r3, #24
    a592:	199c      	adds	r4, r3, r6
    a594:	4b05      	ldr	r3, [pc, #20]	; (a5ac <sys_clock_timeout_handler+0x44>)
    a596:	f142 0500 	adc.w	r5, r2, #0
    a59a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    a59e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    a5a0:	f001 be16 	b.w	c1d0 <sys_clock_announce>
    a5a4:	200080e8 	.word	0x200080e8
    a5a8:	2000833c 	.word	0x2000833c
    a5ac:	200080f0 	.word	0x200080f0

0000a5b0 <compare_int_unlock>:
	if (key) {
    a5b0:	b1d9      	cbz	r1, a5ea <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    a5b2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a5b4:	4a0d      	ldr	r2, [pc, #52]	; (a5ec <compare_int_unlock+0x3c>)
    a5b6:	4083      	lsls	r3, r0
    a5b8:	e8d2 cfef 	ldaex	ip, [r2]
    a5bc:	ea4c 0c03 	orr.w	ip, ip, r3
    a5c0:	e8c2 cfe1 	stlex	r1, ip, [r2]
    a5c4:	2900      	cmp	r1, #0
    a5c6:	d1f7      	bne.n	a5b8 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a5c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    a5cc:	4a08      	ldr	r2, [pc, #32]	; (a5f0 <compare_int_unlock+0x40>)
    a5ce:	4083      	lsls	r3, r0
    a5d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a5d4:	4b07      	ldr	r3, [pc, #28]	; (a5f4 <compare_int_unlock+0x44>)
    a5d6:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    a5da:	40c3      	lsrs	r3, r0
    a5dc:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a5de:	bf42      	ittt	mi
    a5e0:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    a5e4:	4b04      	ldrmi	r3, [pc, #16]	; (a5f8 <compare_int_unlock+0x48>)
    a5e6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    a5ea:	4770      	bx	lr
    a5ec:	20008338 	.word	0x20008338
    a5f0:	40015000 	.word	0x40015000
    a5f4:	20008334 	.word	0x20008334
    a5f8:	e000e100 	.word	0xe000e100

0000a5fc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    a5fc:	4b0d      	ldr	r3, [pc, #52]	; (a634 <z_nrf_rtc_timer_read+0x38>)
    a5fe:	6818      	ldr	r0, [r3, #0]
    a600:	0a01      	lsrs	r1, r0, #8
    a602:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    a604:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    a608:	4b0b      	ldr	r3, [pc, #44]	; (a638 <z_nrf_rtc_timer_read+0x3c>)
    a60a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    a60e:	1818      	adds	r0, r3, r0
    a610:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    a614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    a618:	d20a      	bcs.n	a630 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    a61a:	4b08      	ldr	r3, [pc, #32]	; (a63c <z_nrf_rtc_timer_read+0x40>)
    a61c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a620:	4290      	cmp	r0, r2
    a622:	eb71 0303 	sbcs.w	r3, r1, r3
    a626:	d203      	bcs.n	a630 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    a628:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    a62c:	f141 0100 	adc.w	r1, r1, #0
}
    a630:	4770      	bx	lr
    a632:	bf00      	nop
    a634:	2000833c 	.word	0x2000833c
    a638:	40015000 	.word	0x40015000
    a63c:	200080f0 	.word	0x200080f0

0000a640 <compare_set>:
{
    a640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a644:	4616      	mov	r6, r2
    a646:	461f      	mov	r7, r3
    a648:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    a64a:	f7ff ff6d 	bl	a528 <compare_int_lock>
    a64e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    a650:	f7ff ffd4 	bl	a5fc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    a654:	42b0      	cmp	r0, r6
    a656:	eb71 0307 	sbcs.w	r3, r1, r7
    a65a:	d250      	bcs.n	a6fe <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    a65c:	4b38      	ldr	r3, [pc, #224]	; (a740 <compare_set+0x100>)
    a65e:	1a30      	subs	r0, r6, r0
    a660:	eb67 0101 	sbc.w	r1, r7, r1
    a664:	4298      	cmp	r0, r3
    a666:	f171 0100 	sbcs.w	r1, r1, #0
    a66a:	d265      	bcs.n	a738 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    a66c:	4b35      	ldr	r3, [pc, #212]	; (a744 <compare_set+0x104>)
    a66e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    a672:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    a676:	429f      	cmp	r7, r3
    a678:	bf08      	it	eq
    a67a:	4296      	cmpeq	r6, r2
    a67c:	d049      	beq.n	a712 <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a67e:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    a682:	4931      	ldr	r1, [pc, #196]	; (a748 <compare_set+0x108>)
    a684:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    a688:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    a68a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    a68e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    a692:	f002 f983 	bl	c99c <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    a696:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    a69a:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    a69c:	f104 0550 	add.w	r5, r4, #80	; 0x50
    a6a0:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a6a2:	b2ad      	uxth	r5, r5
    a6a4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    a6a8:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    a6ac:	4a27      	ldr	r2, [pc, #156]	; (a74c <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a6ae:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
    a6b2:	9301      	str	r3, [sp, #4]
    a6b4:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    a6b8:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    a6bc:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    a6c0:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    a6c4:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    a6c8:	eba0 0008 	sub.w	r0, r0, r8
    a6cc:	3803      	subs	r0, #3
    a6ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    a6d2:	4290      	cmp	r0, r2
    a6d4:	d91d      	bls.n	a712 <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a6d6:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    a6d8:	b160      	cbz	r0, a6f4 <compare_set+0xb4>
     return p_reg->COUNTER;
    a6da:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    a6de:	eba8 000b 	sub.w	r0, r8, fp
    a6e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    a6e6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a6ea:	d912      	bls.n	a712 <compare_set+0xd2>
					event_clear(chan);
    a6ec:	4620      	mov	r0, r4
    a6ee:	f002 f955 	bl	c99c <event_clear>
    a6f2:	4a16      	ldr	r2, [pc, #88]	; (a74c <compare_set+0x10c>)
			cc_val = now + cc_inc;
    a6f4:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    a6f8:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    a6fc:	e7da      	b.n	a6b4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    a6fe:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a700:	4a13      	ldr	r2, [pc, #76]	; (a750 <compare_set+0x110>)
    a702:	40a3      	lsls	r3, r4
    a704:	e8d2 0fef 	ldaex	r0, [r2]
    a708:	4318      	orrs	r0, r3
    a70a:	e8c2 0fe1 	stlex	r1, r0, [r2]
    a70e:	2900      	cmp	r1, #0
    a710:	d1f8      	bne.n	a704 <compare_set+0xc4>
	return ret;
    a712:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    a714:	490b      	ldr	r1, [pc, #44]	; (a744 <compare_set+0x104>)
	cc_data[chan].callback = handler;
    a716:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    a718:	0123      	lsls	r3, r4, #4
    a71a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    a71e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    a720:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    a724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a726:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    a728:	4620      	mov	r0, r4
    a72a:	9900      	ldr	r1, [sp, #0]
    a72c:	f7ff ff40 	bl	a5b0 <compare_int_unlock>
}
    a730:	4628      	mov	r0, r5
    a732:	b003      	add	sp, #12
    a734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    a738:	f06f 0515 	mvn.w	r5, #21
    a73c:	e7f4      	b.n	a728 <compare_set+0xe8>
    a73e:	bf00      	nop
    a740:	00800001 	.word	0x00800001
    a744:	200080d8 	.word	0x200080d8
    a748:	40015000 	.word	0x40015000
    a74c:	007ffffd 	.word	0x007ffffd
    a750:	20008334 	.word	0x20008334

0000a754 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    a754:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    a756:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    a758:	f04f 30ff 	mov.w	r0, #4294967295
    a75c:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
    a760:	4c18      	ldr	r4, [pc, #96]	; (a7c4 <sys_clock_driver_init+0x70>)
    a762:	4b19      	ldr	r3, [pc, #100]	; (a7c8 <sys_clock_driver_init+0x74>)
    p_reg->INTENSET = mask;
    a764:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    a766:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    a76a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    a76e:	4b17      	ldr	r3, [pc, #92]	; (a7cc <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    a770:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    a774:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    a778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a77c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    a780:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    a784:	4b12      	ldr	r3, [pc, #72]	; (a7d0 <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    a786:	2101      	movs	r1, #1
    a788:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    a78c:	2015      	movs	r0, #21
    a78e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    a792:	462a      	mov	r2, r5
    a794:	f7fe fd2e 	bl	91f4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    a798:	2015      	movs	r0, #21
    a79a:	f7fe fd0f 	bl	91bc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    a79e:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    a7a0:	4a0c      	ldr	r2, [pc, #48]	; (a7d4 <sys_clock_driver_init+0x80>)
    a7a2:	60a3      	str	r3, [r4, #8]
    a7a4:	6023      	str	r3, [r4, #0]
    a7a6:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    a7a8:	4b0b      	ldr	r3, [pc, #44]	; (a7d8 <sys_clock_driver_init+0x84>)
    a7aa:	4a0c      	ldr	r2, [pc, #48]	; (a7dc <sys_clock_driver_init+0x88>)
    a7ac:	9300      	str	r3, [sp, #0]
    a7ae:	4628      	mov	r0, r5
    a7b0:	2300      	movs	r3, #0
    a7b2:	9501      	str	r5, [sp, #4]
    a7b4:	f7ff ff44 	bl	a640 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    a7b8:	4630      	mov	r0, r6
    a7ba:	f7ff fa77 	bl	9cac <z_nrf_clock_control_lf_on>

	return 0;
}
    a7be:	4628      	mov	r0, r5
    a7c0:	b002      	add	sp, #8
    a7c2:	bd70      	pop	{r4, r5, r6, pc}
    a7c4:	40015000 	.word	0x40015000
    a7c8:	000f0003 	.word	0x000f0003
    a7cc:	200080d8 	.word	0x200080d8
    a7d0:	e000e100 	.word	0xe000e100
    a7d4:	20008338 	.word	0x20008338
    a7d8:	0000a569 	.word	0x0000a569
    a7dc:	007fffff 	.word	0x007fffff

0000a7e0 <rtc_nrf_isr>:
{
    a7e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    a7e4:	4b2e      	ldr	r3, [pc, #184]	; (a8a0 <rtc_nrf_isr+0xc0>)
    a7e6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    a7ea:	0790      	lsls	r0, r2, #30
    a7ec:	d50b      	bpl.n	a806 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a7ee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    a7f2:	b142      	cbz	r2, a806 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a7f4:	2200      	movs	r2, #0
    a7f6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    a7fa:	4a2a      	ldr	r2, [pc, #168]	; (a8a4 <rtc_nrf_isr+0xc4>)
    a7fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    a800:	6813      	ldr	r3, [r2, #0]
    a802:	3301      	adds	r3, #1
    a804:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    a806:	4a26      	ldr	r2, [pc, #152]	; (a8a0 <rtc_nrf_isr+0xc0>)
    a808:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    a80c:	03d9      	lsls	r1, r3, #15
    a80e:	d527      	bpl.n	a860 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a810:	4b25      	ldr	r3, [pc, #148]	; (a8a8 <rtc_nrf_isr+0xc8>)
    a812:	e8d3 1fef 	ldaex	r1, [r3]
    a816:	f021 0001 	bic.w	r0, r1, #1
    a81a:	e8c3 0fe4 	stlex	r4, r0, [r3]
    a81e:	2c00      	cmp	r4, #0
    a820:	d1f7      	bne.n	a812 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    a822:	07cb      	lsls	r3, r1, #31
    a824:	d402      	bmi.n	a82c <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a826:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    a82a:	b1cb      	cbz	r3, a860 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a82c:	2500      	movs	r5, #0
    a82e:	4c1c      	ldr	r4, [pc, #112]	; (a8a0 <rtc_nrf_isr+0xc0>)
    a830:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    a834:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    a838:	f7ff fee0 	bl	a5fc <z_nrf_rtc_timer_read>
	__asm__ volatile(
    a83c:	f04f 0320 	mov.w	r3, #32
    a840:	f3ef 8211 	mrs	r2, BASEPRI
    a844:	f383 8812 	msr	BASEPRI_MAX, r3
    a848:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    a84c:	4b17      	ldr	r3, [pc, #92]	; (a8ac <rtc_nrf_isr+0xcc>)
    a84e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    a852:	42b0      	cmp	r0, r6
    a854:	41b9      	sbcs	r1, r7
    a856:	d206      	bcs.n	a866 <rtc_nrf_isr+0x86>
	__asm__ volatile(
    a858:	f382 8811 	msr	BASEPRI, r2
    a85c:	f3bf 8f6f 	isb	sy
}
    a860:	b003      	add	sp, #12
    a862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    a866:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    a86a:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    a86e:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    a872:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    a874:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    a878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a87c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a880:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    a884:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    a888:	f382 8811 	msr	BASEPRI, r2
    a88c:	f3bf 8f6f 	isb	sy
		if (handler) {
    a890:	2900      	cmp	r1, #0
    a892:	d0e5      	beq.n	a860 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    a894:	9000      	str	r0, [sp, #0]
    a896:	4632      	mov	r2, r6
    a898:	463b      	mov	r3, r7
    a89a:	4628      	mov	r0, r5
    a89c:	4788      	blx	r1
    a89e:	e7df      	b.n	a860 <rtc_nrf_isr+0x80>
    a8a0:	40015000 	.word	0x40015000
    a8a4:	2000833c 	.word	0x2000833c
    a8a8:	20008334 	.word	0x20008334
    a8ac:	200080d8 	.word	0x200080d8

0000a8b0 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    a8b0:	1c43      	adds	r3, r0, #1
{
    a8b2:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    a8b4:	d021      	beq.n	a8fa <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    a8b6:	2801      	cmp	r0, #1
    a8b8:	dd21      	ble.n	a8fe <sys_clock_set_timeout+0x4e>
    a8ba:	4a12      	ldr	r2, [pc, #72]	; (a904 <sys_clock_set_timeout+0x54>)
    a8bc:	4b12      	ldr	r3, [pc, #72]	; (a908 <sys_clock_set_timeout+0x58>)
    a8be:	4290      	cmp	r0, r2
    a8c0:	bfd4      	ite	le
    a8c2:	4604      	movle	r4, r0
    a8c4:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    a8c6:	f7ff fe99 	bl	a5fc <z_nrf_rtc_timer_read>
    a8ca:	4b10      	ldr	r3, [pc, #64]	; (a90c <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    a8cc:	490e      	ldr	r1, [pc, #56]	; (a908 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    a8d2:	1a80      	subs	r0, r0, r2
		cyc = 0;
    a8d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a8d8:	bf28      	it	cs
    a8da:	2400      	movcs	r4, #0
	cyc += unannounced;
    a8dc:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    a8de:	428c      	cmp	r4, r1
    a8e0:	bf28      	it	cs
    a8e2:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    a8e4:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    a8e6:	490a      	ldr	r1, [pc, #40]	; (a910 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    a8e8:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    a8ea:	9001      	str	r0, [sp, #4]
    a8ec:	9100      	str	r1, [sp, #0]
    a8ee:	f143 0300 	adc.w	r3, r3, #0
    a8f2:	f7ff fea5 	bl	a640 <compare_set>
}
    a8f6:	b002      	add	sp, #8
    a8f8:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    a8fa:	4c03      	ldr	r4, [pc, #12]	; (a908 <sys_clock_set_timeout+0x58>)
    a8fc:	e7e3      	b.n	a8c6 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    a8fe:	2401      	movs	r4, #1
    a900:	e7e1      	b.n	a8c6 <sys_clock_set_timeout+0x16>
    a902:	bf00      	nop
    a904:	007ffffe 	.word	0x007ffffe
    a908:	007fffff 	.word	0x007fffff
    a90c:	200080e8 	.word	0x200080e8
    a910:	0000a569 	.word	0x0000a569

0000a914 <sys_clock_elapsed>:
{
    a914:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    a916:	f7ff fe71 	bl	a5fc <z_nrf_rtc_timer_read>
    a91a:	4b02      	ldr	r3, [pc, #8]	; (a924 <sys_clock_elapsed+0x10>)
    a91c:	681b      	ldr	r3, [r3, #0]
}
    a91e:	1ac0      	subs	r0, r0, r3
    a920:	bd08      	pop	{r3, pc}
    a922:	bf00      	nop
    a924:	200080e8 	.word	0x200080e8

0000a928 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
    a928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a92c:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
    a92e:	4b15      	ldr	r3, [pc, #84]	; (a984 <tfm_ns_interface_dispatch+0x5c>)
    a930:	4604      	mov	r4, r0
    a932:	f893 8000 	ldrb.w	r8, [r3]
    a936:	460d      	mov	r5, r1
    a938:	4616      	mov	r6, r2
    a93a:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
    a93c:	f1b8 0f00 	cmp.w	r8, #0
    a940:	d115      	bne.n	a96e <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
    a942:	4668      	mov	r0, sp
    a944:	f001 fe5f 	bl	c606 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
    a948:	463a      	mov	r2, r7
    a94a:	4631      	mov	r1, r6
    a94c:	4628      	mov	r0, r5
    a94e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    a950:	47a0      	blx	r4
    a952:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
    a954:	4668      	mov	r0, sp
    a956:	f001 fe57 	bl	c608 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
    a95a:	f1b8 0f00 	cmp.w	r8, #0
    a95e:	d002      	beq.n	a966 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    a960:	4809      	ldr	r0, [pc, #36]	; (a988 <tfm_ns_interface_dispatch+0x60>)
    a962:	f000 ff99 	bl	b898 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
    a966:	4620      	mov	r0, r4
    a968:	b022      	add	sp, #136	; 0x88
    a96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
    a96e:	f04f 32ff 	mov.w	r2, #4294967295
    a972:	f04f 33ff 	mov.w	r3, #4294967295
    a976:	4804      	ldr	r0, [pc, #16]	; (a988 <tfm_ns_interface_dispatch+0x60>)
    a978:	f000 ff14 	bl	b7a4 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
    a97c:	2800      	cmp	r0, #0
    a97e:	d0e0      	beq.n	a942 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
    a980:	241f      	movs	r4, #31
    a982:	e7f0      	b.n	a966 <tfm_ns_interface_dispatch+0x3e>
    a984:	20008381 	.word	0x20008381
    a988:	200080c0 	.word	0x200080c0

0000a98c <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
    a98c:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
    a98e:	2630      	movs	r6, #48	; 0x30
{
    a990:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
    a992:	ab06      	add	r3, sp, #24
{
    a994:	4605      	mov	r5, r0
    a996:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
    a998:	4632      	mov	r2, r6
    a99a:	2100      	movs	r1, #0
    a99c:	4618      	mov	r0, r3
    a99e:	f001 fe75 	bl	c68c <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
    a9a2:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
    a9a6:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
    a9aa:	b154      	cbz	r4, a9c2 <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
    a9ac:	2301      	movs	r3, #1
    a9ae:	aa04      	add	r2, sp, #16
    a9b0:	9200      	str	r2, [sp, #0]
    a9b2:	2100      	movs	r1, #0
    a9b4:	4804      	ldr	r0, [pc, #16]	; (a9c8 <psa_generate_random+0x3c>)
    a9b6:	9301      	str	r3, [sp, #4]
    a9b8:	aa02      	add	r2, sp, #8
    a9ba:	f000 f807 	bl	a9cc <psa_call>
}
    a9be:	b012      	add	sp, #72	; 0x48
    a9c0:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
    a9c2:	4620      	mov	r0, r4
    a9c4:	e7fb      	b.n	a9be <psa_generate_random+0x32>
    a9c6:	bf00      	nop
    a9c8:	40000100 	.word	0x40000100

0000a9cc <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
    a9cc:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
    a9ce:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
    a9d2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
    a9d6:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
    a9d8:	d20d      	bcs.n	a9f6 <psa_call+0x2a>
        (type < INT16_MIN) ||
    a9da:	ea43 0504 	orr.w	r5, r3, r4
    a9de:	2dff      	cmp	r5, #255	; 0xff
    a9e0:	d809      	bhi.n	a9f6 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
    a9e2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
    a9e6:	4613      	mov	r3, r2
    a9e8:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
    a9ec:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
    a9ee:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
    a9f0:	4803      	ldr	r0, [pc, #12]	; (aa00 <psa_call+0x34>)
    a9f2:	f7ff bf99 	b.w	a928 <tfm_ns_interface_dispatch>
}
    a9f6:	f06f 0080 	mvn.w	r0, #128	; 0x80
    a9fa:	bc30      	pop	{r4, r5}
    a9fc:	4770      	bx	lr
    a9fe:	bf00      	nop
    aa00:	00007c11 	.word	0x00007c11

0000aa04 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    aa04:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    aa06:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    aa08:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    aa0a:	fab2 f382 	clz	r3, r2
    aa0e:	f1c3 031f 	rsb	r3, r3, #31
    aa12:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    aa14:	fa05 f403 	lsl.w	r4, r5, r3
    aa18:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    aa1c:	e8d0 6fef 	ldaex	r6, [r0]
    aa20:	4296      	cmp	r6, r2
    aa22:	d104      	bne.n	aa2e <nrfx_flag32_alloc+0x2a>
    aa24:	e8c0 4fec 	stlex	ip, r4, [r0]
    aa28:	f1bc 0f00 	cmp.w	ip, #0
    aa2c:	d1f6      	bne.n	aa1c <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    aa2e:	d1eb      	bne.n	aa08 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    aa30:	4801      	ldr	r0, [pc, #4]	; (aa38 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    aa32:	700b      	strb	r3, [r1, #0]
}
    aa34:	bd70      	pop	{r4, r5, r6, pc}
    aa36:	bf00      	nop
    aa38:	0bad0000 	.word	0x0bad0000

0000aa3c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    aa3c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    aa3e:	6803      	ldr	r3, [r0, #0]
    aa40:	40cb      	lsrs	r3, r1
    aa42:	07db      	lsls	r3, r3, #31
    aa44:	d410      	bmi.n	aa68 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    aa46:	2301      	movs	r3, #1
    aa48:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    aa4a:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    aa4c:	ea43 0102 	orr.w	r1, r3, r2
    aa50:	e8d0 4fef 	ldaex	r4, [r0]
    aa54:	4294      	cmp	r4, r2
    aa56:	d104      	bne.n	aa62 <nrfx_flag32_free+0x26>
    aa58:	e8c0 1fec 	stlex	ip, r1, [r0]
    aa5c:	f1bc 0f00 	cmp.w	ip, #0
    aa60:	d1f6      	bne.n	aa50 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    aa62:	d1f2      	bne.n	aa4a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    aa64:	4801      	ldr	r0, [pc, #4]	; (aa6c <nrfx_flag32_free+0x30>)
}
    aa66:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    aa68:	4801      	ldr	r0, [pc, #4]	; (aa70 <nrfx_flag32_free+0x34>)
    aa6a:	e7fc      	b.n	aa66 <nrfx_flag32_free+0x2a>
    aa6c:	0bad0000 	.word	0x0bad0000
    aa70:	0bad0004 	.word	0x0bad0004

0000aa74 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    aa74:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    aa76:	2803      	cmp	r0, #3
    aa78:	f200 80a0 	bhi.w	abbc <clock_stop+0x148>
    aa7c:	e8df f000 	tbb	[pc, r0]
    aa80:	32251802 	.word	0x32251802
    p_reg->INTENCLR = mask;
    aa84:	2202      	movs	r2, #2
    aa86:	4b59      	ldr	r3, [pc, #356]	; (abec <clock_stop+0x178>)
    aa88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aa8c:	2200      	movs	r2, #0
    aa8e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    aa92:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    aa96:	2201      	movs	r2, #1
    aa98:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    aa9a:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    aa9c:	2301      	movs	r3, #1
    aa9e:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    aaa2:	2803      	cmp	r0, #3
    aaa4:	f200 808a 	bhi.w	abbc <clock_stop+0x148>
    aaa8:	e8df f000 	tbb	[pc, r0]
    aaac:	94736529 	.word	0x94736529
    p_reg->INTENCLR = mask;
    aab0:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aab2:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    aab4:	4b4d      	ldr	r3, [pc, #308]	; (abec <clock_stop+0x178>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    aab6:	f10d 0407 	add.w	r4, sp, #7
    aaba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aabe:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    aac2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    aac6:	605a      	str	r2, [r3, #4]
    aac8:	e7e8      	b.n	aa9c <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    aaca:	f44f 7200 	mov.w	r2, #512	; 0x200
    aace:	4b47      	ldr	r3, [pc, #284]	; (abec <clock_stop+0x178>)
    aad0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aad4:	2200      	movs	r2, #0
    aad6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    aada:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    aade:	2201      	movs	r2, #1
    aae0:	625a      	str	r2, [r3, #36]	; 0x24
    aae2:	e7da      	b.n	aa9a <clock_stop+0x26>
    p_reg->INTENCLR = mask;
    aae4:	f44f 7280 	mov.w	r2, #256	; 0x100
    aae8:	4b40      	ldr	r3, [pc, #256]	; (abec <clock_stop+0x178>)
    aaea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aaee:	2200      	movs	r2, #0
    aaf0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    aaf4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    aaf8:	2201      	movs	r2, #1
    aafa:	61da      	str	r2, [r3, #28]
    aafc:	e7cd      	b.n	aa9a <clock_stop+0x26>
    switch (domain)
    aafe:	f242 7510 	movw	r5, #10000	; 0x2710
    ab02:	4e3a      	ldr	r6, [pc, #232]	; (abec <clock_stop+0x178>)
            if (p_clk_src != NULL)
    ab04:	b36c      	cbz	r4, ab62 <clock_stop+0xee>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ab06:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    ab0a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    ab0e:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ab10:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    ab14:	03d9      	lsls	r1, r3, #15
    ab16:	d551      	bpl.n	abbc <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    ab18:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ab1c:	2801      	cmp	r0, #1
    ab1e:	d14d      	bne.n	abbc <clock_stop+0x148>
    ab20:	f001 ff56 	bl	c9d0 <nrfx_busy_wait>
    ab24:	3d01      	subs	r5, #1
    ab26:	d1ed      	bne.n	ab04 <clock_stop+0x90>
    ab28:	e048      	b.n	abbc <clock_stop+0x148>
    ab2a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ab2e:	2801      	cmp	r0, #1
    ab30:	d144      	bne.n	abbc <clock_stop+0x148>
    ab32:	f001 ff4d 	bl	c9d0 <nrfx_busy_wait>
    ab36:	3d01      	subs	r5, #1
    ab38:	d14f      	bne.n	abda <clock_stop+0x166>
    ab3a:	e03f      	b.n	abbc <clock_stop+0x148>
    ab3c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ab40:	2801      	cmp	r0, #1
    ab42:	d13b      	bne.n	abbc <clock_stop+0x148>
    ab44:	f001 ff44 	bl	c9d0 <nrfx_busy_wait>
    ab48:	3d01      	subs	r5, #1
    ab4a:	d037      	beq.n	abbc <clock_stop+0x148>
            if (p_clk_src != NULL)
    ab4c:	b1bc      	cbz	r4, ab7e <clock_stop+0x10a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    ab4e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    ab52:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    ab56:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ab58:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    ab5c:	03db      	lsls	r3, r3, #15
    ab5e:	d52d      	bpl.n	abbc <clock_stop+0x148>
    ab60:	e7ec      	b.n	ab3c <clock_stop+0xc8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ab62:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    ab66:	03da      	lsls	r2, r3, #15
    ab68:	d528      	bpl.n	abbc <clock_stop+0x148>
    ab6a:	2001      	movs	r0, #1
    ab6c:	f001 ff30 	bl	c9d0 <nrfx_busy_wait>
    ab70:	3d01      	subs	r5, #1
    ab72:	d1f6      	bne.n	ab62 <clock_stop+0xee>
    ab74:	e022      	b.n	abbc <clock_stop+0x148>
    switch (domain)
    ab76:	f242 7510 	movw	r5, #10000	; 0x2710
    ab7a:	4e1c      	ldr	r6, [pc, #112]	; (abec <clock_stop+0x178>)
    ab7c:	e7e6      	b.n	ab4c <clock_stop+0xd8>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ab7e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    ab82:	03d8      	lsls	r0, r3, #15
    ab84:	d51a      	bpl.n	abbc <clock_stop+0x148>
    ab86:	2001      	movs	r0, #1
    ab88:	f001 ff22 	bl	c9d0 <nrfx_busy_wait>
    ab8c:	3d01      	subs	r5, #1
    ab8e:	d1f6      	bne.n	ab7e <clock_stop+0x10a>
    ab90:	e014      	b.n	abbc <clock_stop+0x148>
    switch (domain)
    ab92:	f242 7510 	movw	r5, #10000	; 0x2710
    ab96:	4e15      	ldr	r6, [pc, #84]	; (abec <clock_stop+0x178>)
            if (p_clk_src != NULL)
    ab98:	b194      	cbz	r4, abc0 <clock_stop+0x14c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    ab9a:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    ab9e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    aba2:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    aba4:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    aba8:	03d9      	lsls	r1, r3, #15
    abaa:	d507      	bpl.n	abbc <clock_stop+0x148>
    abac:	f89d 0007 	ldrb.w	r0, [sp, #7]
    abb0:	2801      	cmp	r0, #1
    abb2:	d103      	bne.n	abbc <clock_stop+0x148>
    abb4:	f001 ff0c 	bl	c9d0 <nrfx_busy_wait>
    abb8:	3d01      	subs	r5, #1
    abba:	d1ed      	bne.n	ab98 <clock_stop+0x124>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    abbc:	b002      	add	sp, #8
    abbe:	bd70      	pop	{r4, r5, r6, pc}
    abc0:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    abc4:	03da      	lsls	r2, r3, #15
    abc6:	d5f9      	bpl.n	abbc <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    abc8:	2001      	movs	r0, #1
    abca:	f001 ff01 	bl	c9d0 <nrfx_busy_wait>
    abce:	3d01      	subs	r5, #1
    abd0:	d1f6      	bne.n	abc0 <clock_stop+0x14c>
    abd2:	e7f3      	b.n	abbc <clock_stop+0x148>
    switch (domain)
    abd4:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    abd8:	4e04      	ldr	r6, [pc, #16]	; (abec <clock_stop+0x178>)
    abda:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    abde:	03db      	lsls	r3, r3, #15
    abe0:	d5ec      	bpl.n	abbc <clock_stop+0x148>
    abe2:	2c00      	cmp	r4, #0
    abe4:	d1a1      	bne.n	ab2a <clock_stop+0xb6>
    abe6:	2001      	movs	r0, #1
    abe8:	e7a3      	b.n	ab32 <clock_stop+0xbe>
    abea:	bf00      	nop
    abec:	40005000 	.word	0x40005000

0000abf0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    abf0:	4b04      	ldr	r3, [pc, #16]	; (ac04 <nrfx_clock_init+0x14>)
    abf2:	791a      	ldrb	r2, [r3, #4]
    abf4:	b922      	cbnz	r2, ac00 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    abf6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    abf8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    abfa:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    abfc:	4802      	ldr	r0, [pc, #8]	; (ac08 <nrfx_clock_init+0x18>)
    abfe:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    ac00:	4802      	ldr	r0, [pc, #8]	; (ac0c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    ac02:	4770      	bx	lr
    ac04:	20008340 	.word	0x20008340
    ac08:	0bad0000 	.word	0x0bad0000
    ac0c:	0bad000c 	.word	0x0bad000c

0000ac10 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    ac10:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    ac12:	2005      	movs	r0, #5
    ac14:	f7fe fae0 	bl	91d8 <arch_irq_is_enabled>
    ac18:	b910      	cbnz	r0, ac20 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    ac1a:	2005      	movs	r0, #5
    ac1c:	f7fe face 	bl	91bc <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    ac20:	2201      	movs	r2, #1
    ac22:	4b04      	ldr	r3, [pc, #16]	; (ac34 <nrfx_clock_enable+0x24>)
    ac24:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    ac28:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    ac2c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    ac30:	bd08      	pop	{r3, pc}
    ac32:	bf00      	nop
    ac34:	40005000 	.word	0x40005000

0000ac38 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    ac38:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    ac3a:	2803      	cmp	r0, #3
    ac3c:	d818      	bhi.n	ac70 <nrfx_clock_start+0x38>
    ac3e:	e8df f000 	tbb	[pc, r0]
    ac42:	3002      	.short	0x3002
    ac44:	483b      	.short	0x483b
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ac46:	4a29      	ldr	r2, [pc, #164]	; (acec <nrfx_clock_start+0xb4>)
    ac48:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ac4c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    ac50:	03c9      	lsls	r1, r1, #15
    ac52:	d40e      	bmi.n	ac72 <nrfx_clock_start+0x3a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    ac54:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    ac58:	07db      	lsls	r3, r3, #31
    ac5a:	d513      	bpl.n	ac84 <nrfx_clock_start+0x4c>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    ac5c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    ac60:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    ac64:	3b01      	subs	r3, #1
    ac66:	2b01      	cmp	r3, #1
    ac68:	d809      	bhi.n	ac7e <nrfx_clock_start+0x46>
    p_reg->INTENSET = mask;
    ac6a:	2302      	movs	r3, #2
    ac6c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    ac70:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ac72:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    ac76:	2b02      	cmp	r3, #2
    ac78:	d005      	beq.n	ac86 <nrfx_clock_start+0x4e>
    ac7a:	2b01      	cmp	r3, #1
    ac7c:	d002      	beq.n	ac84 <nrfx_clock_start+0x4c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ac7e:	2000      	movs	r0, #0
    ac80:	f7ff fef8 	bl	aa74 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    ac84:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    ac86:	4a19      	ldr	r2, [pc, #100]	; (acec <nrfx_clock_start+0xb4>)
    ac88:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ac8c:	2300      	movs	r3, #0
    ac8e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    ac92:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    ac96:	2302      	movs	r3, #2
    ac98:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ac9c:	2301      	movs	r3, #1
    ac9e:	6093      	str	r3, [r2, #8]
}
    aca0:	e7e6      	b.n	ac70 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aca2:	2200      	movs	r2, #0
    aca4:	4b11      	ldr	r3, [pc, #68]	; (acec <nrfx_clock_start+0xb4>)
    aca6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    acaa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    acae:	2201      	movs	r2, #1
    acb0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    acb4:	601a      	str	r2, [r3, #0]
}
    acb6:	e7db      	b.n	ac70 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    acb8:	2200      	movs	r2, #0
    acba:	4b0c      	ldr	r3, [pc, #48]	; (acec <nrfx_clock_start+0xb4>)
    acbc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    acc0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    acc4:	f44f 7200 	mov.w	r2, #512	; 0x200
    acc8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    accc:	2201      	movs	r2, #1
    acce:	621a      	str	r2, [r3, #32]
}
    acd0:	e7ce      	b.n	ac70 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    acd2:	2200      	movs	r2, #0
    acd4:	4b05      	ldr	r3, [pc, #20]	; (acec <nrfx_clock_start+0xb4>)
    acd6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    acda:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    acde:	f44f 7280 	mov.w	r2, #256	; 0x100
    ace2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ace6:	2201      	movs	r2, #1
    ace8:	619a      	str	r2, [r3, #24]
}
    acea:	e7c1      	b.n	ac70 <nrfx_clock_start+0x38>
    acec:	40005000 	.word	0x40005000

0000acf0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    acf0:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    acf2:	4b28      	ldr	r3, [pc, #160]	; (ad94 <nrfx_power_clock_irq_handler+0xa4>)
    acf4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    acf8:	b152      	cbz	r2, ad10 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    acfa:	2000      	movs	r0, #0
    acfc:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    ad00:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    ad04:	2201      	movs	r2, #1
    ad06:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    ad0a:	4b23      	ldr	r3, [pc, #140]	; (ad98 <nrfx_power_clock_irq_handler+0xa8>)
    ad0c:	681b      	ldr	r3, [r3, #0]
    ad0e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    ad10:	4b20      	ldr	r3, [pc, #128]	; (ad94 <nrfx_power_clock_irq_handler+0xa4>)
    ad12:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    ad16:	b18a      	cbz	r2, ad3c <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ad18:	2200      	movs	r2, #0
    ad1a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ad1e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ad22:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ad26:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    ad2a:	f002 0203 	and.w	r2, r2, #3
    ad2e:	2a01      	cmp	r2, #1
    ad30:	f04f 0102 	mov.w	r1, #2
    ad34:	d126      	bne.n	ad84 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
    ad36:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ad3a:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    ad3c:	4b15      	ldr	r3, [pc, #84]	; (ad94 <nrfx_power_clock_irq_handler+0xa4>)
    ad3e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    ad42:	b162      	cbz	r2, ad5e <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ad44:	2200      	movs	r2, #0
    ad46:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    ad4a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    ad4e:	f44f 7280 	mov.w	r2, #256	; 0x100
    ad52:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    ad56:	4b10      	ldr	r3, [pc, #64]	; (ad98 <nrfx_power_clock_irq_handler+0xa8>)
    ad58:	2004      	movs	r0, #4
    ad5a:	681b      	ldr	r3, [r3, #0]
    ad5c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    ad5e:	4b0d      	ldr	r3, [pc, #52]	; (ad94 <nrfx_power_clock_irq_handler+0xa4>)
    ad60:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    ad64:	b1aa      	cbz	r2, ad92 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ad66:	2200      	movs	r2, #0
    ad68:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    ad6c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    ad70:	f44f 7200 	mov.w	r2, #512	; 0x200
    ad74:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    ad78:	4b07      	ldr	r3, [pc, #28]	; (ad98 <nrfx_power_clock_irq_handler+0xa8>)
    ad7a:	2005      	movs	r0, #5
    }
#endif
}
    ad7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    ad80:	681b      	ldr	r3, [r3, #0]
    ad82:	4718      	bx	r3
    ad84:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    ad88:	4b03      	ldr	r3, [pc, #12]	; (ad98 <nrfx_power_clock_irq_handler+0xa8>)
    ad8a:	2001      	movs	r0, #1
    ad8c:	681b      	ldr	r3, [r3, #0]
    ad8e:	4798      	blx	r3
    ad90:	e7d4      	b.n	ad3c <nrfx_power_clock_irq_handler+0x4c>
}
    ad92:	bd10      	pop	{r4, pc}
    ad94:	40005000 	.word	0x40005000
    ad98:	20008340 	.word	0x20008340

0000ad9c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    ad9c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    ad9e:	4801      	ldr	r0, [pc, #4]	; (ada4 <nrfx_dppi_channel_alloc+0x8>)
    ada0:	f7ff be30 	b.w	aa04 <nrfx_flag32_alloc>
    ada4:	2000802c 	.word	0x2000802c

0000ada8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    ada8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    adaa:	f003 021f 	and.w	r2, r3, #31
    adae:	6002      	str	r2, [r0, #0]
}
    adb0:	4a03      	ldr	r2, [pc, #12]	; (adc0 <nrf_gpio_pin_port_decode+0x18>)
    adb2:	4804      	ldr	r0, [pc, #16]	; (adc4 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    adb4:	095b      	lsrs	r3, r3, #5
}
    adb6:	2b01      	cmp	r3, #1
    adb8:	bf18      	it	ne
    adba:	4610      	movne	r0, r2
    adbc:	4770      	bx	lr
    adbe:	bf00      	nop
    adc0:	40842500 	.word	0x40842500
    adc4:	40842800 	.word	0x40842800

0000adc8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    adc8:	4b03      	ldr	r3, [pc, #12]	; (add8 <pin_in_use_by_te+0x10>)
    adca:	3008      	adds	r0, #8
    adcc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    add0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    add4:	4770      	bx	lr
    add6:	bf00      	nop
    add8:	20008030 	.word	0x20008030

0000addc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    addc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    adde:	4c0d      	ldr	r4, [pc, #52]	; (ae14 <call_handler+0x38>)
    ade0:	f100 0308 	add.w	r3, r0, #8
    ade4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    ade8:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    adea:	05da      	lsls	r2, r3, #23
{
    adec:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    adee:	d507      	bpl.n	ae00 <call_handler+0x24>
    adf0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    adf4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    adf8:	6852      	ldr	r2, [r2, #4]
    adfa:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    adfe:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    ae00:	68a3      	ldr	r3, [r4, #8]
    ae02:	b12b      	cbz	r3, ae10 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    ae04:	4631      	mov	r1, r6
    ae06:	4628      	mov	r0, r5
    ae08:	68e2      	ldr	r2, [r4, #12]
    }
}
    ae0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    ae0e:	4718      	bx	r3
}
    ae10:	bd70      	pop	{r4, r5, r6, pc}
    ae12:	bf00      	nop
    ae14:	20008030 	.word	0x20008030

0000ae18 <release_handler>:
{
    ae18:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    ae1a:	4a12      	ldr	r2, [pc, #72]	; (ae64 <release_handler+0x4c>)
    ae1c:	3008      	adds	r0, #8
    ae1e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    ae22:	05d9      	lsls	r1, r3, #23
    ae24:	d51b      	bpl.n	ae5e <release_handler+0x46>
    ae26:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    ae2a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    ae2e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    ae32:	2000      	movs	r0, #0
    ae34:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    ae38:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    ae3c:	f413 7f80 	tst.w	r3, #256	; 0x100
    ae40:	d003      	beq.n	ae4a <release_handler+0x32>
    ae42:	f3c3 2343 	ubfx	r3, r3, #9, #4
    ae46:	4299      	cmp	r1, r3
    ae48:	d009      	beq.n	ae5e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    ae4a:	3001      	adds	r0, #1
    ae4c:	2830      	cmp	r0, #48	; 0x30
    ae4e:	d1f3      	bne.n	ae38 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    ae50:	2300      	movs	r3, #0
    ae52:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    ae56:	4804      	ldr	r0, [pc, #16]	; (ae68 <release_handler+0x50>)
}
    ae58:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    ae5a:	f7ff bdef 	b.w	aa3c <nrfx_flag32_free>
}
    ae5e:	bc10      	pop	{r4}
    ae60:	4770      	bx	lr
    ae62:	bf00      	nop
    ae64:	20008030 	.word	0x20008030
    ae68:	200080a4 	.word	0x200080a4

0000ae6c <pin_handler_trigger_uninit>:
{
    ae6c:	b538      	push	{r3, r4, r5, lr}
    ae6e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    ae70:	f7ff ffaa 	bl	adc8 <pin_in_use_by_te>
    ae74:	4c0b      	ldr	r4, [pc, #44]	; (aea4 <pin_handler_trigger_uninit+0x38>)
    ae76:	f102 0508 	add.w	r5, r2, #8
    ae7a:	b160      	cbz	r0, ae96 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    ae7c:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    ae7e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    ae82:	0b5b      	lsrs	r3, r3, #13
    ae84:	009b      	lsls	r3, r3, #2
    ae86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ae8a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    ae8e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
    ae92:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    ae96:	4610      	mov	r0, r2
    ae98:	f7ff ffbe 	bl	ae18 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    ae9c:	2300      	movs	r3, #0
    ae9e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    aea2:	bd38      	pop	{r3, r4, r5, pc}
    aea4:	20008030 	.word	0x20008030

0000aea8 <nrfx_gpiote_input_configure>:
{
    aea8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    aeac:	4604      	mov	r4, r0
    aeae:	4690      	mov	r8, r2
    aeb0:	461d      	mov	r5, r3
    if (p_input_config)
    aeb2:	b301      	cbz	r1, aef6 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    aeb4:	4e4f      	ldr	r6, [pc, #316]	; (aff4 <nrfx_gpiote_input_configure+0x14c>)
    aeb6:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    aeba:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    aebe:	079b      	lsls	r3, r3, #30
    aec0:	d502      	bpl.n	aec8 <nrfx_gpiote_input_configure+0x20>
    aec2:	f7ff ff81 	bl	adc8 <pin_in_use_by_te>
    aec6:	bb28      	cbnz	r0, af14 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    aec8:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    aeca:	4620      	mov	r0, r4
    aecc:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    aed0:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    aed4:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    aed8:	f10d 020f 	add.w	r2, sp, #15
    aedc:	460b      	mov	r3, r1
    aede:	f10d 010e 	add.w	r1, sp, #14
    aee2:	f001 fd79 	bl	c9d8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    aee6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    aeea:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    aeee:	f043 0301 	orr.w	r3, r3, #1
    aef2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
    aef6:	f1b8 0f00 	cmp.w	r8, #0
    aefa:	d02d      	beq.n	af58 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    aefc:	4e3d      	ldr	r6, [pc, #244]	; (aff4 <nrfx_gpiote_input_configure+0x14c>)
    aefe:	f104 0708 	add.w	r7, r4, #8
    af02:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    af06:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
    af0a:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    af0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
    af10:	d502      	bpl.n	af18 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
    af12:	b1cb      	cbz	r3, af48 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
    af14:	4838      	ldr	r0, [pc, #224]	; (aff8 <nrfx_gpiote_input_configure+0x150>)
    af16:	e021      	b.n	af5c <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    af18:	f021 0120 	bic.w	r1, r1, #32
    af1c:	04c9      	lsls	r1, r1, #19
    af1e:	0cc9      	lsrs	r1, r1, #19
    af20:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    af24:	b183      	cbz	r3, af48 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
    af26:	2803      	cmp	r0, #3
    af28:	d8f4      	bhi.n	af14 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
    af2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    af2e:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    af32:	4662      	mov	r2, ip
    af34:	0092      	lsls	r2, r2, #2
    af36:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    af3a:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
    af3e:	b980      	cbnz	r0, af62 <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
    af40:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    af44:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    af48:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    af4c:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    af50:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    af54:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    af58:	bb1d      	cbnz	r5, afa2 <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
    af5a:	4828      	ldr	r0, [pc, #160]	; (affc <nrfx_gpiote_input_configure+0x154>)
}
    af5c:	b004      	add	sp, #16
    af5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    af62:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    af66:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    af6a:	f023 0303 	bic.w	r3, r3, #3
    af6e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    af72:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    af76:	f041 0120 	orr.w	r1, r1, #32
    af7a:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
    af7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    af82:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    af86:	0223      	lsls	r3, r4, #8
    af88:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    af8c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    af90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    af94:	ea43 030e 	orr.w	r3, r3, lr
    af98:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    af9c:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    afa0:	e7d2      	b.n	af48 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
    afa2:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    afa4:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    afa8:	f7ff ff36 	bl	ae18 <release_handler>
    if (!handler)
    afac:	2e00      	cmp	r6, #0
    afae:	d0d4      	beq.n	af5a <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    afb0:	4d10      	ldr	r5, [pc, #64]	; (aff4 <nrfx_gpiote_input_configure+0x14c>)
    afb2:	e9d5 2300 	ldrd	r2, r3, [r5]
    afb6:	4296      	cmp	r6, r2
    afb8:	d101      	bne.n	afbe <nrfx_gpiote_input_configure+0x116>
    afba:	429f      	cmp	r7, r3
    afbc:	d018      	beq.n	aff0 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    afbe:	4810      	ldr	r0, [pc, #64]	; (b000 <nrfx_gpiote_input_configure+0x158>)
    afc0:	f10d 010f 	add.w	r1, sp, #15
    afc4:	f7ff fd1e 	bl	aa04 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    afc8:	4b0c      	ldr	r3, [pc, #48]	; (affc <nrfx_gpiote_input_configure+0x154>)
    afca:	4298      	cmp	r0, r3
    afcc:	d1c6      	bne.n	af5c <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
    afce:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    afd2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    afd6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    afd8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    afda:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    afde:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    afe2:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    afe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    afea:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    afee:	e7b4      	b.n	af5a <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    aff0:	2200      	movs	r2, #0
    aff2:	e7ee      	b.n	afd2 <nrfx_gpiote_input_configure+0x12a>
    aff4:	20008030 	.word	0x20008030
    aff8:	0bad0004 	.word	0x0bad0004
    affc:	0bad0000 	.word	0x0bad0000
    b000:	200080a4 	.word	0x200080a4

0000b004 <nrfx_gpiote_output_configure>:
{
    b004:	b5f0      	push	{r4, r5, r6, r7, lr}
    b006:	4604      	mov	r4, r0
    b008:	4615      	mov	r5, r2
    b00a:	b085      	sub	sp, #20
    if (p_config)
    b00c:	b319      	cbz	r1, b056 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b00e:	4e34      	ldr	r6, [pc, #208]	; (b0e0 <nrfx_gpiote_output_configure+0xdc>)
    b010:	f100 0708 	add.w	r7, r0, #8
    b014:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    b018:	0793      	lsls	r3, r2, #30
    b01a:	d403      	bmi.n	b024 <nrfx_gpiote_output_configure+0x20>
    b01c:	f7ff fed4 	bl	adc8 <pin_in_use_by_te>
    b020:	2800      	cmp	r0, #0
    b022:	d15a      	bne.n	b0da <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    b024:	f012 0f1c 	tst.w	r2, #28
    b028:	d002      	beq.n	b030 <nrfx_gpiote_output_configure+0x2c>
    b02a:	784b      	ldrb	r3, [r1, #1]
    b02c:	2b01      	cmp	r3, #1
    b02e:	d054      	beq.n	b0da <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    b030:	2301      	movs	r3, #1
    b032:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    b036:	2300      	movs	r3, #0
    b038:	1c4a      	adds	r2, r1, #1
    b03a:	e9cd 1300 	strd	r1, r3, [sp]
    b03e:	4620      	mov	r0, r4
    b040:	1c8b      	adds	r3, r1, #2
    b042:	f10d 010f 	add.w	r1, sp, #15
    b046:	f001 fcc7 	bl	c9d8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    b04a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    b04e:	f043 0303 	orr.w	r3, r3, #3
    b052:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    b056:	b915      	cbnz	r5, b05e <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    b058:	4822      	ldr	r0, [pc, #136]	; (b0e4 <nrfx_gpiote_output_configure+0xe0>)
}
    b05a:	b005      	add	sp, #20
    b05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b05e:	4e20      	ldr	r6, [pc, #128]	; (b0e0 <nrfx_gpiote_output_configure+0xdc>)
    b060:	f104 0708 	add.w	r7, r4, #8
    b064:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    b068:	0783      	lsls	r3, r0, #30
    b06a:	d536      	bpl.n	b0da <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    b06c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    b070:	2300      	movs	r3, #0
    b072:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    b074:	f020 0020 	bic.w	r0, r0, #32
    b078:	0089      	lsls	r1, r1, #2
    b07a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b07e:	04c0      	lsls	r0, r0, #19
    b080:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
    b084:	0cc0      	lsrs	r0, r0, #19
    b086:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    b08a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    b08e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    b092:	786a      	ldrb	r2, [r5, #1]
    b094:	2a00      	cmp	r2, #0
    b096:	d0df      	beq.n	b058 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    b098:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    b09c:	78ad      	ldrb	r5, [r5, #2]
    b09e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    b0a2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    b0a6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b0aa:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    b0ae:	0223      	lsls	r3, r4, #8
    b0b0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    b0b4:	0412      	lsls	r2, r2, #16
    b0b6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b0ba:	ea43 030e 	orr.w	r3, r3, lr
    b0be:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    b0c0:	052a      	lsls	r2, r5, #20
    b0c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    b0c6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b0ca:	4313      	orrs	r3, r2
    b0cc:	f040 0020 	orr.w	r0, r0, #32
    b0d0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    b0d4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    b0d8:	e7be      	b.n	b058 <nrfx_gpiote_output_configure+0x54>
{
    b0da:	4803      	ldr	r0, [pc, #12]	; (b0e8 <nrfx_gpiote_output_configure+0xe4>)
    b0dc:	e7bd      	b.n	b05a <nrfx_gpiote_output_configure+0x56>
    b0de:	bf00      	nop
    b0e0:	20008030 	.word	0x20008030
    b0e4:	0bad0000 	.word	0x0bad0000
    b0e8:	0bad0004 	.word	0x0bad0004

0000b0ec <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    b0ec:	4b01      	ldr	r3, [pc, #4]	; (b0f4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    b0ee:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    b0f2:	4770      	bx	lr
    b0f4:	20008030 	.word	0x20008030

0000b0f8 <nrfx_gpiote_channel_get>:
{
    b0f8:	b508      	push	{r3, lr}
    b0fa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    b0fc:	f7ff fe64 	bl	adc8 <pin_in_use_by_te>
    b100:	b138      	cbz	r0, b112 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b102:	4b05      	ldr	r3, [pc, #20]	; (b118 <nrfx_gpiote_channel_get+0x20>)
    b104:	3208      	adds	r2, #8
    b106:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    b10a:	4804      	ldr	r0, [pc, #16]	; (b11c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b10c:	0b5b      	lsrs	r3, r3, #13
    b10e:	700b      	strb	r3, [r1, #0]
}
    b110:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    b112:	4803      	ldr	r0, [pc, #12]	; (b120 <nrfx_gpiote_channel_get+0x28>)
    b114:	e7fc      	b.n	b110 <nrfx_gpiote_channel_get+0x18>
    b116:	bf00      	nop
    b118:	20008030 	.word	0x20008030
    b11c:	0bad0000 	.word	0x0bad0000
    b120:	0bad0004 	.word	0x0bad0004

0000b124 <nrfx_gpiote_init>:
{
    b124:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    b126:	4c0f      	ldr	r4, [pc, #60]	; (b164 <nrfx_gpiote_init+0x40>)
    b128:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    b12c:	b9bd      	cbnz	r5, b15e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    b12e:	2260      	movs	r2, #96	; 0x60
    b130:	4629      	mov	r1, r5
    b132:	f104 0010 	add.w	r0, r4, #16
    b136:	f001 faa9 	bl	c68c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    b13a:	202f      	movs	r0, #47	; 0x2f
    b13c:	f7fe f83e 	bl	91bc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b140:	4b09      	ldr	r3, [pc, #36]	; (b168 <nrfx_gpiote_init+0x44>)
    return err_code;
    b142:	480a      	ldr	r0, [pc, #40]	; (b16c <nrfx_gpiote_init+0x48>)
    b144:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    b148:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    b14c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b150:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    b154:	2301      	movs	r3, #1
    b156:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    b15a:	6763      	str	r3, [r4, #116]	; 0x74
}
    b15c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    b15e:	4804      	ldr	r0, [pc, #16]	; (b170 <nrfx_gpiote_init+0x4c>)
    b160:	e7fc      	b.n	b15c <nrfx_gpiote_init+0x38>
    b162:	bf00      	nop
    b164:	20008030 	.word	0x20008030
    b168:	4002f000 	.word	0x4002f000
    b16c:	0bad0000 	.word	0x0bad0000
    b170:	0bad0005 	.word	0x0bad0005

0000b174 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    b174:	4b03      	ldr	r3, [pc, #12]	; (b184 <nrfx_gpiote_is_init+0x10>)
    b176:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    b17a:	3800      	subs	r0, #0
    b17c:	bf18      	it	ne
    b17e:	2001      	movne	r0, #1
    b180:	4770      	bx	lr
    b182:	bf00      	nop
    b184:	20008030 	.word	0x20008030

0000b188 <nrfx_gpiote_channel_free>:
{
    b188:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    b18a:	4801      	ldr	r0, [pc, #4]	; (b190 <nrfx_gpiote_channel_free+0x8>)
    b18c:	f7ff bc56 	b.w	aa3c <nrfx_flag32_free>
    b190:	200080a0 	.word	0x200080a0

0000b194 <nrfx_gpiote_channel_alloc>:
{
    b194:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    b196:	4801      	ldr	r0, [pc, #4]	; (b19c <nrfx_gpiote_channel_alloc+0x8>)
    b198:	f7ff bc34 	b.w	aa04 <nrfx_flag32_alloc>
    b19c:	200080a0 	.word	0x200080a0

0000b1a0 <nrfx_gpiote_trigger_enable>:
{
    b1a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b1a2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b1a4:	f7ff fe10 	bl	adc8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b1a8:	4b1d      	ldr	r3, [pc, #116]	; (b220 <nrfx_gpiote_trigger_enable+0x80>)
    b1aa:	f104 0208 	add.w	r2, r4, #8
    b1ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b1b2:	b1d0      	cbz	r0, b1ea <nrfx_gpiote_trigger_enable+0x4a>
    b1b4:	f013 0502 	ands.w	r5, r3, #2
    b1b8:	d117      	bne.n	b1ea <nrfx_gpiote_trigger_enable+0x4a>
    return ((uint32_t)p_reg + event);
    b1ba:	481a      	ldr	r0, [pc, #104]	; (b224 <nrfx_gpiote_trigger_enable+0x84>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b1bc:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    b1be:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b1c0:	5085      	str	r5, [r0, r2]
    b1c2:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    b1c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    b1c8:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
    b1cc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    b1d0:	f040 0001 	orr.w	r0, r0, #1
    b1d4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    b1d8:	b129      	cbz	r1, b1e6 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    b1da:	2201      	movs	r2, #1
    b1dc:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    b1e0:	4a11      	ldr	r2, [pc, #68]	; (b228 <nrfx_gpiote_trigger_enable+0x88>)
    b1e2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    b1e6:	b003      	add	sp, #12
    b1e8:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b1ea:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    b1ee:	2b04      	cmp	r3, #4
    b1f0:	d011      	beq.n	b216 <nrfx_gpiote_trigger_enable+0x76>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    b1f2:	2b05      	cmp	r3, #5
    b1f4:	d011      	beq.n	b21a <nrfx_gpiote_trigger_enable+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b1f6:	a801      	add	r0, sp, #4
    b1f8:	9401      	str	r4, [sp, #4]
    b1fa:	f7ff fdd5 	bl	ada8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    b1fe:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    b200:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    b202:	40d9      	lsrs	r1, r3
    b204:	f001 0101 	and.w	r1, r1, #1
    b208:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    b20a:	4620      	mov	r0, r4
}
    b20c:	b003      	add	sp, #12
    b20e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    b212:	f001 bc2a 	b.w	ca6a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    b216:	2103      	movs	r1, #3
    b218:	e7f7      	b.n	b20a <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    b21a:	2102      	movs	r1, #2
    b21c:	e7f5      	b.n	b20a <nrfx_gpiote_trigger_enable+0x6a>
    b21e:	bf00      	nop
    b220:	20008030 	.word	0x20008030
    b224:	4002f100 	.word	0x4002f100
    b228:	4002f000 	.word	0x4002f000

0000b22c <nrfx_gpiote_trigger_disable>:
{
    b22c:	b508      	push	{r3, lr}
    b22e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b230:	f7ff fdca 	bl	adc8 <pin_in_use_by_te>
    b234:	b1c0      	cbz	r0, b268 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b236:	4b0f      	ldr	r3, [pc, #60]	; (b274 <nrfx_gpiote_trigger_disable+0x48>)
    b238:	f102 0108 	add.w	r1, r2, #8
    b23c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b240:	0799      	lsls	r1, r3, #30
    b242:	d411      	bmi.n	b268 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    b244:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b246:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    b248:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    b24a:	490b      	ldr	r1, [pc, #44]	; (b278 <nrfx_gpiote_trigger_disable+0x4c>)
    b24c:	009b      	lsls	r3, r3, #2
    b24e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b252:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    b256:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    b25a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    b25e:	f022 0203 	bic.w	r2, r2, #3
    b262:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    b266:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b268:	2100      	movs	r1, #0
}
    b26a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b26e:	4610      	mov	r0, r2
    b270:	f001 bbfb 	b.w	ca6a <nrf_gpio_cfg_sense_set>
    b274:	20008030 	.word	0x20008030
    b278:	4002f000 	.word	0x4002f000

0000b27c <nrfx_gpiote_pin_uninit>:
{
    b27c:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    b27e:	4b10      	ldr	r3, [pc, #64]	; (b2c0 <nrfx_gpiote_pin_uninit+0x44>)
    b280:	f100 0208 	add.w	r2, r0, #8
    b284:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    b288:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    b28a:	07db      	lsls	r3, r3, #31
    b28c:	d516      	bpl.n	b2bc <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    b28e:	f7ff ffcd 	bl	b22c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    b292:	4620      	mov	r0, r4
    b294:	f7ff fdea 	bl	ae6c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b298:	a801      	add	r0, sp, #4
    b29a:	9401      	str	r4, [sp, #4]
    b29c:	f7ff fd84 	bl	ada8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    b2a0:	9b01      	ldr	r3, [sp, #4]
    b2a2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    b2a6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    b2aa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    b2ae:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    b2b2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    b2b6:	4803      	ldr	r0, [pc, #12]	; (b2c4 <nrfx_gpiote_pin_uninit+0x48>)
}
    b2b8:	b002      	add	sp, #8
    b2ba:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    b2bc:	4802      	ldr	r0, [pc, #8]	; (b2c8 <nrfx_gpiote_pin_uninit+0x4c>)
    b2be:	e7fb      	b.n	b2b8 <nrfx_gpiote_pin_uninit+0x3c>
    b2c0:	20008030 	.word	0x20008030
    b2c4:	0bad0000 	.word	0x0bad0000
    b2c8:	0bad0004 	.word	0x0bad0004

0000b2cc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    b2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    b2d0:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    b2d2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b2d4:	4634      	mov	r4, r6
{
    b2d6:	4b63      	ldr	r3, [pc, #396]	; (b464 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    b2d8:	4863      	ldr	r0, [pc, #396]	; (b468 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b2da:	4964      	ldr	r1, [pc, #400]	; (b46c <nrfx_gpiote_irq_handler+0x1a0>)
{
    b2dc:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b2de:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    b2e0:	b135      	cbz	r5, b2f0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    b2e2:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    b2e6:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b2e8:	bf1e      	ittt	ne
    b2ea:	601c      	strne	r4, [r3, #0]
    b2ec:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    b2ee:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b2f0:	3304      	adds	r3, #4
    b2f2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    b2f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b2f8:	d1f1      	bne.n	b2de <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b2fa:	f8df a16c 	ldr.w	sl, [pc, #364]	; b468 <nrfx_gpiote_irq_handler+0x19c>
    b2fe:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    b302:	2b00      	cmp	r3, #0
    b304:	f000 8091 	beq.w	b42a <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    b308:	f8df 8164 	ldr.w	r8, [pc, #356]	; b470 <nrfx_gpiote_irq_handler+0x1a4>
    b30c:	f8d8 3020 	ldr.w	r3, [r8, #32]
    b310:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    b312:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    b316:	4b57      	ldr	r3, [pc, #348]	; (b474 <nrfx_gpiote_irq_handler+0x1a8>)
    b318:	6a1a      	ldr	r2, [r3, #32]
    b31a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    b31c:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    b31e:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
    b322:	f10d 0b10 	add.w	fp, sp, #16
    b326:	ea4f 1349 	mov.w	r3, r9, lsl #5
    b32a:	9300      	str	r3, [sp, #0]
    b32c:	e048      	b.n	b3c0 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
    b32e:	fa94 f4a4 	rbit	r4, r4
    b332:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    b336:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b338:	4a4f      	ldr	r2, [pc, #316]	; (b478 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
    b33a:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b33c:	f104 0308 	add.w	r3, r4, #8
    b340:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    b344:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    b346:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    b348:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    b34c:	fa03 f202 	lsl.w	r2, r3, r2
    b350:	f81b 3000 	ldrb.w	r3, [fp, r0]
    b354:	9403      	str	r4, [sp, #12]
    b356:	ea23 0302 	bic.w	r3, r3, r2
    b35a:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b35e:	a803      	add	r0, sp, #12
    b360:	f7ff fd22 	bl	ada8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    b364:	9b03      	ldr	r3, [sp, #12]
    b366:	08b9      	lsrs	r1, r7, #2
    b368:	3380      	adds	r3, #128	; 0x80
    b36a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    b36e:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    b372:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b374:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    b376:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    b37a:	d52b      	bpl.n	b3d4 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
    b37c:	4620      	mov	r0, r4
    b37e:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    b380:	b2dd      	uxtb	r5, r3
    b382:	f7ff fd2b 	bl	addc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b386:	a803      	add	r0, sp, #12
    b388:	9403      	str	r4, [sp, #12]
    b38a:	f7ff fd0d 	bl	ada8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    b38e:	9b03      	ldr	r3, [sp, #12]
    b390:	3380      	adds	r3, #128	; 0x80
    b392:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    b396:	f3c3 4301 	ubfx	r3, r3, #16, #2
    b39a:	429d      	cmp	r5, r3
    b39c:	d107      	bne.n	b3ae <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b39e:	2100      	movs	r1, #0
    b3a0:	4620      	mov	r0, r4
    b3a2:	f001 fb62 	bl	ca6a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    b3a6:	4629      	mov	r1, r5
    b3a8:	4620      	mov	r0, r4
    b3aa:	f001 fb5e 	bl	ca6a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b3ae:	a803      	add	r0, sp, #12
    b3b0:	9403      	str	r4, [sp, #12]
    b3b2:	f7ff fcf9 	bl	ada8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    b3b6:	2201      	movs	r2, #1
    b3b8:	9b03      	ldr	r3, [sp, #12]
    b3ba:	fa02 f303 	lsl.w	r3, r2, r3
    b3be:	6203      	str	r3, [r0, #32]
            while (latch[i])
    b3c0:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
    b3c4:	2c00      	cmp	r4, #0
    b3c6:	d1b2      	bne.n	b32e <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    b3c8:	f1b9 0f00 	cmp.w	r9, #0
    b3cc:	d11d      	bne.n	b40a <nrfx_gpiote_irq_handler+0x13e>
    b3ce:	f04f 0901 	mov.w	r9, #1
    b3d2:	e7a8      	b.n	b326 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    b3d4:	2b02      	cmp	r3, #2
    b3d6:	d10c      	bne.n	b3f2 <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    b3d8:	2103      	movs	r1, #3
    b3da:	4620      	mov	r0, r4
    b3dc:	f001 fb45 	bl	ca6a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    b3e0:	f005 0305 	and.w	r3, r5, #5
    b3e4:	2b01      	cmp	r3, #1
    b3e6:	d1e2      	bne.n	b3ae <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
    b3e8:	4639      	mov	r1, r7
    b3ea:	4620      	mov	r0, r4
    b3ec:	f7ff fcf6 	bl	addc <call_handler>
    b3f0:	e7dd      	b.n	b3ae <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    b3f2:	2102      	movs	r1, #2
    b3f4:	4620      	mov	r0, r4
    b3f6:	9301      	str	r3, [sp, #4]
    b3f8:	f001 fb37 	bl	ca6a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    b3fc:	2d03      	cmp	r5, #3
    b3fe:	d0f3      	beq.n	b3e8 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    b400:	9b01      	ldr	r3, [sp, #4]
    b402:	2b03      	cmp	r3, #3
    b404:	d1d3      	bne.n	b3ae <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    b406:	2d02      	cmp	r5, #2
    b408:	e7ed      	b.n	b3e6 <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b40a:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
    b40e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    b412:	f8d8 3020 	ldr.w	r3, [r8, #32]
    b416:	4917      	ldr	r1, [pc, #92]	; (b474 <nrfx_gpiote_irq_handler+0x1a8>)
    b418:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    b41a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    b41e:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
    b420:	4313      	orrs	r3, r2
    b422:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    b424:	620a      	str	r2, [r1, #32]
    b426:	f47f af7a 	bne.w	b31e <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
    b42a:	2401      	movs	r4, #1
    while (mask)
    b42c:	b916      	cbnz	r6, b434 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    b42e:	b007      	add	sp, #28
    b430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    b434:	fa96 f3a6 	rbit	r3, r6
    b438:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    b43c:	fa04 f203 	lsl.w	r2, r4, r3
    b440:	009b      	lsls	r3, r3, #2
    b442:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b446:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    b44a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    b44e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    b452:	f3c0 2005 	ubfx	r0, r0, #8, #6
    b456:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    b45a:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    b45e:	f7ff fcbd 	bl	addc <call_handler>
    b462:	e7e3      	b.n	b42c <nrfx_gpiote_irq_handler+0x160>
    b464:	4002f100 	.word	0x4002f100
    b468:	4002f000 	.word	0x4002f000
    b46c:	4002f120 	.word	0x4002f120
    b470:	40842500 	.word	0x40842500
    b474:	40842800 	.word	0x40842800
    b478:	20008030 	.word	0x20008030

0000b47c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    b47c:	4b10      	ldr	r3, [pc, #64]	; (b4c0 <z_sys_init_run_level+0x44>)
{
    b47e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    b480:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    b484:	3001      	adds	r0, #1
    b486:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    b48a:	42a6      	cmp	r6, r4
    b48c:	d800      	bhi.n	b490 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    b48e:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    b490:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    b494:	b18d      	cbz	r5, b4ba <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    b496:	4628      	mov	r0, r5
    b498:	4798      	blx	r3
			if (rc != 0) {
    b49a:	b138      	cbz	r0, b4ac <z_sys_init_run_level+0x30>
				if (rc < 0) {
    b49c:	2800      	cmp	r0, #0
    b49e:	bfb8      	it	lt
    b4a0:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    b4a2:	28ff      	cmp	r0, #255	; 0xff
    b4a4:	bfa8      	it	ge
    b4a6:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    b4a8:	68eb      	ldr	r3, [r5, #12]
    b4aa:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    b4ac:	68ea      	ldr	r2, [r5, #12]
    b4ae:	7853      	ldrb	r3, [r2, #1]
    b4b0:	f043 0301 	orr.w	r3, r3, #1
    b4b4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    b4b6:	3408      	adds	r4, #8
    b4b8:	e7e7      	b.n	b48a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    b4ba:	4798      	blx	r3
    b4bc:	e7fb      	b.n	b4b6 <z_sys_init_run_level+0x3a>
    b4be:	bf00      	nop
    b4c0:	0000d13c 	.word	0x0000d13c

0000b4c4 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    b4c4:	2201      	movs	r2, #1
{
    b4c6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    b4c8:	4b09      	ldr	r3, [pc, #36]	; (b4f0 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    b4ca:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    b4cc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    b4ce:	f7ff ffd5 	bl	b47c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    b4d2:	f000 ff01 	bl	c2d8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    b4d6:	2004      	movs	r0, #4
    b4d8:	f7ff ffd0 	bl	b47c <z_sys_init_run_level>

	z_init_static_threads();
    b4dc:	f000 f8ea 	bl	b6b4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    b4e0:	f7fc ffa0 	bl	8424 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    b4e4:	4a03      	ldr	r2, [pc, #12]	; (b4f4 <bg_thread_main+0x30>)
    b4e6:	7b13      	ldrb	r3, [r2, #12]
    b4e8:	f023 0301 	bic.w	r3, r3, #1
    b4ec:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    b4ee:	bd08      	pop	{r3, pc}
    b4f0:	20008381 	.word	0x20008381
    b4f4:	20008178 	.word	0x20008178

0000b4f8 <z_bss_zero>:
{
    b4f8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    b4fa:	4803      	ldr	r0, [pc, #12]	; (b508 <z_bss_zero+0x10>)
    b4fc:	4a03      	ldr	r2, [pc, #12]	; (b50c <z_bss_zero+0x14>)
    b4fe:	2100      	movs	r1, #0
    b500:	1a12      	subs	r2, r2, r0
    b502:	f001 fae8 	bl	cad6 <z_early_memset>
}
    b506:	bd08      	pop	{r3, pc}
    b508:	200080d8 	.word	0x200080d8
    b50c:	20008384 	.word	0x20008384

0000b510 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    b510:	2300      	movs	r3, #0
    b512:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    b514:	b570      	push	{r4, r5, r6, lr}
    b516:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    b518:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b51c:	220f      	movs	r2, #15
    b51e:	9301      	str	r3, [sp, #4]
    b520:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    b524:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    b526:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    b52a:	4d0e      	ldr	r5, [pc, #56]	; (b564 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    b52c:	4e0e      	ldr	r6, [pc, #56]	; (b568 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    b52e:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    b532:	490e      	ldr	r1, [pc, #56]	; (b56c <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    b534:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    b538:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    b53a:	fb02 1100 	mla	r1, r2, r0, r1
    b53e:	4b0c      	ldr	r3, [pc, #48]	; (b570 <z_init_cpu+0x60>)
    b540:	4630      	mov	r0, r6
    b542:	9500      	str	r5, [sp, #0]
    b544:	f000 f886 	bl	b654 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b548:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    b54a:	742c      	strb	r4, [r5, #16]
    b54c:	f023 0304 	bic.w	r3, r3, #4
    b550:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    b552:	4b08      	ldr	r3, [pc, #32]	; (b574 <z_init_cpu+0x64>)
    b554:	3401      	adds	r4, #1
    b556:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    b55a:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    b55c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    b55e:	b006      	add	sp, #24
    b560:	bd70      	pop	{r4, r5, r6, pc}
    b562:	bf00      	nop
    b564:	20008348 	.word	0x20008348
    b568:	200080f8 	.word	0x200080f8
    b56c:	20008b88 	.word	0x20008b88
    b570:	0000b76d 	.word	0x0000b76d
    b574:	20008388 	.word	0x20008388

0000b578 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    b578:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    b57a:	2000      	movs	r0, #0
{
    b57c:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    b57e:	f7ff ff7d 	bl	b47c <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    b582:	4b2d      	ldr	r3, [pc, #180]	; (b638 <z_cstart+0xc0>)
	uint32_t msp =
    b584:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    b588:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    b58c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b590:	2400      	movs	r4, #0
    b592:	23e0      	movs	r3, #224	; 0xe0
    b594:	4d29      	ldr	r5, [pc, #164]	; (b63c <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    b596:	4e2a      	ldr	r6, [pc, #168]	; (b640 <z_cstart+0xc8>)
    b598:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    b59c:	77ec      	strb	r4, [r5, #31]
    b59e:	762c      	strb	r4, [r5, #24]
    b5a0:	766c      	strb	r4, [r5, #25]
    b5a2:	76ac      	strb	r4, [r5, #26]
    b5a4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    b5a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b5aa:	4f26      	ldr	r7, [pc, #152]	; (b644 <z_cstart+0xcc>)
    b5ac:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    b5b0:	626b      	str	r3, [r5, #36]	; 0x24
    b5b2:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    b5b6:	f7fe f83f 	bl	9638 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    b5ba:	f7fd fdd3 	bl	9164 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    b5be:	f04f 33ff 	mov.w	r3, #4294967295
    b5c2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    b5c4:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    b5c6:	f7fe fa41 	bl	9a4c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    b5ca:	f7fe f8e7 	bl	979c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    b5ce:	f240 1301 	movw	r3, #257	; 0x101
    b5d2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    b5d6:	ab06      	add	r3, sp, #24
    b5d8:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    b5da:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    b5de:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    b5e0:	f001 fa52 	bl	ca88 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    b5e4:	2001      	movs	r0, #1
    b5e6:	f7ff ff49 	bl	b47c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    b5ea:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    b5ec:	4d16      	ldr	r5, [pc, #88]	; (b648 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    b5ee:	f7ff ff45 	bl	b47c <z_sys_init_run_level>
	z_sched_init();
    b5f2:	f000 fc0d 	bl	be10 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b5f6:	4b15      	ldr	r3, [pc, #84]	; (b64c <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    b5f8:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b5fa:	9305      	str	r3, [sp, #20]
    b5fc:	2301      	movs	r3, #1
    b5fe:	4914      	ldr	r1, [pc, #80]	; (b650 <z_cstart+0xd8>)
    b600:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b604:	e9cd 4303 	strd	r4, r3, [sp, #12]
    b608:	4628      	mov	r0, r5
    b60a:	463b      	mov	r3, r7
    b60c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    b610:	9400      	str	r4, [sp, #0]
    b612:	f000 f81f 	bl	b654 <z_setup_new_thread>
    b616:	4606      	mov	r6, r0
    b618:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    b61a:	4628      	mov	r0, r5
    b61c:	f022 0204 	bic.w	r2, r2, #4
    b620:	736a      	strb	r2, [r5, #13]
    b622:	f001 faab 	bl	cb7c <z_ready_thread>
	z_init_cpu(0);
    b626:	4620      	mov	r0, r4
    b628:	f7ff ff72 	bl	b510 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    b62c:	463a      	mov	r2, r7
    b62e:	4631      	mov	r1, r6
    b630:	4628      	mov	r0, r5
    b632:	f7fd fe8d 	bl	9350 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    b636:	bf00      	nop
    b638:	20008388 	.word	0x20008388
    b63c:	e000ed00 	.word	0xe000ed00
    b640:	20008348 	.word	0x20008348
    b644:	0000b4c5 	.word	0x0000b4c5
    b648:	20008178 	.word	0x20008178
    b64c:	0000d2b7 	.word	0x0000d2b7
    b650:	20008cc8 	.word	0x20008cc8

0000b654 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    b654:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    b658:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    b65a:	f100 0558 	add.w	r5, r0, #88	; 0x58
    b65e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    b660:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    b662:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    b666:	2500      	movs	r5, #0
{
    b668:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    b66a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    b66c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    b66e:	e9c0 5506 	strd	r5, r5, [r0, #24]
    b672:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b674:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b678:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    b67c:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    b680:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    b682:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    b684:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b686:	9202      	str	r2, [sp, #8]
    b688:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    b68a:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b68e:	9201      	str	r2, [sp, #4]
    b690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b692:	9200      	str	r2, [sp, #0]
    b694:	4642      	mov	r2, r8
    b696:	f7fd fe3d 	bl	9314 <arch_new_thread>
	if (!_current) {
    b69a:	4b05      	ldr	r3, [pc, #20]	; (b6b0 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    b69c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    b69e:	689b      	ldr	r3, [r3, #8]
    b6a0:	b103      	cbz	r3, b6a4 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    b6a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    b6a4:	4640      	mov	r0, r8
    b6a6:	6723      	str	r3, [r4, #112]	; 0x70
    b6a8:	b004      	add	sp, #16
    b6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6ae:	bf00      	nop
    b6b0:	20008348 	.word	0x20008348

0000b6b4 <z_init_static_threads>:
{
    b6b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b6b8:	4c29      	ldr	r4, [pc, #164]	; (b760 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    b6ba:	4d2a      	ldr	r5, [pc, #168]	; (b764 <z_init_static_threads+0xb0>)
{
    b6bc:	b087      	sub	sp, #28
    b6be:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    b6c0:	42ae      	cmp	r6, r5
    b6c2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    b6c6:	d30f      	bcc.n	b6e8 <z_init_static_threads+0x34>
	k_sched_lock();
    b6c8:	f000 fb72 	bl	bdb0 <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b6cc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    b6d0:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    b6d4:	4c22      	ldr	r4, [pc, #136]	; (b760 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b6d6:	f8df 9090 	ldr.w	r9, [pc, #144]	; b768 <z_init_static_threads+0xb4>
    b6da:	42ac      	cmp	r4, r5
    b6dc:	d320      	bcc.n	b720 <z_init_static_threads+0x6c>
}
    b6de:	b007      	add	sp, #28
    b6e0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    b6e4:	f000 bb78 	b.w	bdd8 <k_sched_unlock>
		z_setup_new_thread(
    b6e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b6ec:	9305      	str	r3, [sp, #20]
    b6ee:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    b6f2:	9304      	str	r3, [sp, #16]
    b6f4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    b6f8:	9303      	str	r3, [sp, #12]
    b6fa:	f854 3c14 	ldr.w	r3, [r4, #-20]
    b6fe:	9302      	str	r3, [sp, #8]
    b700:	f854 3c18 	ldr.w	r3, [r4, #-24]
    b704:	9301      	str	r3, [sp, #4]
    b706:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    b70a:	9300      	str	r3, [sp, #0]
    b70c:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    b710:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    b714:	f7ff ff9e 	bl	b654 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    b718:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    b71c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    b71e:	e7ce      	b.n	b6be <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    b720:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b722:	1c5a      	adds	r2, r3, #1
    b724:	d00d      	beq.n	b742 <z_init_static_threads+0x8e>
    b726:	2100      	movs	r1, #0
    b728:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    b72a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b72e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b732:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    b736:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b73a:	d104      	bne.n	b746 <z_init_static_threads+0x92>
	z_sched_start(thread);
    b73c:	4640      	mov	r0, r8
    b73e:	f000 fae7 	bl	bd10 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    b742:	342c      	adds	r4, #44	; 0x2c
    b744:	e7c9      	b.n	b6da <z_init_static_threads+0x26>
    b746:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b74a:	2300      	movs	r3, #0
    b74c:	f7fc fd02 	bl	8154 <__aeabi_uldivmod>
    b750:	4602      	mov	r2, r0
    b752:	460b      	mov	r3, r1
    b754:	f108 0018 	add.w	r0, r8, #24
    b758:	4649      	mov	r1, r9
    b75a:	f000 fcc3 	bl	c0e4 <z_add_timeout>
    b75e:	e7f0      	b.n	b742 <z_init_static_threads+0x8e>
    b760:	0000cf9c 	.word	0x0000cf9c
    b764:	0000cf9c 	.word	0x0000cf9c
    b768:	0000cbe1 	.word	0x0000cbe1

0000b76c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    b76c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    b76e:	4c0b      	ldr	r4, [pc, #44]	; (b79c <idle+0x30>)
    b770:	4d0b      	ldr	r5, [pc, #44]	; (b7a0 <idle+0x34>)
	__asm__ volatile(
    b772:	f04f 0220 	mov.w	r2, #32
    b776:	f3ef 8311 	mrs	r3, BASEPRI
    b77a:	f382 8812 	msr	BASEPRI_MAX, r2
    b77e:	f3bf 8f6f 	isb	sy
    b782:	f001 fa79 	bl	cc78 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    b786:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    b788:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    b78a:	b913      	cbnz	r3, b792 <idle+0x26>
	arch_cpu_idle();
    b78c:	f7fd fcf0 	bl	9170 <arch_cpu_idle>
}
    b790:	e7ef      	b.n	b772 <idle+0x6>
    b792:	f7fd fc1f 	bl	8fd4 <pm_system_suspend>
    b796:	2800      	cmp	r0, #0
    b798:	d1eb      	bne.n	b772 <idle+0x6>
    b79a:	e7f7      	b.n	b78c <idle+0x20>
    b79c:	20008348 	.word	0x20008348
    b7a0:	20008381 	.word	0x20008381

0000b7a4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    b7a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b7a8:	4604      	mov	r4, r0
    b7aa:	4617      	mov	r7, r2
    b7ac:	461e      	mov	r6, r3
    b7ae:	f04f 0320 	mov.w	r3, #32
    b7b2:	f3ef 8811 	mrs	r8, BASEPRI
    b7b6:	f383 8812 	msr	BASEPRI_MAX, r3
    b7ba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    b7be:	68c3      	ldr	r3, [r0, #12]
    b7c0:	4a33      	ldr	r2, [pc, #204]	; (b890 <z_impl_k_mutex_lock+0xec>)
    b7c2:	b17b      	cbz	r3, b7e4 <z_impl_k_mutex_lock+0x40>
    b7c4:	6880      	ldr	r0, [r0, #8]
    b7c6:	6891      	ldr	r1, [r2, #8]
    b7c8:	4288      	cmp	r0, r1
    b7ca:	d019      	beq.n	b800 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    b7cc:	ea57 0306 	orrs.w	r3, r7, r6
    b7d0:	d118      	bne.n	b804 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    b7d2:	f388 8811 	msr	BASEPRI, r8
    b7d6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    b7da:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    b7de:	b002      	add	sp, #8
    b7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    b7e4:	6891      	ldr	r1, [r2, #8]
    b7e6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    b7ea:	3301      	adds	r3, #1
    b7ec:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    b7ee:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    b7f0:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    b7f2:	60a3      	str	r3, [r4, #8]
    b7f4:	f388 8811 	msr	BASEPRI, r8
    b7f8:	f3bf 8f6f 	isb	sy
		return 0;
    b7fc:	2000      	movs	r0, #0
    b7fe:	e7ee      	b.n	b7de <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    b800:	6921      	ldr	r1, [r4, #16]
    b802:	e7f2      	b.n	b7ea <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    b804:	f991 100e 	ldrsb.w	r1, [r1, #14]
    b808:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    b80c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    b810:	4299      	cmp	r1, r3
    b812:	bfa8      	it	ge
    b814:	4619      	movge	r1, r3
    b816:	4291      	cmp	r1, r2
    b818:	bfb8      	it	lt
    b81a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    b81c:	428b      	cmp	r3, r1
    b81e:	dd2e      	ble.n	b87e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    b820:	f001 f96a 	bl	caf8 <adjust_owner_prio.isra.0>
    b824:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    b826:	4622      	mov	r2, r4
    b828:	4641      	mov	r1, r8
    b82a:	e9cd 7600 	strd	r7, r6, [sp]
    b82e:	4819      	ldr	r0, [pc, #100]	; (b894 <z_impl_k_mutex_lock+0xf0>)
    b830:	f000 f9f8 	bl	bc24 <z_pend_curr>
	if (got_mutex == 0) {
    b834:	2800      	cmp	r0, #0
    b836:	d0e1      	beq.n	b7fc <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    b838:	f04f 0320 	mov.w	r3, #32
    b83c:	f3ef 8611 	mrs	r6, BASEPRI
    b840:	f383 8812 	msr	BASEPRI_MAX, r3
    b844:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    b848:	68a0      	ldr	r0, [r4, #8]
    b84a:	b1d0      	cbz	r0, b882 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    b84c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    b84e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b850:	429c      	cmp	r4, r3
    b852:	d00a      	beq.n	b86a <z_impl_k_mutex_lock+0xc6>
    b854:	b14b      	cbz	r3, b86a <z_impl_k_mutex_lock+0xc6>
    b856:	f993 300e 	ldrsb.w	r3, [r3, #14]
    b85a:	4299      	cmp	r1, r3
    b85c:	bfa8      	it	ge
    b85e:	4619      	movge	r1, r3
    b860:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    b864:	4299      	cmp	r1, r3
    b866:	bfb8      	it	lt
    b868:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    b86a:	f001 f945 	bl	caf8 <adjust_owner_prio.isra.0>
    b86e:	b140      	cbz	r0, b882 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    b870:	4631      	mov	r1, r6
    b872:	4808      	ldr	r0, [pc, #32]	; (b894 <z_impl_k_mutex_lock+0xf0>)
    b874:	f000 fa3a 	bl	bcec <z_reschedule>
	return -EAGAIN;
    b878:	f06f 000a 	mvn.w	r0, #10
    b87c:	e7af      	b.n	b7de <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    b87e:	2500      	movs	r5, #0
    b880:	e7d1      	b.n	b826 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    b882:	2d00      	cmp	r5, #0
    b884:	d1f4      	bne.n	b870 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    b886:	f386 8811 	msr	BASEPRI, r6
    b88a:	f3bf 8f6f 	isb	sy
    b88e:	e7f3      	b.n	b878 <z_impl_k_mutex_lock+0xd4>
    b890:	20008348 	.word	0x20008348
    b894:	20008382 	.word	0x20008382

0000b898 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    b898:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    b89a:	6883      	ldr	r3, [r0, #8]
{
    b89c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    b89e:	b36b      	cbz	r3, b8fc <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    b8a0:	4a19      	ldr	r2, [pc, #100]	; (b908 <z_impl_k_mutex_unlock+0x70>)
    b8a2:	6892      	ldr	r2, [r2, #8]
    b8a4:	4293      	cmp	r3, r2
    b8a6:	d12c      	bne.n	b902 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    b8a8:	68c3      	ldr	r3, [r0, #12]
    b8aa:	2b01      	cmp	r3, #1
    b8ac:	d903      	bls.n	b8b6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    b8ae:	3b01      	subs	r3, #1
    b8b0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    b8b2:	2000      	movs	r0, #0
}
    b8b4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    b8b6:	f04f 0320 	mov.w	r3, #32
    b8ba:	f3ef 8511 	mrs	r5, BASEPRI
    b8be:	f383 8812 	msr	BASEPRI_MAX, r3
    b8c2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    b8c6:	6901      	ldr	r1, [r0, #16]
    b8c8:	6880      	ldr	r0, [r0, #8]
    b8ca:	f001 f915 	bl	caf8 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    b8ce:	4620      	mov	r0, r4
    b8d0:	f001 f98a 	bl	cbe8 <z_unpend_first_thread>
	mutex->owner = new_owner;
    b8d4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    b8d6:	b158      	cbz	r0, b8f0 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    b8d8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    b8dc:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    b8de:	2200      	movs	r2, #0
    b8e0:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    b8e2:	f001 f94b 	bl	cb7c <z_ready_thread>
		z_reschedule(&lock, key);
    b8e6:	4629      	mov	r1, r5
    b8e8:	4808      	ldr	r0, [pc, #32]	; (b90c <z_impl_k_mutex_unlock+0x74>)
    b8ea:	f000 f9ff 	bl	bcec <z_reschedule>
    b8ee:	e7e0      	b.n	b8b2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    b8f0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    b8f2:	f385 8811 	msr	BASEPRI, r5
    b8f6:	f3bf 8f6f 	isb	sy
    b8fa:	e7da      	b.n	b8b2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    b8fc:	f06f 0015 	mvn.w	r0, #21
    b900:	e7d8      	b.n	b8b4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    b902:	f04f 30ff 	mov.w	r0, #4294967295
    b906:	e7d5      	b.n	b8b4 <z_impl_k_mutex_unlock+0x1c>
    b908:	20008348 	.word	0x20008348
    b90c:	20008382 	.word	0x20008382

0000b910 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    b910:	b538      	push	{r3, r4, r5, lr}
    b912:	4604      	mov	r4, r0
	__asm__ volatile(
    b914:	f04f 0320 	mov.w	r3, #32
    b918:	f3ef 8511 	mrs	r5, BASEPRI
    b91c:	f383 8812 	msr	BASEPRI_MAX, r3
    b920:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    b924:	f001 f960 	bl	cbe8 <z_unpend_first_thread>

	if (thread != NULL) {
    b928:	b148      	cbz	r0, b93e <z_impl_k_sem_give+0x2e>
    b92a:	2200      	movs	r2, #0
    b92c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    b92e:	f001 f925 	bl	cb7c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    b932:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    b934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    b938:	4804      	ldr	r0, [pc, #16]	; (b94c <z_impl_k_sem_give+0x3c>)
    b93a:	f000 b9d7 	b.w	bcec <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b93e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    b942:	429a      	cmp	r2, r3
    b944:	bf18      	it	ne
    b946:	3301      	addne	r3, #1
    b948:	60a3      	str	r3, [r4, #8]
}
    b94a:	e7f2      	b.n	b932 <z_impl_k_sem_give+0x22>
    b94c:	20008382 	.word	0x20008382

0000b950 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    b950:	b513      	push	{r0, r1, r4, lr}
    b952:	f04f 0420 	mov.w	r4, #32
    b956:	f3ef 8111 	mrs	r1, BASEPRI
    b95a:	f384 8812 	msr	BASEPRI_MAX, r4
    b95e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    b962:	6884      	ldr	r4, [r0, #8]
    b964:	b144      	cbz	r4, b978 <z_impl_k_sem_take+0x28>
		sem->count--;
    b966:	3c01      	subs	r4, #1
    b968:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    b96a:	f381 8811 	msr	BASEPRI, r1
    b96e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    b972:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    b974:	b002      	add	sp, #8
    b976:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b978:	ea52 0403 	orrs.w	r4, r2, r3
    b97c:	d106      	bne.n	b98c <z_impl_k_sem_take+0x3c>
    b97e:	f381 8811 	msr	BASEPRI, r1
    b982:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    b986:	f06f 000f 	mvn.w	r0, #15
    b98a:	e7f3      	b.n	b974 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    b98c:	e9cd 2300 	strd	r2, r3, [sp]
    b990:	4602      	mov	r2, r0
    b992:	4802      	ldr	r0, [pc, #8]	; (b99c <z_impl_k_sem_take+0x4c>)
    b994:	f000 f946 	bl	bc24 <z_pend_curr>
	return ret;
    b998:	e7ec      	b.n	b974 <z_impl_k_sem_take+0x24>
    b99a:	bf00      	nop
    b99c:	20008382 	.word	0x20008382

0000b9a0 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    b9a0:	89c3      	ldrh	r3, [r0, #14]
    b9a2:	2b7f      	cmp	r3, #127	; 0x7f
    b9a4:	d812      	bhi.n	b9cc <sliceable+0x2c>
	int ret = slice_ticks;
    b9a6:	4b0a      	ldr	r3, [pc, #40]	; (b9d0 <sliceable+0x30>)
    b9a8:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    b9aa:	b163      	cbz	r3, b9c6 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    b9ac:	4b09      	ldr	r3, [pc, #36]	; (b9d4 <sliceable+0x34>)
    b9ae:	f990 200e 	ldrsb.w	r2, [r0, #14]
    b9b2:	681b      	ldr	r3, [r3, #0]
    b9b4:	429a      	cmp	r2, r3
    b9b6:	db09      	blt.n	b9cc <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    b9b8:	7b43      	ldrb	r3, [r0, #13]
    b9ba:	06db      	lsls	r3, r3, #27
    b9bc:	d106      	bne.n	b9cc <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    b9be:	4b06      	ldr	r3, [pc, #24]	; (b9d8 <sliceable+0x38>)
    b9c0:	1ac3      	subs	r3, r0, r3
    b9c2:	bf18      	it	ne
    b9c4:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    b9c6:	f003 0001 	and.w	r0, r3, #1
    b9ca:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    b9cc:	2300      	movs	r3, #0
    b9ce:	e7fa      	b.n	b9c6 <sliceable+0x26>
    b9d0:	20008374 	.word	0x20008374
    b9d4:	20008370 	.word	0x20008370
    b9d8:	200080f8 	.word	0x200080f8

0000b9dc <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
    b9dc:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    b9de:	4b04      	ldr	r3, [pc, #16]	; (b9f0 <slice_timeout+0x14>)
    b9e0:	1ac0      	subs	r0, r0, r3
    b9e2:	4b04      	ldr	r3, [pc, #16]	; (b9f4 <slice_timeout+0x18>)
    b9e4:	10c0      	asrs	r0, r0, #3
    b9e6:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
    b9e8:	4b03      	ldr	r3, [pc, #12]	; (b9f8 <slice_timeout+0x1c>)
    b9ea:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    b9ec:	4770      	bx	lr
    b9ee:	bf00      	nop
    b9f0:	200081f8 	.word	0x200081f8
    b9f4:	aaaaaaab 	.word	0xaaaaaaab
    b9f8:	20008382 	.word	0x20008382

0000b9fc <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    b9fc:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    b9fe:	4b0e      	ldr	r3, [pc, #56]	; (ba38 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    ba00:	4c0e      	ldr	r4, [pc, #56]	; (ba3c <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    ba02:	7c1e      	ldrb	r6, [r3, #16]
{
    ba04:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    ba06:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    ba0a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    ba0e:	4620      	mov	r0, r4
    ba10:	f001 f91c 	bl	cc4c <z_abort_timeout>
	slice_expired[cpu] = false;
    ba14:	2200      	movs	r2, #0
    ba16:	4b0a      	ldr	r3, [pc, #40]	; (ba40 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
    ba18:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    ba1a:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    ba1c:	f7ff ffc0 	bl	b9a0 <sliceable>
    ba20:	b148      	cbz	r0, ba36 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    ba22:	4b08      	ldr	r3, [pc, #32]	; (ba44 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    ba24:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
    ba26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
    ba2a:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    ba2c:	4906      	ldr	r1, [pc, #24]	; (ba48 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    ba2e:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    ba30:	17d3      	asrs	r3, r2, #31
    ba32:	f000 bb57 	b.w	c0e4 <z_add_timeout>
}
    ba36:	bd70      	pop	{r4, r5, r6, pc}
    ba38:	20008348 	.word	0x20008348
    ba3c:	200081f8 	.word	0x200081f8
    ba40:	20008382 	.word	0x20008382
    ba44:	20008374 	.word	0x20008374
    ba48:	0000b9dd 	.word	0x0000b9dd

0000ba4c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    ba4c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    ba4e:	4d0d      	ldr	r5, [pc, #52]	; (ba84 <update_cache+0x38>)
    ba50:	462b      	mov	r3, r5
    ba52:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba56:	429c      	cmp	r4, r3
    ba58:	d000      	beq.n	ba5c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    ba5a:	b904      	cbnz	r4, ba5e <update_cache+0x12>
    ba5c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    ba5e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    ba60:	b938      	cbnz	r0, ba72 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    ba62:	7b5a      	ldrb	r2, [r3, #13]
    ba64:	06d2      	lsls	r2, r2, #27
    ba66:	d104      	bne.n	ba72 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    ba68:	69a2      	ldr	r2, [r4, #24]
    ba6a:	b912      	cbnz	r2, ba72 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    ba6c:	89da      	ldrh	r2, [r3, #14]
    ba6e:	2a7f      	cmp	r2, #127	; 0x7f
    ba70:	d805      	bhi.n	ba7e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    ba72:	429c      	cmp	r4, r3
    ba74:	d002      	beq.n	ba7c <update_cache+0x30>
			z_reset_time_slice(thread);
    ba76:	4620      	mov	r0, r4
    ba78:	f7ff ffc0 	bl	b9fc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    ba7c:	4623      	mov	r3, r4
    ba7e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    ba80:	bd38      	pop	{r3, r4, r5, pc}
    ba82:	bf00      	nop
    ba84:	20008348 	.word	0x20008348

0000ba88 <move_thread_to_end_of_prio_q>:
{
    ba88:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    ba8a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    ba8e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    ba90:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    ba92:	7b43      	ldrb	r3, [r0, #13]
    ba94:	da04      	bge.n	baa0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ba96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ba9a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    ba9c:	f001 f834 	bl	cb08 <sys_dlist_remove>
	return list->head == list;
    baa0:	4a15      	ldr	r2, [pc, #84]	; (baf8 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    baa2:	7b4b      	ldrb	r3, [r1, #13]
    baa4:	4610      	mov	r0, r2
    baa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    baaa:	734b      	strb	r3, [r1, #13]
    baac:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    bab0:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bab2:	4283      	cmp	r3, r0
    bab4:	bf08      	it	eq
    bab6:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bab8:	b923      	cbnz	r3, bac4 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    baba:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    babe:	6021      	str	r1, [r4, #0]
	list->tail = node;
    bac0:	6211      	str	r1, [r2, #32]
}
    bac2:	e00c      	b.n	bade <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    bac4:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    bac8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    bacc:	42b5      	cmp	r5, r6
    bace:	d00e      	beq.n	baee <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bad0:	42ae      	cmp	r6, r5
    bad2:	dd0c      	ble.n	baee <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    bad4:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    bad6:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    bada:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    badc:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    bade:	6890      	ldr	r0, [r2, #8]
}
    bae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    bae4:	1a43      	subs	r3, r0, r1
    bae6:	4258      	negs	r0, r3
    bae8:	4158      	adcs	r0, r3
    baea:	f7ff bfaf 	b.w	ba4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    baee:	429c      	cmp	r4, r3
    baf0:	d0e3      	beq.n	baba <move_thread_to_end_of_prio_q+0x32>
    baf2:	681b      	ldr	r3, [r3, #0]
    baf4:	e7e0      	b.n	bab8 <move_thread_to_end_of_prio_q+0x30>
    baf6:	bf00      	nop
    baf8:	20008348 	.word	0x20008348

0000bafc <ready_thread>:
{
    bafc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    bafe:	f990 300d 	ldrsb.w	r3, [r0, #13]
    bb02:	7b42      	ldrb	r2, [r0, #13]
    bb04:	2b00      	cmp	r3, #0
    bb06:	db29      	blt.n	bb5c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    bb08:	06d3      	lsls	r3, r2, #27
    bb0a:	d127      	bne.n	bb5c <ready_thread+0x60>
	return node->next != NULL;
    bb0c:	6983      	ldr	r3, [r0, #24]
    bb0e:	bb2b      	cbnz	r3, bb5c <ready_thread+0x60>
	return list->head == list;
    bb10:	4913      	ldr	r1, [pc, #76]	; (bb60 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    bb12:	f062 027f 	orn	r2, r2, #127	; 0x7f
    bb16:	7342      	strb	r2, [r0, #13]
    bb18:	460a      	mov	r2, r1
    bb1a:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bb1e:	4294      	cmp	r4, r2
    bb20:	bf18      	it	ne
    bb22:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    bb24:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bb26:	b923      	cbnz	r3, bb32 <ready_thread+0x36>
	node->prev = tail;
    bb28:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    bb2c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    bb2e:	6208      	str	r0, [r1, #32]
}
    bb30:	e00c      	b.n	bb4c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    bb32:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    bb36:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    bb3a:	42b5      	cmp	r5, r6
    bb3c:	d00a      	beq.n	bb54 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bb3e:	42ae      	cmp	r6, r5
    bb40:	dd08      	ble.n	bb54 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    bb42:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    bb44:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    bb48:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    bb4a:	6058      	str	r0, [r3, #4]
		update_cache(0);
    bb4c:	2000      	movs	r0, #0
}
    bb4e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    bb50:	f7ff bf7c 	b.w	ba4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    bb54:	42a3      	cmp	r3, r4
    bb56:	d0e7      	beq.n	bb28 <ready_thread+0x2c>
    bb58:	681b      	ldr	r3, [r3, #0]
    bb5a:	e7e4      	b.n	bb26 <ready_thread+0x2a>
}
    bb5c:	bc70      	pop	{r4, r5, r6}
    bb5e:	4770      	bx	lr
    bb60:	20008348 	.word	0x20008348

0000bb64 <unready_thread>:
{
    bb64:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    bb66:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    bb6a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    bb6c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    bb6e:	7b43      	ldrb	r3, [r0, #13]
    bb70:	da04      	bge.n	bb7c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bb72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bb76:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bb78:	f000 ffc6 	bl	cb08 <sys_dlist_remove>
	update_cache(thread == _current);
    bb7c:	4b04      	ldr	r3, [pc, #16]	; (bb90 <unready_thread+0x2c>)
    bb7e:	6898      	ldr	r0, [r3, #8]
    bb80:	1a43      	subs	r3, r0, r1
    bb82:	4258      	negs	r0, r3
    bb84:	4158      	adcs	r0, r3
}
    bb86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    bb8a:	f7ff bf5f 	b.w	ba4c <update_cache>
    bb8e:	bf00      	nop
    bb90:	20008348 	.word	0x20008348

0000bb94 <pend_locked>:
{
    bb94:	b570      	push	{r4, r5, r6, lr}
    bb96:	4615      	mov	r5, r2
    bb98:	461c      	mov	r4, r3
    bb9a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    bb9c:	f000 ffc6 	bl	cb2c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bba0:	f1b4 3fff 	cmp.w	r4, #4294967295
    bba4:	bf08      	it	eq
    bba6:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    bbaa:	d008      	beq.n	bbbe <pend_locked+0x2a>
    bbac:	462a      	mov	r2, r5
    bbae:	4623      	mov	r3, r4
    bbb0:	f106 0018 	add.w	r0, r6, #24
    bbb4:	4902      	ldr	r1, [pc, #8]	; (bbc0 <pend_locked+0x2c>)
}
    bbb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bbba:	f000 ba93 	b.w	c0e4 <z_add_timeout>
    bbbe:	bd70      	pop	{r4, r5, r6, pc}
    bbc0:	0000cbe1 	.word	0x0000cbe1

0000bbc4 <z_time_slice>:
{
    bbc4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    bbc6:	f04f 0320 	mov.w	r3, #32
    bbca:	f3ef 8511 	mrs	r5, BASEPRI
    bbce:	f383 8812 	msr	BASEPRI_MAX, r3
    bbd2:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    bbd6:	4b10      	ldr	r3, [pc, #64]	; (bc18 <z_time_slice+0x54>)
	if (pending_current == curr) {
    bbd8:	4a10      	ldr	r2, [pc, #64]	; (bc1c <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    bbda:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    bbdc:	6810      	ldr	r0, [r2, #0]
    bbde:	42a0      	cmp	r0, r4
    bbe0:	d106      	bne.n	bbf0 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    bbe2:	f7ff ff0b 	bl	b9fc <z_reset_time_slice>
	__asm__ volatile(
    bbe6:	f385 8811 	msr	BASEPRI, r5
    bbea:	f3bf 8f6f 	isb	sy
}
    bbee:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    bbf0:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    bbf2:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    bbf4:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    bbf6:	4a0a      	ldr	r2, [pc, #40]	; (bc20 <z_time_slice+0x5c>)
    bbf8:	5cd3      	ldrb	r3, [r2, r3]
    bbfa:	2b00      	cmp	r3, #0
    bbfc:	d0f3      	beq.n	bbe6 <z_time_slice+0x22>
    bbfe:	4620      	mov	r0, r4
    bc00:	f7ff fece 	bl	b9a0 <sliceable>
    bc04:	2800      	cmp	r0, #0
    bc06:	d0ee      	beq.n	bbe6 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    bc08:	7b63      	ldrb	r3, [r4, #13]
    bc0a:	06db      	lsls	r3, r3, #27
    bc0c:	d102      	bne.n	bc14 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    bc0e:	4620      	mov	r0, r4
    bc10:	f7ff ff3a 	bl	ba88 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    bc14:	4620      	mov	r0, r4
    bc16:	e7e4      	b.n	bbe2 <z_time_slice+0x1e>
    bc18:	20008348 	.word	0x20008348
    bc1c:	2000836c 	.word	0x2000836c
    bc20:	20008382 	.word	0x20008382

0000bc24 <z_pend_curr>:
{
    bc24:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    bc26:	480c      	ldr	r0, [pc, #48]	; (bc58 <z_pend_curr+0x34>)
    bc28:	4d0c      	ldr	r5, [pc, #48]	; (bc5c <z_pend_curr+0x38>)
    bc2a:	6886      	ldr	r6, [r0, #8]
{
    bc2c:	460c      	mov	r4, r1
	pending_current = _current;
    bc2e:	602e      	str	r6, [r5, #0]
{
    bc30:	4611      	mov	r1, r2
    bc32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    bc36:	f04f 0620 	mov.w	r6, #32
    bc3a:	f3ef 8511 	mrs	r5, BASEPRI
    bc3e:	f386 8812 	msr	BASEPRI_MAX, r6
    bc42:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    bc46:	6880      	ldr	r0, [r0, #8]
    bc48:	f7ff ffa4 	bl	bb94 <pend_locked>
	ret = arch_swap(key);
    bc4c:	4620      	mov	r0, r4
}
    bc4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bc52:	f7fd bb05 	b.w	9260 <arch_swap>
    bc56:	bf00      	nop
    bc58:	20008348 	.word	0x20008348
    bc5c:	2000836c 	.word	0x2000836c

0000bc60 <z_set_prio>:
{
    bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc62:	4604      	mov	r4, r0
    bc64:	f04f 0320 	mov.w	r3, #32
    bc68:	f3ef 8611 	mrs	r6, BASEPRI
    bc6c:	f383 8812 	msr	BASEPRI_MAX, r3
    bc70:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    bc74:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    bc76:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    bc78:	06da      	lsls	r2, r3, #27
    bc7a:	d119      	bne.n	bcb0 <z_set_prio+0x50>
	return node->next != NULL;
    bc7c:	6985      	ldr	r5, [r0, #24]
    bc7e:	b9bd      	cbnz	r5, bcb0 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bc80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bc84:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bc86:	f000 ff3f 	bl	cb08 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    bc8a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    bc8c:	4a16      	ldr	r2, [pc, #88]	; (bce8 <z_set_prio+0x88>)
    bc8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bc92:	7343      	strb	r3, [r0, #13]
    bc94:	4613      	mov	r3, r2
				thread->base.prio = prio;
    bc96:	7381      	strb	r1, [r0, #14]
    bc98:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bc9c:	4298      	cmp	r0, r3
    bc9e:	bf18      	it	ne
    bca0:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    bca2:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bca4:	b95d      	cbnz	r5, bcbe <z_set_prio+0x5e>
	node->prev = tail;
    bca6:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    bcaa:	6004      	str	r4, [r0, #0]
	list->tail = node;
    bcac:	6214      	str	r4, [r2, #32]
}
    bcae:	e011      	b.n	bcd4 <z_set_prio+0x74>
    bcb0:	2000      	movs	r0, #0
			thread->base.prio = prio;
    bcb2:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    bcb4:	f386 8811 	msr	BASEPRI, r6
    bcb8:	f3bf 8f6f 	isb	sy
}
    bcbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    bcbe:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    bcc2:	42b9      	cmp	r1, r7
    bcc4:	d00b      	beq.n	bcde <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bcc6:	428f      	cmp	r7, r1
    bcc8:	dd09      	ble.n	bcde <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    bcca:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    bccc:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    bcd0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    bcd2:	606c      	str	r4, [r5, #4]
			update_cache(1);
    bcd4:	2001      	movs	r0, #1
    bcd6:	f7ff feb9 	bl	ba4c <update_cache>
    bcda:	2001      	movs	r0, #1
    bcdc:	e7ea      	b.n	bcb4 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    bcde:	42a8      	cmp	r0, r5
    bce0:	d0e1      	beq.n	bca6 <z_set_prio+0x46>
    bce2:	682d      	ldr	r5, [r5, #0]
    bce4:	e7de      	b.n	bca4 <z_set_prio+0x44>
    bce6:	bf00      	nop
    bce8:	20008348 	.word	0x20008348

0000bcec <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    bcec:	b949      	cbnz	r1, bd02 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bcee:	f3ef 8005 	mrs	r0, IPSR
    bcf2:	b930      	cbnz	r0, bd02 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    bcf4:	4b05      	ldr	r3, [pc, #20]	; (bd0c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    bcf6:	699a      	ldr	r2, [r3, #24]
    bcf8:	689b      	ldr	r3, [r3, #8]
    bcfa:	429a      	cmp	r2, r3
    bcfc:	d001      	beq.n	bd02 <z_reschedule+0x16>
    bcfe:	f7fd baaf 	b.w	9260 <arch_swap>
    bd02:	f381 8811 	msr	BASEPRI, r1
    bd06:	f3bf 8f6f 	isb	sy
}
    bd0a:	4770      	bx	lr
    bd0c:	20008348 	.word	0x20008348

0000bd10 <z_sched_start>:
{
    bd10:	b510      	push	{r4, lr}
	__asm__ volatile(
    bd12:	f04f 0220 	mov.w	r2, #32
    bd16:	f3ef 8411 	mrs	r4, BASEPRI
    bd1a:	f382 8812 	msr	BASEPRI_MAX, r2
    bd1e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    bd22:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    bd24:	0751      	lsls	r1, r2, #29
    bd26:	d404      	bmi.n	bd32 <z_sched_start+0x22>
	__asm__ volatile(
    bd28:	f384 8811 	msr	BASEPRI, r4
    bd2c:	f3bf 8f6f 	isb	sy
}
    bd30:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bd32:	f022 0204 	bic.w	r2, r2, #4
    bd36:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    bd38:	f7ff fee0 	bl	bafc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    bd3c:	4621      	mov	r1, r4
}
    bd3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    bd42:	4801      	ldr	r0, [pc, #4]	; (bd48 <z_sched_start+0x38>)
    bd44:	f7ff bfd2 	b.w	bcec <z_reschedule>
    bd48:	20008383 	.word	0x20008383

0000bd4c <z_impl_k_thread_suspend>:
{
    bd4c:	b570      	push	{r4, r5, r6, lr}
    bd4e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    bd50:	3018      	adds	r0, #24
    bd52:	f000 ff7b 	bl	cc4c <z_abort_timeout>
	__asm__ volatile(
    bd56:	f04f 0320 	mov.w	r3, #32
    bd5a:	f3ef 8611 	mrs	r6, BASEPRI
    bd5e:	f383 8812 	msr	BASEPRI_MAX, r3
    bd62:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    bd66:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    bd6a:	7b63      	ldrb	r3, [r4, #13]
    bd6c:	2a00      	cmp	r2, #0
    bd6e:	da05      	bge.n	bd7c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bd70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    bd74:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bd76:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bd78:	f000 fec6 	bl	cb08 <sys_dlist_remove>
		update_cache(thread == _current);
    bd7c:	4d0b      	ldr	r5, [pc, #44]	; (bdac <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    bd7e:	7b63      	ldrb	r3, [r4, #13]
    bd80:	68a8      	ldr	r0, [r5, #8]
    bd82:	f043 0310 	orr.w	r3, r3, #16
    bd86:	7363      	strb	r3, [r4, #13]
    bd88:	1b03      	subs	r3, r0, r4
    bd8a:	4258      	negs	r0, r3
    bd8c:	4158      	adcs	r0, r3
    bd8e:	f7ff fe5d 	bl	ba4c <update_cache>
	__asm__ volatile(
    bd92:	f386 8811 	msr	BASEPRI, r6
    bd96:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    bd9a:	68ab      	ldr	r3, [r5, #8]
    bd9c:	42a3      	cmp	r3, r4
    bd9e:	d103      	bne.n	bda8 <z_impl_k_thread_suspend+0x5c>
}
    bda0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    bda4:	f000 bf48 	b.w	cc38 <z_reschedule_unlocked>
}
    bda8:	bd70      	pop	{r4, r5, r6, pc}
    bdaa:	bf00      	nop
    bdac:	20008348 	.word	0x20008348

0000bdb0 <k_sched_lock>:
	__asm__ volatile(
    bdb0:	f04f 0320 	mov.w	r3, #32
    bdb4:	f3ef 8111 	mrs	r1, BASEPRI
    bdb8:	f383 8812 	msr	BASEPRI_MAX, r3
    bdbc:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    bdc0:	4b04      	ldr	r3, [pc, #16]	; (bdd4 <k_sched_lock+0x24>)
    bdc2:	689a      	ldr	r2, [r3, #8]
    bdc4:	7bd3      	ldrb	r3, [r2, #15]
    bdc6:	3b01      	subs	r3, #1
    bdc8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    bdca:	f381 8811 	msr	BASEPRI, r1
    bdce:	f3bf 8f6f 	isb	sy
}
    bdd2:	4770      	bx	lr
    bdd4:	20008348 	.word	0x20008348

0000bdd8 <k_sched_unlock>:
{
    bdd8:	b510      	push	{r4, lr}
	__asm__ volatile(
    bdda:	f04f 0320 	mov.w	r3, #32
    bdde:	f3ef 8411 	mrs	r4, BASEPRI
    bde2:	f383 8812 	msr	BASEPRI_MAX, r3
    bde6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    bdea:	4b08      	ldr	r3, [pc, #32]	; (be0c <k_sched_unlock+0x34>)
		update_cache(0);
    bdec:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    bdee:	689a      	ldr	r2, [r3, #8]
    bdf0:	7bd3      	ldrb	r3, [r2, #15]
    bdf2:	3301      	adds	r3, #1
    bdf4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    bdf6:	f7ff fe29 	bl	ba4c <update_cache>
	__asm__ volatile(
    bdfa:	f384 8811 	msr	BASEPRI, r4
    bdfe:	f3bf 8f6f 	isb	sy
}
    be02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    be06:	f000 bf17 	b.w	cc38 <z_reschedule_unlocked>
    be0a:	bf00      	nop
    be0c:	20008348 	.word	0x20008348

0000be10 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    be10:	4b02      	ldr	r3, [pc, #8]	; (be1c <z_sched_init+0xc>)
    be12:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    be16:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    be1a:	4770      	bx	lr
    be1c:	20008348 	.word	0x20008348

0000be20 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    be20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    be22:	f04f 0320 	mov.w	r3, #32
    be26:	f3ef 8511 	mrs	r5, BASEPRI
    be2a:	f383 8812 	msr	BASEPRI_MAX, r3
    be2e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    be32:	4919      	ldr	r1, [pc, #100]	; (be98 <z_impl_k_yield+0x78>)
    be34:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    be36:	7b43      	ldrb	r3, [r0, #13]
    be38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    be3c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    be3e:	f000 fe63 	bl	cb08 <sys_dlist_remove>
	return list->head == list;
    be42:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    be44:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    be46:	7b5a      	ldrb	r2, [r3, #13]
    be48:	f062 027f 	orn	r2, r2, #127	; 0x7f
    be4c:	735a      	strb	r2, [r3, #13]
    be4e:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    be52:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be54:	4282      	cmp	r2, r0
    be56:	bf08      	it	eq
    be58:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    be5a:	b922      	cbnz	r2, be66 <z_impl_k_yield+0x46>
	node->prev = tail;
    be5c:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    be60:	6023      	str	r3, [r4, #0]
	list->tail = node;
    be62:	620b      	str	r3, [r1, #32]
}
    be64:	e00c      	b.n	be80 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    be66:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    be6a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    be6e:	42be      	cmp	r6, r7
    be70:	d00e      	beq.n	be90 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    be72:	42b7      	cmp	r7, r6
    be74:	dd0c      	ble.n	be90 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    be76:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    be78:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    be7c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    be7e:	6053      	str	r3, [r2, #4]
	update_cache(1);
    be80:	2001      	movs	r0, #1
    be82:	f7ff fde3 	bl	ba4c <update_cache>
    be86:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    be88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    be8c:	f7fd b9e8 	b.w	9260 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    be90:	42a2      	cmp	r2, r4
    be92:	d0e3      	beq.n	be5c <z_impl_k_yield+0x3c>
    be94:	6812      	ldr	r2, [r2, #0]
    be96:	e7e0      	b.n	be5a <z_impl_k_yield+0x3a>
    be98:	20008348 	.word	0x20008348

0000be9c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    be9c:	ea50 0301 	orrs.w	r3, r0, r1
{
    bea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bea4:	4605      	mov	r5, r0
    bea6:	460e      	mov	r6, r1
	if (ticks == 0) {
    bea8:	d103      	bne.n	beb2 <z_tick_sleep+0x16>
	z_impl_k_yield();
    beaa:	f7ff ffb9 	bl	be20 <z_impl_k_yield>
		k_yield();
		return 0;
    beae:	2000      	movs	r0, #0
    beb0:	e02c      	b.n	bf0c <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    beb2:	1c83      	adds	r3, r0, #2
    beb4:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    beb8:	db2a      	blt.n	bf10 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    beba:	f000 feed 	bl	cc98 <sys_clock_tick_get_32>
    bebe:	182c      	adds	r4, r5, r0
    bec0:	f04f 0320 	mov.w	r3, #32
    bec4:	f3ef 8811 	mrs	r8, BASEPRI
    bec8:	f383 8812 	msr	BASEPRI_MAX, r3
    becc:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    bed0:	4f11      	ldr	r7, [pc, #68]	; (bf18 <z_tick_sleep+0x7c>)
    bed2:	4b12      	ldr	r3, [pc, #72]	; (bf1c <z_tick_sleep+0x80>)
    bed4:	68b8      	ldr	r0, [r7, #8]
    bed6:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    bed8:	f7ff fe44 	bl	bb64 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    bedc:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    bede:	4910      	ldr	r1, [pc, #64]	; (bf20 <z_tick_sleep+0x84>)
    bee0:	462a      	mov	r2, r5
    bee2:	4633      	mov	r3, r6
    bee4:	3018      	adds	r0, #24
    bee6:	f000 f8fd 	bl	c0e4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    beea:	68ba      	ldr	r2, [r7, #8]
    beec:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    beee:	7b53      	ldrb	r3, [r2, #13]
    bef0:	f043 0310 	orr.w	r3, r3, #16
    bef4:	7353      	strb	r3, [r2, #13]
    bef6:	f7fd f9b3 	bl	9260 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    befa:	f000 fecd 	bl	cc98 <sys_clock_tick_get_32>
    befe:	1a20      	subs	r0, r4, r0
    bf00:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    bf04:	2801      	cmp	r0, #1
    bf06:	f173 0300 	sbcs.w	r3, r3, #0
    bf0a:	dbd0      	blt.n	beae <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    bf0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    bf10:	f06f 0401 	mvn.w	r4, #1
    bf14:	1a24      	subs	r4, r4, r0
    bf16:	e7d3      	b.n	bec0 <z_tick_sleep+0x24>
    bf18:	20008348 	.word	0x20008348
    bf1c:	2000836c 	.word	0x2000836c
    bf20:	0000cbe1 	.word	0x0000cbe1

0000bf24 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bf24:	f1b1 3fff 	cmp.w	r1, #4294967295
    bf28:	bf08      	it	eq
    bf2a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    bf2e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bf30:	d106      	bne.n	bf40 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    bf32:	4b08      	ldr	r3, [pc, #32]	; (bf54 <z_impl_k_sleep+0x30>)
    bf34:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    bf36:	f7ff ff09 	bl	bd4c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    bf3a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    bf3e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    bf40:	f7ff ffac 	bl	be9c <z_tick_sleep>
    bf44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    bf48:	fb80 0303 	smull	r0, r3, r0, r3
    bf4c:	0bc0      	lsrs	r0, r0, #15
    bf4e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    bf52:	e7f4      	b.n	bf3e <z_impl_k_sleep+0x1a>
    bf54:	20008348 	.word	0x20008348

0000bf58 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    bf58:	4b01      	ldr	r3, [pc, #4]	; (bf60 <z_impl_z_current_get+0x8>)
    bf5a:	6898      	ldr	r0, [r3, #8]
    bf5c:	4770      	bx	lr
    bf5e:	bf00      	nop
    bf60:	20008348 	.word	0x20008348

0000bf64 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    bf64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf68:	4604      	mov	r4, r0
    bf6a:	f04f 0320 	mov.w	r3, #32
    bf6e:	f3ef 8611 	mrs	r6, BASEPRI
    bf72:	f383 8812 	msr	BASEPRI_MAX, r3
    bf76:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    bf7a:	7b03      	ldrb	r3, [r0, #12]
    bf7c:	07d9      	lsls	r1, r3, #31
    bf7e:	d50b      	bpl.n	bf98 <z_thread_abort+0x34>
	__asm__ volatile(
    bf80:	f386 8811 	msr	BASEPRI, r6
    bf84:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    bf88:	4040      	eors	r0, r0
    bf8a:	f380 8811 	msr	BASEPRI, r0
    bf8e:	f04f 0004 	mov.w	r0, #4
    bf92:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    bf94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    bf98:	7b43      	ldrb	r3, [r0, #13]
    bf9a:	071a      	lsls	r2, r3, #28
    bf9c:	d504      	bpl.n	bfa8 <z_thread_abort+0x44>
    bf9e:	f386 8811 	msr	BASEPRI, r6
    bfa2:	f3bf 8f6f 	isb	sy
    bfa6:	e7f5      	b.n	bf94 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    bfa8:	f023 0220 	bic.w	r2, r3, #32
    bfac:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    bfb0:	09d2      	lsrs	r2, r2, #7
    bfb2:	d120      	bne.n	bff6 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    bfb4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    bfb6:	68a3      	ldr	r3, [r4, #8]
    bfb8:	b113      	cbz	r3, bfc0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    bfba:	4620      	mov	r0, r4
    bfbc:	f000 fdac 	bl	cb18 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    bfc0:	f104 0018 	add.w	r0, r4, #24
    bfc4:	f000 fe42 	bl	cc4c <z_abort_timeout>
    bfc8:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    bfcc:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    bfd0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bfd2:	42bd      	cmp	r5, r7
    bfd4:	d000      	beq.n	bfd8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    bfd6:	b9b5      	cbnz	r5, c006 <z_thread_abort+0xa2>
		update_cache(1);
    bfd8:	2001      	movs	r0, #1
    bfda:	f7ff fd37 	bl	ba4c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    bfde:	4b10      	ldr	r3, [pc, #64]	; (c020 <z_thread_abort+0xbc>)
    bfe0:	689b      	ldr	r3, [r3, #8]
    bfe2:	42a3      	cmp	r3, r4
    bfe4:	d1db      	bne.n	bf9e <z_thread_abort+0x3a>
    bfe6:	f3ef 8305 	mrs	r3, IPSR
    bfea:	2b00      	cmp	r3, #0
    bfec:	d1d7      	bne.n	bf9e <z_thread_abort+0x3a>
    bfee:	4630      	mov	r0, r6
    bff0:	f7fd f936 	bl	9260 <arch_swap>
	return ret;
    bff4:	e7d3      	b.n	bf9e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bff6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    bffa:	f043 0308 	orr.w	r3, r3, #8
    bffe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c000:	f000 fd82 	bl	cb08 <sys_dlist_remove>
}
    c004:	e7d7      	b.n	bfb6 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    c006:	4628      	mov	r0, r5
    c008:	f000 fd86 	bl	cb18 <unpend_thread_no_timeout>
    c00c:	f105 0018 	add.w	r0, r5, #24
    c010:	f000 fe1c 	bl	cc4c <z_abort_timeout>
		ready_thread(thread);
    c014:	4628      	mov	r0, r5
    c016:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    c01a:	f7ff fd6f 	bl	bafc <ready_thread>
    c01e:	e7d7      	b.n	bfd0 <z_thread_abort+0x6c>
    c020:	20008348 	.word	0x20008348

0000c024 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    c024:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    c026:	4806      	ldr	r0, [pc, #24]	; (c040 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    c028:	4a06      	ldr	r2, [pc, #24]	; (c044 <z_data_copy+0x20>)
    c02a:	4907      	ldr	r1, [pc, #28]	; (c048 <z_data_copy+0x24>)
    c02c:	1a12      	subs	r2, r2, r0
    c02e:	f000 fd54 	bl	cada <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    c032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    c036:	4a05      	ldr	r2, [pc, #20]	; (c04c <z_data_copy+0x28>)
    c038:	4905      	ldr	r1, [pc, #20]	; (c050 <z_data_copy+0x2c>)
    c03a:	4806      	ldr	r0, [pc, #24]	; (c054 <z_data_copy+0x30>)
    c03c:	f000 bd4d 	b.w	cada <z_early_memcpy>
    c040:	20008000 	.word	0x20008000
    c044:	200080d4 	.word	0x200080d4
    c048:	0000d2f0 	.word	0x0000d2f0
    c04c:	00000000 	.word	0x00000000
    c050:	0000d2f0 	.word	0x0000d2f0
    c054:	20008000 	.word	0x20008000

0000c058 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    c058:	4b03      	ldr	r3, [pc, #12]	; (c068 <elapsed+0x10>)
    c05a:	681b      	ldr	r3, [r3, #0]
    c05c:	b90b      	cbnz	r3, c062 <elapsed+0xa>
    c05e:	f7fe bc59 	b.w	a914 <sys_clock_elapsed>
}
    c062:	2000      	movs	r0, #0
    c064:	4770      	bx	lr
    c066:	bf00      	nop
    c068:	20008378 	.word	0x20008378

0000c06c <next_timeout>:

static int32_t next_timeout(void)
{
    c06c:	b510      	push	{r4, lr}
	return list->head == list;
    c06e:	4b0e      	ldr	r3, [pc, #56]	; (c0a8 <next_timeout+0x3c>)
    c070:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c072:	429c      	cmp	r4, r3
    c074:	d104      	bne.n	c080 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    c076:	f7ff ffef 	bl	c058 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    c07a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    c07e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    c080:	f7ff ffea 	bl	c058 <elapsed>
	if ((to == NULL) ||
    c084:	2c00      	cmp	r4, #0
    c086:	d0f8      	beq.n	c07a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    c088:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    c08c:	1a1b      	subs	r3, r3, r0
    c08e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    c092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c096:	f172 0100 	sbcs.w	r1, r2, #0
    c09a:	daee      	bge.n	c07a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    c09c:	2a00      	cmp	r2, #0
    c09e:	bfac      	ite	ge
    c0a0:	4618      	movge	r0, r3
    c0a2:	2000      	movlt	r0, #0
	return ret;
    c0a4:	e7eb      	b.n	c07e <next_timeout+0x12>
    c0a6:	bf00      	nop
    c0a8:	200080ac 	.word	0x200080ac

0000c0ac <remove_timeout>:
{
    c0ac:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c0ae:	b170      	cbz	r0, c0ce <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    c0b0:	4b0b      	ldr	r3, [pc, #44]	; (c0e0 <remove_timeout+0x34>)
    c0b2:	685b      	ldr	r3, [r3, #4]
    c0b4:	4298      	cmp	r0, r3
    c0b6:	d00a      	beq.n	c0ce <remove_timeout+0x22>
    c0b8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    c0ba:	b143      	cbz	r3, c0ce <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    c0bc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    c0c0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    c0c4:	1912      	adds	r2, r2, r4
    c0c6:	eb41 0105 	adc.w	r1, r1, r5
    c0ca:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    c0ce:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    c0d2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c0d4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c0d6:	2300      	movs	r3, #0
	node->prev = NULL;
    c0d8:	e9c0 3300 	strd	r3, r3, [r0]
}
    c0dc:	bd30      	pop	{r4, r5, pc}
    c0de:	bf00      	nop
    c0e0:	200080ac 	.word	0x200080ac

0000c0e4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
    c0e8:	bf08      	it	eq
    c0ea:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    c0ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0f0:	4604      	mov	r4, r0
    c0f2:	461d      	mov	r5, r3
    c0f4:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c0f6:	d05c      	beq.n	c1b2 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    c0f8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    c0fa:	f04f 0320 	mov.w	r3, #32
    c0fe:	f3ef 8711 	mrs	r7, BASEPRI
    c102:	f383 8812 	msr	BASEPRI_MAX, r3
    c106:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    c10a:	3201      	adds	r2, #1
    c10c:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    c110:	da24      	bge.n	c15c <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    c112:	f06f 0301 	mvn.w	r3, #1
    c116:	492c      	ldr	r1, [pc, #176]	; (c1c8 <z_add_timeout+0xe4>)
    c118:	e9d1 2000 	ldrd	r2, r0, [r1]
    c11c:	1a9b      	subs	r3, r3, r2
    c11e:	f04f 32ff 	mov.w	r2, #4294967295
    c122:	eb62 0000 	sbc.w	r0, r2, r0
    c126:	1b9e      	subs	r6, r3, r6
    c128:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    c12c:	2e01      	cmp	r6, #1
    c12e:	f170 0300 	sbcs.w	r3, r0, #0
    c132:	da01      	bge.n	c138 <z_add_timeout+0x54>
    c134:	2601      	movs	r6, #1
    c136:	2000      	movs	r0, #0
    c138:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    c13c:	4e23      	ldr	r6, [pc, #140]	; (c1cc <z_add_timeout+0xe8>)
    c13e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    c142:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c144:	45b4      	cmp	ip, r6
    c146:	bf08      	it	eq
    c148:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    c14c:	f1bc 0f00 	cmp.w	ip, #0
    c150:	d10d      	bne.n	c16e <z_add_timeout+0x8a>
	node->prev = tail;
    c152:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    c156:	602c      	str	r4, [r5, #0]
	list->tail = node;
    c158:	6074      	str	r4, [r6, #4]
}
    c15a:	e01c      	b.n	c196 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    c15c:	f7ff ff7c 	bl	c058 <elapsed>
    c160:	3601      	adds	r6, #1
    c162:	f145 0500 	adc.w	r5, r5, #0
    c166:	1836      	adds	r6, r6, r0
    c168:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    c16c:	e7e4      	b.n	c138 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    c16e:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    c172:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    c176:	4293      	cmp	r3, r2
    c178:	eb71 0e00 	sbcs.w	lr, r1, r0
    c17c:	da1a      	bge.n	c1b4 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    c17e:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    c180:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c184:	eb60 0001 	sbc.w	r0, r0, r1
    c188:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    c18c:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    c190:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    c192:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    c196:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c198:	42b3      	cmp	r3, r6
    c19a:	d006      	beq.n	c1aa <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    c19c:	429c      	cmp	r4, r3
    c19e:	d104      	bne.n	c1aa <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    c1a0:	f7ff ff64 	bl	c06c <next_timeout>
    c1a4:	2100      	movs	r1, #0
    c1a6:	f7fe fb83 	bl	a8b0 <sys_clock_set_timeout>
	__asm__ volatile(
    c1aa:	f387 8811 	msr	BASEPRI, r7
    c1ae:	f3bf 8f6f 	isb	sy
		}
	}
}
    c1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    c1b4:	1a9b      	subs	r3, r3, r2
    c1b6:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    c1ba:	45ac      	cmp	ip, r5
    c1bc:	e9c4 3104 	strd	r3, r1, [r4, #16]
    c1c0:	d0c7      	beq.n	c152 <z_add_timeout+0x6e>
    c1c2:	f8dc c000 	ldr.w	ip, [ip]
    c1c6:	e7c1      	b.n	c14c <z_add_timeout+0x68>
    c1c8:	20008210 	.word	0x20008210
    c1cc:	200080ac 	.word	0x200080ac

0000c1d0 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    c1d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    c1d4:	f04f 0320 	mov.w	r3, #32
    c1d8:	f3ef 8c11 	mrs	ip, BASEPRI
    c1dc:	f383 8812 	msr	BASEPRI_MAX, r3
    c1e0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    c1e4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; c298 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    c1e8:	f8df 90b0 	ldr.w	r9, [pc, #176]	; c29c <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    c1ec:	2400      	movs	r4, #0
	announce_remaining = ticks;
    c1ee:	f8c9 0000 	str.w	r0, [r9]
    c1f2:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    c1f6:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c1f8:	4550      	cmp	r0, sl
    c1fa:	bf08      	it	eq
    c1fc:	2000      	moveq	r0, #0
		curr_tick += dt;
    c1fe:	4f28      	ldr	r7, [pc, #160]	; (c2a0 <sys_clock_announce+0xd0>)
    c200:	46e0      	mov	r8, ip
    c202:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    c206:	f8d9 3000 	ldr.w	r3, [r9]
    c20a:	b380      	cbz	r0, c26e <sys_clock_announce+0x9e>
    c20c:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    c210:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    c214:	42b3      	cmp	r3, r6
    c216:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    c21a:	da05      	bge.n	c228 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    c21c:	1af6      	subs	r6, r6, r3
    c21e:	eb6c 040e 	sbc.w	r4, ip, lr
    c222:	e9c0 6404 	strd	r6, r4, [r0, #16]
    c226:	e022      	b.n	c26e <sys_clock_announce+0x9e>
		curr_tick += dt;
    c228:	18b2      	adds	r2, r6, r2
    c22a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    c22e:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    c232:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    c236:	f7ff ff39 	bl	c0ac <remove_timeout>
	__asm__ volatile(
    c23a:	f388 8811 	msr	BASEPRI, r8
    c23e:	f3bf 8f6f 	isb	sy
		t->fn(t);
    c242:	6883      	ldr	r3, [r0, #8]
    c244:	4798      	blx	r3
	__asm__ volatile(
    c246:	f04f 0320 	mov.w	r3, #32
    c24a:	f3ef 8811 	mrs	r8, BASEPRI
    c24e:	f383 8812 	msr	BASEPRI_MAX, r3
    c252:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    c256:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    c25a:	f8da 0000 	ldr.w	r0, [sl]
    c25e:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c260:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    c262:	46c4      	mov	ip, r8
    c264:	f8c9 3000 	str.w	r3, [r9]
    c268:	d1ca      	bne.n	c200 <sys_clock_announce+0x30>
		curr_tick += dt;
    c26a:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    c26e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    c270:	189a      	adds	r2, r3, r2
    c272:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
    c276:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    c27a:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    c27e:	f7ff fef5 	bl	c06c <next_timeout>
    c282:	4621      	mov	r1, r4
    c284:	f7fe fb14 	bl	a8b0 <sys_clock_set_timeout>
	__asm__ volatile(
    c288:	f388 8811 	msr	BASEPRI, r8
    c28c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    c290:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    c294:	f7ff bc96 	b.w	bbc4 <z_time_slice>
    c298:	200080ac 	.word	0x200080ac
    c29c:	20008378 	.word	0x20008378
    c2a0:	20008210 	.word	0x20008210

0000c2a4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    c2a4:	b510      	push	{r4, lr}
	__asm__ volatile(
    c2a6:	f04f 0320 	mov.w	r3, #32
    c2aa:	f3ef 8411 	mrs	r4, BASEPRI
    c2ae:	f383 8812 	msr	BASEPRI_MAX, r3
    c2b2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    c2b6:	f7ff fecf 	bl	c058 <elapsed>
    c2ba:	4603      	mov	r3, r0
    c2bc:	4a05      	ldr	r2, [pc, #20]	; (c2d4 <sys_clock_tick_get+0x30>)
    c2be:	e9d2 0100 	ldrd	r0, r1, [r2]
    c2c2:	1818      	adds	r0, r3, r0
    c2c4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    c2c8:	f384 8811 	msr	BASEPRI, r4
    c2cc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    c2d0:	bd10      	pop	{r4, pc}
    c2d2:	bf00      	nop
    c2d4:	20008210 	.word	0x20008210

0000c2d8 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    c2d8:	4801      	ldr	r0, [pc, #4]	; (c2e0 <boot_banner+0x8>)
    c2da:	f000 b805 	b.w	c2e8 <printk>
    c2de:	bf00      	nop
    c2e0:	0000d2bf 	.word	0x0000d2bf

0000c2e4 <arch_printk_char_out>:
}
    c2e4:	2000      	movs	r0, #0
    c2e6:	4770      	bx	lr

0000c2e8 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    c2e8:	b40f      	push	{r0, r1, r2, r3}
    c2ea:	b507      	push	{r0, r1, r2, lr}
    c2ec:	a904      	add	r1, sp, #16
    c2ee:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    c2f2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    c2f4:	f7fc f8f2 	bl	84dc <vprintk>

	va_end(ap);
}
    c2f8:	b003      	add	sp, #12
    c2fa:	f85d eb04 	ldr.w	lr, [sp], #4
    c2fe:	b004      	add	sp, #16
    c300:	4770      	bx	lr

0000c302 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    c302:	4604      	mov	r4, r0
    c304:	b508      	push	{r3, lr}
    c306:	4608      	mov	r0, r1
    c308:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    c30a:	461a      	mov	r2, r3
    c30c:	47a0      	blx	r4
	return z_impl_z_current_get();
    c30e:	f7ff fe23 	bl	bf58 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    c312:	f7fd fa2d 	bl	9770 <z_impl_k_thread_abort>

0000c316 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c316:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    c318:	f013 0307 	ands.w	r3, r3, #7
    c31c:	d105      	bne.n	c32a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    c31e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    c320:	2b00      	cmp	r3, #0
    c322:	bf0c      	ite	eq
    c324:	2000      	moveq	r0, #0
    c326:	2003      	movne	r0, #3
    c328:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    c32a:	2b02      	cmp	r3, #2
    c32c:	d105      	bne.n	c33a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    c32e:	8b40      	ldrh	r0, [r0, #26]
    c330:	fab0 f080 	clz	r0, r0
    c334:	0940      	lsrs	r0, r0, #5
    c336:	0080      	lsls	r0, r0, #2
    c338:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    c33a:	2b01      	cmp	r3, #1
    c33c:	d105      	bne.n	c34a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    c33e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    c340:	2b00      	cmp	r3, #0
    c342:	bf0c      	ite	eq
    c344:	2000      	moveq	r0, #0
    c346:	2005      	movne	r0, #5
    c348:	4770      	bx	lr
	int evt = EVT_NOP;
    c34a:	2000      	movs	r0, #0
}
    c34c:	4770      	bx	lr

0000c34e <validate_args>:
{
    c34e:	b510      	push	{r4, lr}
    c350:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    c352:	b100      	cbz	r0, c356 <validate_args+0x8>
    c354:	b911      	cbnz	r1, c35c <validate_args+0xe>
		return -EINVAL;
    c356:	f06f 0015 	mvn.w	r0, #21
}
    c35a:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    c35c:	1d08      	adds	r0, r1, #4
    c35e:	f000 f895 	bl	c48c <sys_notify_validate>
	if ((rv == 0)
    c362:	2800      	cmp	r0, #0
    c364:	d1f9      	bne.n	c35a <validate_args+0xc>
	    && ((cli->notify.flags
    c366:	68a3      	ldr	r3, [r4, #8]
    c368:	2b03      	cmp	r3, #3
    c36a:	d9f6      	bls.n	c35a <validate_args+0xc>
    c36c:	e7f3      	b.n	c356 <validate_args+0x8>

0000c36e <notify_one>:
{
    c36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c372:	460d      	mov	r5, r1
    c374:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    c376:	4619      	mov	r1, r3
    c378:	1d28      	adds	r0, r5, #4
{
    c37a:	4690      	mov	r8, r2
    c37c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    c37e:	f000 f896 	bl	c4ae <sys_notify_finalize>
	if (cb) {
    c382:	4604      	mov	r4, r0
    c384:	b138      	cbz	r0, c396 <notify_one+0x28>
		cb(mgr, cli, state, res);
    c386:	4633      	mov	r3, r6
    c388:	4642      	mov	r2, r8
    c38a:	4629      	mov	r1, r5
    c38c:	4638      	mov	r0, r7
    c38e:	46a4      	mov	ip, r4
}
    c390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    c394:	4760      	bx	ip
}
    c396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c39a <transition_complete>:
{
    c39a:	b410      	push	{r4}
	__asm__ volatile(
    c39c:	f04f 0420 	mov.w	r4, #32
    c3a0:	f3ef 8211 	mrs	r2, BASEPRI
    c3a4:	f384 8812 	msr	BASEPRI_MAX, r4
    c3a8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    c3ac:	6141      	str	r1, [r0, #20]
}
    c3ae:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    c3b0:	2101      	movs	r1, #1
    c3b2:	f7fc b8a1 	b.w	84f8 <process_event>

0000c3b6 <onoff_manager_init>:
{
    c3b6:	b538      	push	{r3, r4, r5, lr}
    c3b8:	460c      	mov	r4, r1
	if ((mgr == NULL)
    c3ba:	4605      	mov	r5, r0
    c3bc:	b158      	cbz	r0, c3d6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    c3be:	b151      	cbz	r1, c3d6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    c3c0:	680b      	ldr	r3, [r1, #0]
    c3c2:	b143      	cbz	r3, c3d6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    c3c4:	684b      	ldr	r3, [r1, #4]
    c3c6:	b133      	cbz	r3, c3d6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    c3c8:	221c      	movs	r2, #28
    c3ca:	2100      	movs	r1, #0
    c3cc:	f000 f95e 	bl	c68c <memset>
	return 0;
    c3d0:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    c3d2:	612c      	str	r4, [r5, #16]
}
    c3d4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    c3d6:	f06f 0015 	mvn.w	r0, #21
    c3da:	e7fb      	b.n	c3d4 <onoff_manager_init+0x1e>

0000c3dc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    c3dc:	b570      	push	{r4, r5, r6, lr}
    c3de:	4605      	mov	r5, r0
    c3e0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    c3e2:	f7ff ffb4 	bl	c34e <validate_args>

	if (rv < 0) {
    c3e6:	1e04      	subs	r4, r0, #0
    c3e8:	db15      	blt.n	c416 <onoff_request+0x3a>
    c3ea:	f04f 0320 	mov.w	r3, #32
    c3ee:	f3ef 8211 	mrs	r2, BASEPRI
    c3f2:	f383 8812 	msr	BASEPRI_MAX, r3
    c3f6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    c3fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3fe:	8b6b      	ldrh	r3, [r5, #26]
    c400:	8b2c      	ldrh	r4, [r5, #24]
    c402:	428b      	cmp	r3, r1
    c404:	f004 0407 	and.w	r4, r4, #7
    c408:	d107      	bne.n	c41a <onoff_request+0x3e>
	__asm__ volatile(
    c40a:	f382 8811 	msr	BASEPRI, r2
    c40e:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    c412:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    c416:	4620      	mov	r0, r4
    c418:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    c41a:	2c02      	cmp	r4, #2
    c41c:	d10c      	bne.n	c438 <onoff_request+0x5c>
		mgr->refs += 1U;
    c41e:	3301      	adds	r3, #1
    c420:	836b      	strh	r3, [r5, #26]
    c422:	f382 8811 	msr	BASEPRI, r2
    c426:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    c42a:	2300      	movs	r3, #0
    c42c:	4622      	mov	r2, r4
    c42e:	4631      	mov	r1, r6
    c430:	4628      	mov	r0, r5
    c432:	f7ff ff9c 	bl	c36e <notify_one>
    c436:	e7ee      	b.n	c416 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    c438:	2c06      	cmp	r4, #6
    c43a:	d814      	bhi.n	c466 <onoff_request+0x8a>
    c43c:	e8df f004 	tbb	[pc, r4]
    c440:	13131304 	.word	0x13131304
    c444:	1a04      	.short	0x1a04
    c446:	04          	.byte	0x04
    c447:	00          	.byte	0x00
	parent->next = child;
    c448:	2300      	movs	r3, #0
    c44a:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    c44c:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    c44e:	b93b      	cbnz	r3, c460 <onoff_request+0x84>
	list->head = node;
    c450:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    c454:	b9ac      	cbnz	r4, c482 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    c456:	2102      	movs	r1, #2
    c458:	4628      	mov	r0, r5
    c45a:	f7fc f84d 	bl	84f8 <process_event>
    c45e:	e7da      	b.n	c416 <onoff_request+0x3a>
	parent->next = child;
    c460:	601e      	str	r6, [r3, #0]
	list->tail = node;
    c462:	606e      	str	r6, [r5, #4]
}
    c464:	e7f6      	b.n	c454 <onoff_request+0x78>
    c466:	f382 8811 	msr	BASEPRI, r2
    c46a:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    c46e:	f06f 0404 	mvn.w	r4, #4
    c472:	e7d0      	b.n	c416 <onoff_request+0x3a>
    c474:	f382 8811 	msr	BASEPRI, r2
    c478:	f3bf 8f6f 	isb	sy
    c47c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    c480:	e7c9      	b.n	c416 <onoff_request+0x3a>
    c482:	f382 8811 	msr	BASEPRI, r2
    c486:	f3bf 8f6f 	isb	sy
		if (notify) {
    c48a:	e7c4      	b.n	c416 <onoff_request+0x3a>

0000c48c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    c48c:	4603      	mov	r3, r0
    c48e:	b158      	cbz	r0, c4a8 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    c490:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    c492:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    c496:	2a01      	cmp	r2, #1
    c498:	d003      	beq.n	c4a2 <sys_notify_validate+0x16>
    c49a:	2a03      	cmp	r2, #3
    c49c:	d104      	bne.n	c4a8 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    c49e:	6802      	ldr	r2, [r0, #0]
    c4a0:	b112      	cbz	r2, c4a8 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    c4a2:	2000      	movs	r0, #0
    c4a4:	6098      	str	r0, [r3, #8]
    c4a6:	4770      	bx	lr
    c4a8:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    c4ac:	4770      	bx	lr

0000c4ae <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    c4ae:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    c4b0:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    c4b2:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    c4b6:	2a03      	cmp	r2, #3
    c4b8:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    c4bc:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    c4be:	bf14      	ite	ne
    c4c0:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    c4c2:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    c4c4:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    c4c6:	4770      	bx	lr

0000c4c8 <encode_uint>:
{
    c4c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4cc:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    c4ce:	78d3      	ldrb	r3, [r2, #3]
{
    c4d0:	4680      	mov	r8, r0
	switch (specifier) {
    c4d2:	2b6f      	cmp	r3, #111	; 0x6f
{
    c4d4:	460f      	mov	r7, r1
    c4d6:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    c4d8:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    c4dc:	d029      	beq.n	c532 <encode_uint+0x6a>
    c4de:	d824      	bhi.n	c52a <encode_uint+0x62>
		return 10;
    c4e0:	2b58      	cmp	r3, #88	; 0x58
    c4e2:	bf0c      	ite	eq
    c4e4:	2610      	moveq	r6, #16
    c4e6:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    c4e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    c4ec:	4632      	mov	r2, r6
    c4ee:	2300      	movs	r3, #0
    c4f0:	4640      	mov	r0, r8
    c4f2:	4639      	mov	r1, r7
    c4f4:	f7fb fe2e 	bl	8154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c4f8:	2a09      	cmp	r2, #9
    c4fa:	b2d4      	uxtb	r4, r2
    c4fc:	d81e      	bhi.n	c53c <encode_uint+0x74>
    c4fe:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    c500:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c502:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    c504:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c508:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    c50c:	d301      	bcc.n	c512 <encode_uint+0x4a>
    c50e:	45d1      	cmp	r9, sl
    c510:	d811      	bhi.n	c536 <encode_uint+0x6e>
	if (conv->flag_hash) {
    c512:	782b      	ldrb	r3, [r5, #0]
    c514:	069b      	lsls	r3, r3, #26
    c516:	d505      	bpl.n	c524 <encode_uint+0x5c>
		if (radix == 8) {
    c518:	2e08      	cmp	r6, #8
    c51a:	d115      	bne.n	c548 <encode_uint+0x80>
			conv->altform_0 = true;
    c51c:	78ab      	ldrb	r3, [r5, #2]
    c51e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    c522:	70ab      	strb	r3, [r5, #2]
}
    c524:	4648      	mov	r0, r9
    c526:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    c52a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    c52e:	2b70      	cmp	r3, #112	; 0x70
    c530:	e7d7      	b.n	c4e2 <encode_uint+0x1a>
	switch (specifier) {
    c532:	2608      	movs	r6, #8
    c534:	e7d8      	b.n	c4e8 <encode_uint+0x20>
		value /= radix;
    c536:	4680      	mov	r8, r0
    c538:	460f      	mov	r7, r1
    c53a:	e7d7      	b.n	c4ec <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c53c:	f1bb 0f19 	cmp.w	fp, #25
    c540:	bf94      	ite	ls
    c542:	3437      	addls	r4, #55	; 0x37
    c544:	3457      	addhi	r4, #87	; 0x57
    c546:	e7db      	b.n	c500 <encode_uint+0x38>
		} else if (radix == 16) {
    c548:	2e10      	cmp	r6, #16
    c54a:	d1eb      	bne.n	c524 <encode_uint+0x5c>
			conv->altform_0c = true;
    c54c:	78ab      	ldrb	r3, [r5, #2]
    c54e:	f043 0310 	orr.w	r3, r3, #16
    c552:	e7e6      	b.n	c522 <encode_uint+0x5a>

0000c554 <outs>:
{
    c554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c558:	4607      	mov	r7, r0
    c55a:	4688      	mov	r8, r1
    c55c:	4615      	mov	r5, r2
    c55e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c560:	4614      	mov	r4, r2
    c562:	42b4      	cmp	r4, r6
    c564:	d305      	bcc.n	c572 <outs+0x1e>
    c566:	b10e      	cbz	r6, c56c <outs+0x18>
	return (int)count;
    c568:	1b60      	subs	r0, r4, r5
    c56a:	e008      	b.n	c57e <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c56c:	7823      	ldrb	r3, [r4, #0]
    c56e:	2b00      	cmp	r3, #0
    c570:	d0fa      	beq.n	c568 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    c572:	4641      	mov	r1, r8
    c574:	f814 0b01 	ldrb.w	r0, [r4], #1
    c578:	47b8      	blx	r7
		if (rc < 0) {
    c57a:	2800      	cmp	r0, #0
    c57c:	daf1      	bge.n	c562 <outs+0xe>
}
    c57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c582 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    c582:	4770      	bx	lr

0000c584 <nordicsemi_nrf53_init>:
	__asm__ volatile(
    c584:	f04f 0320 	mov.w	r3, #32
    c588:	f3ef 8111 	mrs	r1, BASEPRI
    c58c:	f383 8812 	msr	BASEPRI_MAX, r3
    c590:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    c594:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    c598:	2202      	movs	r2, #2
    c59a:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    c59e:	2201      	movs	r2, #1
    c5a0:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    c5a4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    c5a8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
    c5ac:	f381 8811 	msr	BASEPRI, r1
    c5b0:	f3bf 8f6f 	isb	sy
}
    c5b4:	2000      	movs	r0, #0
    c5b6:	4770      	bx	lr

0000c5b8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    c5b8:	2806      	cmp	r0, #6
    c5ba:	d108      	bne.n	c5ce <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    c5bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    c5c0:	2201      	movs	r2, #1
    c5c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    c5c6:	f3bf 8f4f 	dsb	sy
        __WFE();
    c5ca:	bf20      	wfe
    while (true)
    c5cc:	e7fd      	b.n	c5ca <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    c5ce:	4770      	bx	lr

0000c5d0 <pm_state_exit_post_ops>:
    c5d0:	2300      	movs	r3, #0
    c5d2:	f383 8811 	msr	BASEPRI, r3
    c5d6:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    c5da:	4770      	bx	lr

0000c5dc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    c5dc:	f000 ba60 	b.w	caa0 <z_fatal_error>

0000c5e0 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    c5e0:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    c5e2:	6800      	ldr	r0, [r0, #0]
    c5e4:	f000 ba5c 	b.w	caa0 <z_fatal_error>

0000c5e8 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    c5e8:	2100      	movs	r1, #0
    c5ea:	2001      	movs	r0, #1
    c5ec:	f7ff bff6 	b.w	c5dc <z_arm_fatal_error>

0000c5f0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    c5f0:	b508      	push	{r3, lr}
	handler();
    c5f2:	f7fc fe15 	bl	9220 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    c5f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    c5fa:	f7fc bedd 	b.w	93b8 <z_arm_exc_exit>

0000c5fe <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    c5fe:	6e43      	ldr	r3, [r0, #100]	; 0x64
    c600:	f383 880b 	msr	PSPLIM, r3
}
    c604:	4770      	bx	lr

0000c606 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
    c606:	4770      	bx	lr

0000c608 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
    c608:	4770      	bx	lr

0000c60a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    c60a:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    c60e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    c612:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    c614:	bf08      	it	eq
    c616:	f06f 0015 	mvneq.w	r0, #21
    c61a:	4770      	bx	lr

0000c61c <mpu_configure_region>:
{
    c61c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    c61e:	890a      	ldrh	r2, [r1, #8]
    c620:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    c622:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    c624:	684d      	ldr	r5, [r1, #4]
    c626:	f002 021f 	and.w	r2, r2, #31
    c62a:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    c62e:	9300      	str	r3, [sp, #0]
    c630:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    c634:	f023 031f 	bic.w	r3, r3, #31
    c638:	1e6a      	subs	r2, r5, #1
    c63a:	4413      	add	r3, r2
    c63c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    c640:	2807      	cmp	r0, #7
    c642:	9303      	str	r3, [sp, #12]
    c644:	d804      	bhi.n	c650 <mpu_configure_region+0x34>
	region_init(index, region_conf);
    c646:	4669      	mov	r1, sp
    c648:	f7fd f8c4 	bl	97d4 <region_init>
}
    c64c:	b004      	add	sp, #16
    c64e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c650:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    c654:	e7fa      	b.n	c64c <mpu_configure_region+0x30>

0000c656 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    c656:	4603      	mov	r3, r0
	size_t n = 0;
    c658:	2000      	movs	r0, #0

	while (*s != '\0') {
    c65a:	5c1a      	ldrb	r2, [r3, r0]
    c65c:	b902      	cbnz	r2, c660 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    c65e:	4770      	bx	lr
		n++;
    c660:	3001      	adds	r0, #1
    c662:	e7fa      	b.n	c65a <strlen+0x4>

0000c664 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    c664:	4603      	mov	r3, r0
	size_t n = 0;
    c666:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    c668:	5c1a      	ldrb	r2, [r3, r0]
    c66a:	b10a      	cbz	r2, c670 <strnlen+0xc>
    c66c:	4288      	cmp	r0, r1
    c66e:	d100      	bne.n	c672 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    c670:	4770      	bx	lr
		n++;
    c672:	3001      	adds	r0, #1
    c674:	e7f8      	b.n	c668 <strnlen+0x4>

0000c676 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    c676:	b510      	push	{r4, lr}
    c678:	1e43      	subs	r3, r0, #1
    c67a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    c67c:	4291      	cmp	r1, r2
    c67e:	d100      	bne.n	c682 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    c680:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    c682:	f811 4b01 	ldrb.w	r4, [r1], #1
    c686:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    c68a:	e7f7      	b.n	c67c <memcpy+0x6>

0000c68c <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    c68c:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    c68e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    c690:	4402      	add	r2, r0
    c692:	4293      	cmp	r3, r2
    c694:	d100      	bne.n	c698 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    c696:	4770      	bx	lr
		*(d_byte++) = c_byte;
    c698:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    c69c:	e7f9      	b.n	c692 <memset+0x6>

0000c69e <_stdout_hook_default>:
}
    c69e:	f04f 30ff 	mov.w	r0, #4294967295
    c6a2:	4770      	bx	lr

0000c6a4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    c6a4:	220c      	movs	r2, #12
    c6a6:	6903      	ldr	r3, [r0, #16]
    c6a8:	b2c9      	uxtb	r1, r1
    c6aa:	fb01 3302 	mla	r3, r1, r2, r3
    c6ae:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    c6b0:	f000 0007 	and.w	r0, r0, #7
    c6b4:	4770      	bx	lr

0000c6b6 <set_on_state>:
	__asm__ volatile(
    c6b6:	f04f 0320 	mov.w	r3, #32
    c6ba:	f3ef 8211 	mrs	r2, BASEPRI
    c6be:	f383 8812 	msr	BASEPRI_MAX, r3
    c6c2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    c6c6:	6803      	ldr	r3, [r0, #0]
    c6c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c6cc:	f043 0302 	orr.w	r3, r3, #2
    c6d0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    c6d2:	f382 8811 	msr	BASEPRI, r2
    c6d6:	f3bf 8f6f 	isb	sy
}
    c6da:	4770      	bx	lr

0000c6dc <stop>:
{
    c6dc:	b570      	push	{r4, r5, r6, lr}
    c6de:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    c6e0:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    c6e2:	f04f 0420 	mov.w	r4, #32
    c6e6:	f3ef 8511 	mrs	r5, BASEPRI
    c6ea:	f384 8812 	msr	BASEPRI_MAX, r4
    c6ee:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c6f2:	260c      	movs	r6, #12
    c6f4:	fb06 3401 	mla	r4, r6, r1, r3
    c6f8:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    c6fa:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    c6fe:	d008      	beq.n	c712 <stop+0x36>
    c700:	42a2      	cmp	r2, r4
    c702:	d006      	beq.n	c712 <stop+0x36>
	__asm__ volatile(
    c704:	f385 8811 	msr	BASEPRI, r5
    c708:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    c70c:	f04f 30ff 	mov.w	r0, #4294967295
}
    c710:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    c712:	2201      	movs	r2, #1
    c714:	fb06 3301 	mla	r3, r6, r1, r3
    c718:	679a      	str	r2, [r3, #120]	; 0x78
    c71a:	f385 8811 	msr	BASEPRI, r5
    c71e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    c722:	6843      	ldr	r3, [r0, #4]
    c724:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    c728:	685b      	ldr	r3, [r3, #4]
    c72a:	4798      	blx	r3
	return 0;
    c72c:	2000      	movs	r0, #0
    c72e:	e7ef      	b.n	c710 <stop+0x34>

0000c730 <api_stop>:
	return stop(dev, subsys, CTX_API);
    c730:	2280      	movs	r2, #128	; 0x80
    c732:	f7ff bfd3 	b.w	c6dc <stop>

0000c736 <async_start>:
{
    c736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c738:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    c73a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    c73c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    c73e:	f04f 0520 	mov.w	r5, #32
    c742:	f3ef 8611 	mrs	r6, BASEPRI
    c746:	f385 8812 	msr	BASEPRI_MAX, r5
    c74a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c74e:	250c      	movs	r5, #12
    c750:	fb05 4401 	mla	r4, r5, r1, r4
    c754:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    c756:	f005 0c07 	and.w	ip, r5, #7
    c75a:	f1bc 0f01 	cmp.w	ip, #1
    c75e:	d10c      	bne.n	c77a <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    c760:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    c762:	f386 8811 	msr	BASEPRI, r6
    c766:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    c76a:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    c76e:	6843      	ldr	r3, [r0, #4]
    c770:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    c774:	4798      	blx	r3
	return 0;
    c776:	2000      	movs	r0, #0
}
    c778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    c77a:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    c77e:	42af      	cmp	r7, r5
    c780:	f386 8811 	msr	BASEPRI, r6
    c784:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    c788:	bf0c      	ite	eq
    c78a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    c78e:	f04f 30ff 	movne.w	r0, #4294967295
    c792:	e7f1      	b.n	c778 <async_start+0x42>

0000c794 <api_start>:
{
    c794:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    c796:	2480      	movs	r4, #128	; 0x80
    c798:	9400      	str	r4, [sp, #0]
    c79a:	f7ff ffcc 	bl	c736 <async_start>
}
    c79e:	b002      	add	sp, #8
    c7a0:	bd10      	pop	{r4, pc}

0000c7a2 <onoff_started_callback>:
{
    c7a2:	b410      	push	{r4}
	notify(mgr, 0);
    c7a4:	241c      	movs	r4, #28
	return &data->mgr[type];
    c7a6:	6900      	ldr	r0, [r0, #16]
    c7a8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    c7aa:	fb03 0004 	mla	r0, r3, r4, r0
    c7ae:	2100      	movs	r1, #0
}
    c7b0:	bc10      	pop	{r4}
	notify(mgr, 0);
    c7b2:	4710      	bx	r2

0000c7b4 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    c7b4:	2003      	movs	r0, #3
    c7b6:	f7fe ba3f 	b.w	ac38 <nrfx_clock_start>

0000c7ba <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    c7ba:	2002      	movs	r0, #2
    c7bc:	f7fe ba3c 	b.w	ac38 <nrfx_clock_start>

0000c7c0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    c7c0:	2000      	movs	r0, #0
    c7c2:	f7fe ba39 	b.w	ac38 <nrfx_clock_start>

0000c7c6 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    c7c6:	2003      	movs	r0, #3
    c7c8:	f000 b904 	b.w	c9d4 <nrfx_clock_stop>

0000c7cc <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    c7cc:	2002      	movs	r0, #2
    c7ce:	f000 b901 	b.w	c9d4 <nrfx_clock_stop>

0000c7d2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    c7d2:	2000      	movs	r0, #0
    c7d4:	f000 b8fe 	b.w	c9d4 <nrfx_clock_stop>

0000c7d8 <blocking_start_callback>:
{
    c7d8:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    c7da:	f7ff b899 	b.w	b910 <z_impl_k_sem_give>

0000c7de <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
    c7de:	4608      	mov	r0, r1
    c7e0:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
    c7e2:	4611      	mov	r1, r2
    c7e4:	f7fe f8d2 	bl	a98c <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
    c7e8:	2800      	cmp	r0, #0
	}

	return 0;
}
    c7ea:	bf18      	it	ne
    c7ec:	f06f 0004 	mvnne.w	r0, #4
    c7f0:	bd08      	pop	{r3, pc}

0000c7f2 <entropy_psa_crypto_rng_init>:
{
    c7f2:	b508      	push	{r3, lr}
	status = psa_crypto_init();
    c7f4:	f000 f8e8 	bl	c9c8 <psa_crypto_init>
		return -EIO;
    c7f8:	2800      	cmp	r0, #0
}
    c7fa:	bf18      	it	ne
    c7fc:	f06f 0004 	mvnne.w	r0, #4
    c800:	bd08      	pop	{r3, pc}

0000c802 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c802:	6843      	ldr	r3, [r0, #4]
}
    c804:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c806:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    c808:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    c80a:	600b      	str	r3, [r1, #0]
}
    c80c:	4770      	bx	lr

0000c80e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c80e:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    c810:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c814:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    c816:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    c81a:	6098      	str	r0, [r3, #8]
}
    c81c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    c81e:	60d9      	str	r1, [r3, #12]
    c820:	4770      	bx	lr

0000c822 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c822:	6843      	ldr	r3, [r0, #4]
}
    c824:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c826:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    c828:	6099      	str	r1, [r3, #8]
}
    c82a:	4770      	bx	lr

0000c82c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c82c:	6843      	ldr	r3, [r0, #4]
}
    c82e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c830:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    c832:	60d9      	str	r1, [r3, #12]
}
    c834:	4770      	bx	lr

0000c836 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c836:	6843      	ldr	r3, [r0, #4]
    c838:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    c83a:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    c83c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    c840:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    c842:	6090      	str	r0, [r2, #8]
}
    c844:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    c846:	60d3      	str	r3, [r2, #12]
    c848:	4770      	bx	lr

0000c84a <gpio_nrfx_manage_callback>:
{
    c84a:	b510      	push	{r4, lr}
	return port->data;
    c84c:	6903      	ldr	r3, [r0, #16]
	return list->head;
    c84e:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    c850:	b1f8      	cbz	r0, c892 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c852:	4288      	cmp	r0, r1
    c854:	d119      	bne.n	c88a <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    c856:	689c      	ldr	r4, [r3, #8]
	return node->next;
    c858:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    c85a:	42a1      	cmp	r1, r4
	list->head = node;
    c85c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    c85e:	d100      	bne.n	c862 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    c860:	6098      	str	r0, [r3, #8]
	parent->next = child;
    c862:	2000      	movs	r0, #0
    c864:	6008      	str	r0, [r1, #0]
	if (set) {
    c866:	b12a      	cbz	r2, c874 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    c868:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    c86a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    c86c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    c86e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    c870:	b902      	cbnz	r2, c874 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    c872:	6099      	str	r1, [r3, #8]
	return 0;
    c874:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    c876:	e010      	b.n	c89a <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c878:	4281      	cmp	r1, r0
    c87a:	d106      	bne.n	c88a <gpio_nrfx_manage_callback+0x40>
	return node->next;
    c87c:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    c87e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    c880:	6898      	ldr	r0, [r3, #8]
    c882:	4281      	cmp	r1, r0
    c884:	d1ed      	bne.n	c862 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    c886:	609c      	str	r4, [r3, #8]
}
    c888:	e7eb      	b.n	c862 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    c88a:	4604      	mov	r4, r0
    c88c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c88e:	2800      	cmp	r0, #0
    c890:	d1f2      	bne.n	c878 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    c892:	2a00      	cmp	r2, #0
    c894:	d1e8      	bne.n	c868 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    c896:	f06f 0015 	mvn.w	r0, #21
}
    c89a:	bd10      	pop	{r4, pc}

0000c89c <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    c89c:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    c89e:	6843      	ldr	r3, [r0, #4]
    c8a0:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    c8a2:	7a05      	ldrb	r5, [r0, #8]
    c8a4:	6844      	ldr	r4, [r0, #4]
    c8a6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    c8aa:	42a3      	cmp	r3, r4
    c8ac:	d302      	bcc.n	c8b4 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    c8ae:	f06f 0001 	mvn.w	r0, #1
}
    c8b2:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    c8b4:	795c      	ldrb	r4, [r3, #5]
    c8b6:	428c      	cmp	r4, r1
    c8b8:	d001      	beq.n	c8be <pinctrl_lookup_state+0x22>
		(*state)++;
    c8ba:	3308      	adds	r3, #8
    c8bc:	e7f0      	b.n	c8a0 <pinctrl_lookup_state+0x4>
			return 0;
    c8be:	2000      	movs	r0, #0
    c8c0:	e7f7      	b.n	c8b2 <pinctrl_lookup_state+0x16>

0000c8c2 <uarte_nrfx_config_get>:
{
    c8c2:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    c8c4:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    c8c6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    c8ca:	e883 0003 	stmia.w	r3, {r0, r1}
}
    c8ce:	2000      	movs	r0, #0
    c8d0:	4770      	bx	lr

0000c8d2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    c8d2:	6843      	ldr	r3, [r0, #4]
    c8d4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    c8d6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    c8da:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    c8de:	4770      	bx	lr

0000c8e0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    c8e0:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    c8e2:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    c8e4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c8e6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    c8ea:	b150      	cbz	r0, c902 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c8ec:	2000      	movs	r0, #0
	*c = *data->rx_data;
    c8ee:	6952      	ldr	r2, [r2, #20]
    c8f0:	7812      	ldrb	r2, [r2, #0]
    c8f2:	700a      	strb	r2, [r1, #0]
    c8f4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    c8f8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c8fc:	2201      	movs	r2, #1
    c8fe:	601a      	str	r2, [r3, #0]
	return 0;
    c900:	4770      	bx	lr
		return -1;
    c902:	f04f 30ff 	mov.w	r0, #4294967295
}
    c906:	4770      	bx	lr

0000c908 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    c908:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    c90a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c90c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    c910:	b940      	cbnz	r0, c924 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    c912:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    c914:	079b      	lsls	r3, r3, #30
    c916:	d406      	bmi.n	c926 <is_tx_ready.isra.0+0x1e>
    c918:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    c91c:	3800      	subs	r0, #0
    c91e:	bf18      	it	ne
    c920:	2001      	movne	r0, #1
    c922:	4770      	bx	lr
    c924:	2001      	movs	r0, #1
}
    c926:	4770      	bx	lr

0000c928 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    c928:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    c92a:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    c92c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    c930:	05c9      	lsls	r1, r1, #23
    c932:	d518      	bpl.n	c966 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c934:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    c938:	b1a9      	cbz	r1, c966 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    c93a:	f04f 0020 	mov.w	r0, #32
    c93e:	f3ef 8111 	mrs	r1, BASEPRI
    c942:	f380 8812 	msr	BASEPRI_MAX, r0
    c946:	f3bf 8f6f 	isb	sy
    c94a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    c94e:	b130      	cbz	r0, c95e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c950:	2000      	movs	r0, #0
    c952:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    c956:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c95a:	2001      	movs	r0, #1
    c95c:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    c95e:	f381 8811 	msr	BASEPRI, r1
    c962:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c966:	6852      	ldr	r2, [r2, #4]
    c968:	06d2      	lsls	r2, r2, #27
    c96a:	d515      	bpl.n	c998 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    c96c:	f04f 0120 	mov.w	r1, #32
    c970:	f3ef 8211 	mrs	r2, BASEPRI
    c974:	f381 8812 	msr	BASEPRI_MAX, r1
    c978:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c97c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    c980:	b111      	cbz	r1, c988 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    c982:	2100      	movs	r1, #0
    c984:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    c988:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    c98c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    c990:	f382 8811 	msr	BASEPRI, r2
    c994:	f3bf 8f6f 	isb	sy
}
    c998:	4770      	bx	lr

0000c99a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    c99a:	4770      	bx	lr

0000c99c <event_clear>:
    c99c:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    c99e:	f100 0350 	add.w	r3, r0, #80	; 0x50
    c9a2:	009b      	lsls	r3, r3, #2
    c9a4:	b29b      	uxth	r3, r3
    c9a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c9aa:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
    c9ae:	601a      	str	r2, [r3, #0]
    c9b0:	681b      	ldr	r3, [r3, #0]
}
    c9b2:	4770      	bx	lr

0000c9b4 <sys_clock_cycle_get_32>:
{
    c9b4:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    c9b6:	f7fd fe21 	bl	a5fc <z_nrf_rtc_timer_read>
}
    c9ba:	bd08      	pop	{r3, pc}

0000c9bc <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    c9bc:	2000      	movs	r0, #0
{
    c9be:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    c9c0:	f7fc fe8c 	bl	96dc <sys_arch_reboot>

0000c9c4 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
    c9c4:	2000      	movs	r0, #0
    c9c6:	4770      	bx	lr

0000c9c8 <psa_crypto_init>:
}
    c9c8:	2000      	movs	r0, #0
    c9ca:	4770      	bx	lr

0000c9cc <SystemInit>:
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
    c9cc:	4770      	bx	lr

0000c9ce <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    c9ce:	4700      	bx	r0

0000c9d0 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    c9d0:	f000 b966 	b.w	cca0 <z_impl_k_busy_wait>

0000c9d4 <nrfx_clock_stop>:
    clock_stop(domain);
    c9d4:	f7fe b84e 	b.w	aa74 <clock_stop>

0000c9d8 <nrf_gpio_reconfigure>:
{
    c9d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c9da:	4616      	mov	r6, r2
    c9dc:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    c9e0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    c9e2:	a801      	add	r0, sp, #4
{
    c9e4:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    c9e6:	f7fe f9df 	bl	ada8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c9ea:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    c9ec:	f1b6 0c00 	subs.w	ip, r6, #0
    c9f0:	bf18      	it	ne
    c9f2:	f04f 0c01 	movne.w	ip, #1
    c9f6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    c9fa:	1e0b      	subs	r3, r1, #0
    c9fc:	bf18      	it	ne
    c9fe:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    ca00:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    ca02:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    ca06:	bf14      	ite	ne
    ca08:	f04f 0c0c 	movne.w	ip, #12
    ca0c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    ca10:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    ca12:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    ca16:	bf14      	ite	ne
    ca18:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    ca1c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    ca20:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    ca22:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    ca26:	bf14      	ite	ne
    ca28:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    ca2c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    ca30:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    ca34:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    ca38:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    ca3c:	b101      	cbz	r1, ca40 <nrf_gpio_reconfigure+0x68>
    ca3e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    ca40:	b10e      	cbz	r6, ca46 <nrf_gpio_reconfigure+0x6e>
    ca42:	7836      	ldrb	r6, [r6, #0]
    ca44:	0076      	lsls	r6, r6, #1
    ca46:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    ca48:	b10d      	cbz	r5, ca4e <nrf_gpio_reconfigure+0x76>
    ca4a:	782d      	ldrb	r5, [r5, #0]
    ca4c:	00ad      	lsls	r5, r5, #2
    ca4e:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    ca50:	b10c      	cbz	r4, ca56 <nrf_gpio_reconfigure+0x7e>
    ca52:	7824      	ldrb	r4, [r4, #0]
    ca54:	0224      	lsls	r4, r4, #8
    ca56:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    ca58:	b10f      	cbz	r7, ca5e <nrf_gpio_reconfigure+0x86>
    ca5a:	783f      	ldrb	r7, [r7, #0]
    ca5c:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    ca5e:	430c      	orrs	r4, r1
    ca60:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    ca62:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    ca66:	b003      	add	sp, #12
    ca68:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ca6a <nrf_gpio_cfg_sense_set>:
{
    ca6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    ca6c:	f10d 030f 	add.w	r3, sp, #15
    ca70:	9301      	str	r3, [sp, #4]
    ca72:	2300      	movs	r3, #0
{
    ca74:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    ca78:	461a      	mov	r2, r3
    ca7a:	4619      	mov	r1, r3
    ca7c:	9300      	str	r3, [sp, #0]
    ca7e:	f7ff ffab 	bl	c9d8 <nrf_gpio_reconfigure>
}
    ca82:	b005      	add	sp, #20
    ca84:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca88 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    ca88:	4770      	bx	lr

0000ca8a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    ca8a:	b140      	cbz	r0, ca9e <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    ca8c:	68c3      	ldr	r3, [r0, #12]
    ca8e:	7858      	ldrb	r0, [r3, #1]
    ca90:	f010 0001 	ands.w	r0, r0, #1
    ca94:	bf1e      	ittt	ne
    ca96:	7818      	ldrbne	r0, [r3, #0]
    ca98:	fab0 f080 	clzne	r0, r0
    ca9c:	0940      	lsrne	r0, r0, #5
}
    ca9e:	4770      	bx	lr

0000caa0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    caa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    caa2:	4605      	mov	r5, r0
    caa4:	460e      	mov	r6, r1
	__asm__ volatile(
    caa6:	f04f 0320 	mov.w	r3, #32
    caaa:	f3ef 8711 	mrs	r7, BASEPRI
    caae:	f383 8812 	msr	BASEPRI_MAX, r3
    cab2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    cab6:	f7ff fa4f 	bl	bf58 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    caba:	4631      	mov	r1, r6
    cabc:	4604      	mov	r4, r0
    cabe:	4628      	mov	r0, r5
    cac0:	f7ff ff7c 	bl	c9bc <k_sys_fatal_error_handler>
	__asm__ volatile(
    cac4:	f387 8811 	msr	BASEPRI, r7
    cac8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    cacc:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    cace:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cad2:	f7fc be4d 	b.w	9770 <z_impl_k_thread_abort>

0000cad6 <z_early_memset>:
	(void) memset(dst, c, n);
    cad6:	f7ff bdd9 	b.w	c68c <memset>

0000cada <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    cada:	f7ff bdcc 	b.w	c676 <memcpy>

0000cade <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    cade:	f3ef 8005 	mrs	r0, IPSR
}
    cae2:	3800      	subs	r0, #0
    cae4:	bf18      	it	ne
    cae6:	2001      	movne	r0, #1
    cae8:	4770      	bx	lr

0000caea <z_pm_save_idle_exit>:
{
    caea:	b508      	push	{r3, lr}
	pm_system_resume();
    caec:	f7fc fa3a 	bl	8f64 <pm_system_resume>
}
    caf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    caf4:	f7ff bf51 	b.w	c99a <sys_clock_idle_exit>

0000caf8 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    caf8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    cafc:	428b      	cmp	r3, r1
    cafe:	d001      	beq.n	cb04 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    cb00:	f7ff b8ae 	b.w	bc60 <z_set_prio>
}
    cb04:	2000      	movs	r0, #0
    cb06:	4770      	bx	lr

0000cb08 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    cb08:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    cb0c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    cb0e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    cb10:	2300      	movs	r3, #0
	node->prev = NULL;
    cb12:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    cb16:	4770      	bx	lr

0000cb18 <unpend_thread_no_timeout>:
{
    cb18:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    cb1a:	f7ff fff5 	bl	cb08 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    cb1e:	7b43      	ldrb	r3, [r0, #13]
    cb20:	f023 0302 	bic.w	r3, r3, #2
    cb24:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    cb26:	2300      	movs	r3, #0
    cb28:	6083      	str	r3, [r0, #8]
}
    cb2a:	bd08      	pop	{r3, pc}

0000cb2c <add_to_waitq_locked>:
{
    cb2c:	b538      	push	{r3, r4, r5, lr}
    cb2e:	4604      	mov	r4, r0
    cb30:	460d      	mov	r5, r1
	unready_thread(thread);
    cb32:	f7ff f817 	bl	bb64 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    cb36:	7b63      	ldrb	r3, [r4, #13]
    cb38:	f043 0302 	orr.w	r3, r3, #2
    cb3c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    cb3e:	b1e5      	cbz	r5, cb7a <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    cb40:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    cb42:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cb44:	429d      	cmp	r5, r3
    cb46:	d109      	bne.n	cb5c <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    cb48:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    cb4a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    cb4e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    cb50:	606c      	str	r4, [r5, #4]
}
    cb52:	e012      	b.n	cb7a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    cb54:	686a      	ldr	r2, [r5, #4]
    cb56:	4293      	cmp	r3, r2
    cb58:	d0f6      	beq.n	cb48 <add_to_waitq_locked+0x1c>
    cb5a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cb5c:	2b00      	cmp	r3, #0
    cb5e:	d0f3      	beq.n	cb48 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    cb60:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    cb64:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    cb68:	428a      	cmp	r2, r1
    cb6a:	d0f3      	beq.n	cb54 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    cb6c:	4291      	cmp	r1, r2
    cb6e:	ddf1      	ble.n	cb54 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    cb70:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    cb72:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    cb76:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    cb78:	605c      	str	r4, [r3, #4]
}
    cb7a:	bd38      	pop	{r3, r4, r5, pc}

0000cb7c <z_ready_thread>:
{
    cb7c:	b510      	push	{r4, lr}
	__asm__ volatile(
    cb7e:	f04f 0320 	mov.w	r3, #32
    cb82:	f3ef 8411 	mrs	r4, BASEPRI
    cb86:	f383 8812 	msr	BASEPRI_MAX, r3
    cb8a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    cb8e:	f7fe ffb5 	bl	bafc <ready_thread>
	__asm__ volatile(
    cb92:	f384 8811 	msr	BASEPRI, r4
    cb96:	f3bf 8f6f 	isb	sy
}
    cb9a:	bd10      	pop	{r4, pc}

0000cb9c <z_sched_wake_thread>:
{
    cb9c:	b538      	push	{r3, r4, r5, lr}
    cb9e:	4604      	mov	r4, r0
	__asm__ volatile(
    cba0:	f04f 0320 	mov.w	r3, #32
    cba4:	f3ef 8511 	mrs	r5, BASEPRI
    cba8:	f383 8812 	msr	BASEPRI_MAX, r3
    cbac:	f3bf 8f6f 	isb	sy
		if (!killed) {
    cbb0:	7b43      	ldrb	r3, [r0, #13]
    cbb2:	f013 0f28 	tst.w	r3, #40	; 0x28
    cbb6:	d10b      	bne.n	cbd0 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    cbb8:	6883      	ldr	r3, [r0, #8]
    cbba:	b10b      	cbz	r3, cbc0 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    cbbc:	f7ff ffac 	bl	cb18 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    cbc0:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    cbc2:	b951      	cbnz	r1, cbda <z_sched_wake_thread+0x3e>
    cbc4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
    cbc8:	4620      	mov	r0, r4
    cbca:	7363      	strb	r3, [r4, #13]
    cbcc:	f7fe ff96 	bl	bafc <ready_thread>
	__asm__ volatile(
    cbd0:	f385 8811 	msr	BASEPRI, r5
    cbd4:	f3bf 8f6f 	isb	sy
}
    cbd8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    cbda:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    cbde:	e7f3      	b.n	cbc8 <z_sched_wake_thread+0x2c>

0000cbe0 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    cbe0:	2101      	movs	r1, #1
    cbe2:	3818      	subs	r0, #24
    cbe4:	f7ff bfda 	b.w	cb9c <z_sched_wake_thread>

0000cbe8 <z_unpend_first_thread>:
{
    cbe8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    cbea:	f04f 0320 	mov.w	r3, #32
    cbee:	f3ef 8511 	mrs	r5, BASEPRI
    cbf2:	f383 8812 	msr	BASEPRI_MAX, r3
    cbf6:	f3bf 8f6f 	isb	sy
	return list->head == list;
    cbfa:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cbfc:	42a0      	cmp	r0, r4
    cbfe:	d00d      	beq.n	cc1c <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    cc00:	b134      	cbz	r4, cc10 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    cc02:	4620      	mov	r0, r4
    cc04:	f7ff ff88 	bl	cb18 <unpend_thread_no_timeout>
    cc08:	f104 0018 	add.w	r0, r4, #24
    cc0c:	f000 f81e 	bl	cc4c <z_abort_timeout>
	__asm__ volatile(
    cc10:	f385 8811 	msr	BASEPRI, r5
    cc14:	f3bf 8f6f 	isb	sy
}
    cc18:	4620      	mov	r0, r4
    cc1a:	bd38      	pop	{r3, r4, r5, pc}
    cc1c:	2400      	movs	r4, #0
    cc1e:	e7f7      	b.n	cc10 <z_unpend_first_thread+0x28>

0000cc20 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    cc20:	4603      	mov	r3, r0
    cc22:	b920      	cbnz	r0, cc2e <z_reschedule_irqlock+0xe>
    cc24:	f3ef 8205 	mrs	r2, IPSR
    cc28:	b90a      	cbnz	r2, cc2e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    cc2a:	f7fc bb19 	b.w	9260 <arch_swap>
    cc2e:	f383 8811 	msr	BASEPRI, r3
    cc32:	f3bf 8f6f 	isb	sy
}
    cc36:	4770      	bx	lr

0000cc38 <z_reschedule_unlocked>:
	__asm__ volatile(
    cc38:	f04f 0320 	mov.w	r3, #32
    cc3c:	f3ef 8011 	mrs	r0, BASEPRI
    cc40:	f383 8812 	msr	BASEPRI_MAX, r3
    cc44:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    cc48:	f7ff bfea 	b.w	cc20 <z_reschedule_irqlock>

0000cc4c <z_abort_timeout>:
{
    cc4c:	b510      	push	{r4, lr}
    cc4e:	f04f 0220 	mov.w	r2, #32
    cc52:	f3ef 8411 	mrs	r4, BASEPRI
    cc56:	f382 8812 	msr	BASEPRI_MAX, r2
    cc5a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    cc5e:	6803      	ldr	r3, [r0, #0]
    cc60:	b13b      	cbz	r3, cc72 <z_abort_timeout+0x26>
			remove_timeout(to);
    cc62:	f7ff fa23 	bl	c0ac <remove_timeout>
			ret = 0;
    cc66:	2000      	movs	r0, #0
	__asm__ volatile(
    cc68:	f384 8811 	msr	BASEPRI, r4
    cc6c:	f3bf 8f6f 	isb	sy
}
    cc70:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    cc72:	f06f 0015 	mvn.w	r0, #21
    cc76:	e7f7      	b.n	cc68 <z_abort_timeout+0x1c>

0000cc78 <z_get_next_timeout_expiry>:
{
    cc78:	b510      	push	{r4, lr}
	__asm__ volatile(
    cc7a:	f04f 0320 	mov.w	r3, #32
    cc7e:	f3ef 8411 	mrs	r4, BASEPRI
    cc82:	f383 8812 	msr	BASEPRI_MAX, r3
    cc86:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    cc8a:	f7ff f9ef 	bl	c06c <next_timeout>
	__asm__ volatile(
    cc8e:	f384 8811 	msr	BASEPRI, r4
    cc92:	f3bf 8f6f 	isb	sy
}
    cc96:	bd10      	pop	{r4, pc}

0000cc98 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    cc98:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    cc9a:	f7ff fb03 	bl	c2a4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    cc9e:	bd08      	pop	{r3, pc}

0000cca0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    cca0:	b108      	cbz	r0, cca6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    cca2:	f7fc b91d 	b.w	8ee0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    cca6:	4770      	bx	lr

0000cca8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    cca8:	4770      	bx	lr
	...
